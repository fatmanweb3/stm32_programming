
SPI_CAN_SINGLE_MCP2515.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080036c0  080036c0  000046c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e8  080036e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080036fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080036fc  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b297  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdc  00000000  00000000  000102d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00011fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  00012968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214a7  00000000  00000000  000130e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c375  00000000  00000000  0003458a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca3c5  00000000  00000000  000408ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010acc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0010ad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0010d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036a8 	.word	0x080036a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036a8 	.word	0x080036a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MCP2515_WriteReg>:

// SPI handle (defined in main.c by IOC)
extern SPI_HandleTypeDef hspi1;

// Low-level SPI write to MCP2515
void MCP2515_WriteReg(uint8_t reg, uint8_t data) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
    uint8_t txBuf[3] = {MCP2515_WRITE, reg, data};
 8000540:	2302      	movs	r3, #2
 8000542:	733b      	strb	r3, [r7, #12]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_RESET); // CS low
 800054c:	2200      	movs	r2, #0
 800054e:	2140      	movs	r1, #64	@ 0x40
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <MCP2515_WriteReg+0x48>)
 8000552:	f000 ff31 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, txBuf, 3, 100);
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	2364      	movs	r3, #100	@ 0x64
 800055c:	2203      	movs	r2, #3
 800055e:	4807      	ldr	r0, [pc, #28]	@ (800057c <MCP2515_WriteReg+0x4c>)
 8000560:	f001 fe05 	bl	800216e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_SET);   // CS high
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	@ 0x40
 8000568:	4803      	ldr	r0, [pc, #12]	@ (8000578 <MCP2515_WriteReg+0x48>)
 800056a:	f000 ff25 	bl	80013b8 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020400 	.word	0x40020400
 800057c:	20000028 	.word	0x20000028

08000580 <MCP2515_Reset>:
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_SET);
    return rxBuf[0];
}

// Reset MCP2515
void MCP2515_Reset(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
    uint8_t txBuf[1] = {MCP2515_RESET};
 8000586:	23c0      	movs	r3, #192	@ 0xc0
 8000588:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2140      	movs	r1, #64	@ 0x40
 800058e:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <MCP2515_Reset+0x38>)
 8000590:	f000 ff12 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, txBuf, 1, 100);
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	2364      	movs	r3, #100	@ 0x64
 8000598:	2201      	movs	r2, #1
 800059a:	4808      	ldr	r0, [pc, #32]	@ (80005bc <MCP2515_Reset+0x3c>)
 800059c:	f001 fde7 	bl	800216e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2140      	movs	r1, #64	@ 0x40
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <MCP2515_Reset+0x38>)
 80005a6:	f000 ff07 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Wait for reset
 80005aa:	200a      	movs	r0, #10
 80005ac:	f000 fba8 	bl	8000d00 <HAL_Delay>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020400 	.word	0x40020400
 80005bc:	20000028 	.word	0x20000028

080005c0 <MCP2515_Init>:

// Initialize MCP2515 (500 kbps, normal mode)
void MCP2515_Init(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    // Reset MCP2515
    MCP2515_Reset();
 80005c4:	f7ff ffdc 	bl	8000580 <MCP2515_Reset>

    // Configure baud rate (500 kbps for 8 MHz crystal)
    // Fosc = 8 MHz, TQ = 2/Fosc, Baud = 1/(2 * TQ * (1 + BRP))
    MCP2515_WriteReg(MCP2515_CNF1, 0x01); // BRP = 1, SJW = 1
 80005c8:	2101      	movs	r1, #1
 80005ca:	202a      	movs	r0, #42	@ 0x2a
 80005cc:	f7ff ffb0 	bl	8000530 <MCP2515_WriteReg>
    MCP2515_WriteReg(MCP2515_CNF2, 0xB1); // PHSEG1 = 3, PRSEG = 2
 80005d0:	21b1      	movs	r1, #177	@ 0xb1
 80005d2:	2029      	movs	r0, #41	@ 0x29
 80005d4:	f7ff ffac 	bl	8000530 <MCP2515_WriteReg>
    MCP2515_WriteReg(MCP2515_CNF3, 0x01); // PHSEG2 = 2
 80005d8:	2101      	movs	r1, #1
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f7ff ffa8 	bl	8000530 <MCP2515_WriteReg>

    // Set normal mode
    MCP2515_WriteReg(MCP2515_CANCTRL, 0x00); // Normal mode, CLKOUT disabled
 80005e0:	2100      	movs	r1, #0
 80005e2:	200f      	movs	r0, #15
 80005e4:	f7ff ffa4 	bl	8000530 <MCP2515_WriteReg>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MCP2515_SendMessage>:

// Send CAN message (standard 11-bit ID)
void MCP2515_SendMessage(uint16_t id, uint8_t *data, uint8_t len) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4613      	mov	r3, r2
 80005fa:	717b      	strb	r3, [r7, #5]
    // Set ID (11-bit)
    MCP2515_WriteReg(MCP2515_TXB0SIDH, (id >> 3) & 0xFF);   // High byte
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	2031      	movs	r0, #49	@ 0x31
 8000608:	f7ff ff92 	bl	8000530 <MCP2515_WriteReg>
    MCP2515_WriteReg(MCP2515_TXB0SIDL, (id << 5) & 0xE0);   // Low byte, standard ID
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	015b      	lsls	r3, r3, #5
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f7ff ff8a 	bl	8000530 <MCP2515_WriteReg>

    // Set data length (max 8 bytes)
    MCP2515_WriteReg(MCP2515_TXB0DLC, len & 0x0F);
 800061c:	797b      	ldrb	r3, [r7, #5]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	2035      	movs	r0, #53	@ 0x35
 8000628:	f7ff ff82 	bl	8000530 <MCP2515_WriteReg>

    // Write data
    for (uint8_t i = 0; i < len && i < 8; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e00c      	b.n	800064c <MCP2515_SendMessage+0x60>
        MCP2515_WriteReg(MCP2515_TXB0D0 + i, data[i]);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3336      	adds	r3, #54	@ 0x36
 8000636:	b2d8      	uxtb	r0, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f7ff ff75 	bl	8000530 <MCP2515_WriteReg>
    for (uint8_t i = 0; i < len && i < 8; i++) {
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3301      	adds	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	797b      	ldrb	r3, [r7, #5]
 8000650:	429a      	cmp	r2, r3
 8000652:	d202      	bcs.n	800065a <MCP2515_SendMessage+0x6e>
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b07      	cmp	r3, #7
 8000658:	d9eb      	bls.n	8000632 <MCP2515_SendMessage+0x46>
    }

    // Request to send
    uint8_t txBuf[1] = {MCP2515_RTS_TXB0};
 800065a:	2381      	movs	r3, #129	@ 0x81
 800065c:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	@ 0x40
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <MCP2515_SendMessage+0x9c>)
 8000664:	f000 fea8 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, txBuf, 1, 100);
 8000668:	f107 010c 	add.w	r1, r7, #12
 800066c:	2364      	movs	r3, #100	@ 0x64
 800066e:	2201      	movs	r2, #1
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <MCP2515_SendMessage+0xa0>)
 8000672:	f001 fd7c 	bl	800216e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, MCP2515_CS_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <MCP2515_SendMessage+0x9c>)
 800067c:	f000 fe9c 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020400 	.word	0x40020400
 800068c:	20000028 	.word	0x20000028

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fac1 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f81f 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f8f1 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 f8c5 	bl	8000830 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006a6:	f000 f88d 	bl	80007c4 <MX_SPI1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Initialize MCP2515
	  MCP2515_Init();
 80006aa:	f7ff ff89 	bl	80005c0 <MCP2515_Init>
	  #ifdef huart2
	  UART_Print("MCP2515 Initialized\r\n");
	  #endif

	  // Send CAN message: ID=0x100, Data="Hello"
	  uint8_t data[] = {'H', 'e', 'l', 'l', 'o'};
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <main+0x48>)
 80006b0:	463b      	mov	r3, r7
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	6018      	str	r0, [r3, #0]
 80006b8:	3304      	adds	r3, #4
 80006ba:	7019      	strb	r1, [r3, #0]
	  MCP2515_SendMessage(0x100, data, 5);
 80006bc:	463b      	mov	r3, r7
 80006be:	2205      	movs	r2, #5
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006c6:	f7ff ff91 	bl	80005ec <MCP2515_SendMessage>
	  #ifdef huart2
	  UART_Print("CAN Message Sent: Hello\r\n");
	  #endif

	  // Wait and send once (or loop for testing)
	  HAL_Delay(1000); // Send every 1 second
 80006ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ce:	f000 fb17 	bl	8000d00 <HAL_Delay>
  {
 80006d2:	bf00      	nop
 80006d4:	e7e9      	b.n	80006aa <main+0x1a>
 80006d6:	bf00      	nop
 80006d8:	080036c0 	.word	0x080036c0

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	@ 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 ffb0 	bl	8003650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <SystemClock_Config+0xe0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <SystemClock_Config+0xe0>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <SystemClock_Config+0xe0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <SystemClock_Config+0xe4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a26      	ldr	r2, [pc, #152]	@ (80007c0 <SystemClock_Config+0xe4>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <SystemClock_Config+0xe4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800074a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000750:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f9da 	bl	8001b20 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000772:	f000 f905 	bl	8000980 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000776:	f000 fe39 	bl	80013ec <HAL_PWREx_EnableOverDrive>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000780:	f000 f8fe 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2105      	movs	r1, #5
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fe72 	bl	800148c <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80007ae:	f000 f8e7 	bl	8000980 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	@ (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f001 fc21 	bl	800205c <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f8ae 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000028 	.word	0x20000028
 800082c:	40013000 	.word	0x40013000

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f001 ffc0 	bl	80027ec <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f885 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000080 	.word	0x20000080
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a33      	ldr	r2, [pc, #204]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <MX_GPIO_Init+0xec>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_GPIO_Init+0xec>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4819      	ldr	r0, [pc, #100]	@ (8000974 <MX_GPIO_Init+0xf0>)
 8000910:	f000 fd52 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <MX_GPIO_Init+0xf4>)
 800092c:	f000 fbb0 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_GPIO_Init+0xf8>)
 8000946:	f000 fba3 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 800094a:	2340      	movs	r3, #64	@ 0x40
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0xf0>)
 8000962:	f000 fb95 	bl	8001090 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400
 8000978:	40020800 	.word	0x40020800
 800097c:	40020000 	.word	0x40020000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 fa8c 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <HAL_SPI_MspInit+0x94>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d133      	bne.n	8000a66 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_SPI_MspInit+0x98>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a36:	23e0      	movs	r3, #224	@ 0xe0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a46:	2305      	movs	r3, #5
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <HAL_SPI_MspInit+0x9c>)
 8000a52:	f000 fb1d 	bl	8001090 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2023      	movs	r0, #35	@ 0x23
 8000a5c:	f000 fa4f 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a60:	2023      	movs	r0, #35	@ 0x23
 8000a62:	f000 fa68 	bl	8000f36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000

08000a7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <HAL_UART_MspInit+0x94>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d133      	bne.n	8000b06 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <HAL_UART_MspInit+0x9c>)
 8000af2:	f000 facd 	bl	8001090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2026      	movs	r0, #38	@ 0x26
 8000afc:	f000 f9ff 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b00:	2026      	movs	r0, #38	@ 0x26
 8000b02:	f000 fa18 	bl	8000f36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f8a5 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <SPI1_IRQHandler+0x10>)
 8000b82:	f001 fc39 	bl	80023f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000028 	.word	0x20000028

08000b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <USART2_IRQHandler+0x10>)
 8000b96:	f001 fe79 	bl	800288c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000080 	.word	0x20000080

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fd33 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fd49 	bl	8000690 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	080036f0 	.word	0x080036f0
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	200000cc 	.word	0x200000cc

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f94f 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fe9c 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f967 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f92f 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200000c8 	.word	0x200000c8

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000c8 	.word	0x200000c8

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff feb6 	bl	8000ce8 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e052      	b.n	8001042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0216 	bic.w	r2, r2, #22
 8000faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <HAL_DMA_Abort+0x62>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0208 	bic.w	r2, r2, #8
 8000fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fec:	e013      	b.n	8001016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fee:	f7ff fe7b 	bl	8000ce8 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d90c      	bls.n	8001016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2220      	movs	r2, #32
 8001000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e015      	b.n	8001042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1e4      	bne.n	8000fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001028:	223f      	movs	r2, #63	@ 0x3f
 800102a:	409a      	lsls	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d004      	beq.n	8001068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e00c      	b.n	8001082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2205      	movs	r2, #5
 800106c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	@ 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e165      	b.n	8001378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8154 	bne.w	8001372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80ae 	beq.w	8001372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b5d      	ldr	r3, [pc, #372]	@ (8001390 <HAL_GPIO_Init+0x300>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a5c      	ldr	r2, [pc, #368]	@ (8001390 <HAL_GPIO_Init+0x300>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <HAL_GPIO_Init+0x300>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a58      	ldr	r2, [pc, #352]	@ (8001394 <HAL_GPIO_Init+0x304>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_GPIO_Init+0x308>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	@ (800139c <HAL_GPIO_Init+0x30c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	@ (80013a0 <HAL_GPIO_Init+0x310>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	@ (80013a4 <HAL_GPIO_Init+0x314>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	@ (80013a8 <HAL_GPIO_Init+0x318>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x20a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x31c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x206>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a49      	ldr	r2, [pc, #292]	@ (80013b0 <HAL_GPIO_Init+0x320>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x202>
 800128e:	2306      	movs	r3, #6
 8001290:	e00c      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 8001292:	2307      	movs	r3, #7
 8001294:	e00a      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 800129a:	2304      	movs	r3, #4
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x21c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	@ (8001394 <HAL_GPIO_Init+0x304>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a26      	ldr	r2, [pc, #152]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_GPIO_Init+0x324>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f ae96 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021400 	.word	0x40021400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_PWREx_EnableOverDrive+0x90>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <HAL_PWREx_EnableOverDrive+0x90>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_PWREx_EnableOverDrive+0x90>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_PWREx_EnableOverDrive+0x94>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fc66 	bl	8000ce8 <HAL_GetTick>
 800141c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800141e:	e009      	b.n	8001434 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001420:	f7ff fc62 	bl	8000ce8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800142e:	d901      	bls.n	8001434 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e01f      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x98>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d1ee      	bne.n	8001420 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff fc4e 	bl	8000ce8 <HAL_GetTick>
 800144c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800144e:	e009      	b.n	8001464 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001450:	f7ff fc4a 	bl	8000ce8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800145e:	d901      	bls.n	8001464 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e007      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x98>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001470:	d1ee      	bne.n	8001450 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	420e0040 	.word	0x420e0040
 8001484:	40007000 	.word	0x40007000
 8001488:	420e0044 	.word	0x420e0044

0800148c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0cc      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b68      	ldr	r3, [pc, #416]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d90c      	bls.n	80014c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0b8      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e0:	4b59      	ldr	r3, [pc, #356]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a58      	ldr	r2, [pc, #352]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a52      	ldr	r2, [pc, #328]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	4b50      	ldr	r3, [pc, #320]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	494d      	ldr	r1, [pc, #308]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d044      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d119      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d003      	beq.n	800154a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b3f      	ldr	r3, [pc, #252]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e06f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e067      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4934      	ldr	r1, [pc, #208]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fbb4 	bl	8000ce8 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fbb0 	bl	8000ce8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e04f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d20c      	bcs.n	80015d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e032      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4916      	ldr	r1, [pc, #88]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	490e      	ldr	r1, [pc, #56]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001612:	f000 f855 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8001616:	4602      	mov	r2, r0
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	490a      	ldr	r1, [pc, #40]	@ (800164c <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	5ccb      	ldrb	r3, [r1, r3]
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb14 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00
 8001648:	40023800 	.word	0x40023800
 800164c:	080036c8 	.word	0x080036c8
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_RCC_GetHCLKFreq+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000

08001670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001674:	f7ff fff0 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	0a9b      	lsrs	r3, r3, #10
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4903      	ldr	r1, [pc, #12]	@ (8001694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	080036d8 	.word	0x080036d8

08001698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800169c:	f7ff ffdc 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	0b5b      	lsrs	r3, r3, #13
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	@ (80016bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	080036d8 	.word	0x080036d8

080016c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c4:	b0ae      	sub	sp, #184	@ 0xb8
 80016c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e6:	4bcb      	ldr	r3, [pc, #812]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	f200 8206 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x440>
 80016f4:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	08001731 	.word	0x08001731
 8001700:	08001b01 	.word	0x08001b01
 8001704:	08001b01 	.word	0x08001b01
 8001708:	08001b01 	.word	0x08001b01
 800170c:	08001739 	.word	0x08001739
 8001710:	08001b01 	.word	0x08001b01
 8001714:	08001b01 	.word	0x08001b01
 8001718:	08001b01 	.word	0x08001b01
 800171c:	08001741 	.word	0x08001741
 8001720:	08001b01 	.word	0x08001b01
 8001724:	08001b01 	.word	0x08001b01
 8001728:	08001b01 	.word	0x08001b01
 800172c:	08001931 	.word	0x08001931
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4bb9      	ldr	r3, [pc, #740]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001736:	e1e7      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001738:	4bb8      	ldr	r3, [pc, #736]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800173e:	e1e3      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4bb4      	ldr	r3, [pc, #720]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d071      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001758:	4bae      	ldr	r3, [pc, #696]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	2200      	movs	r2, #0
 8001760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001764:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800176c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800177a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800177e:	4622      	mov	r2, r4
 8001780:	462b      	mov	r3, r5
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4621      	mov	r1, r4
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	6439      	str	r1, [r7, #64]	@ 0x40
 800179c:	4629      	mov	r1, r5
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80017b0:	4649      	mov	r1, r9
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ba:	4641      	mov	r1, r8
 80017bc:	018a      	lsls	r2, r1, #6
 80017be:	4641      	mov	r1, r8
 80017c0:	1a51      	subs	r1, r2, r1
 80017c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80017c4:	4649      	mov	r1, r9
 80017c6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80017d8:	4649      	mov	r1, r9
 80017da:	00cb      	lsls	r3, r1, #3
 80017dc:	4641      	mov	r1, r8
 80017de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017e2:	4641      	mov	r1, r8
 80017e4:	00ca      	lsls	r2, r1, #3
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	4622      	mov	r2, r4
 80017ee:	189b      	adds	r3, r3, r2
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f2:	462b      	mov	r3, r5
 80017f4:	460a      	mov	r2, r1
 80017f6:	eb42 0303 	adc.w	r3, r2, r3
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001808:	4629      	mov	r1, r5
 800180a:	024b      	lsls	r3, r1, #9
 800180c:	4621      	mov	r1, r4
 800180e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001812:	4621      	mov	r1, r4
 8001814:	024a      	lsls	r2, r1, #9
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800181e:	2200      	movs	r2, #0
 8001820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001824:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001828:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800182c:	f7fe fcea 	bl	8000204 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800183a:	e067      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183c:	4b75      	ldr	r3, [pc, #468]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	2200      	movs	r2, #0
 8001844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001848:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800184c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001856:	2300      	movs	r3, #0
 8001858:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800185a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800185e:	4622      	mov	r2, r4
 8001860:	462b      	mov	r3, r5
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0159      	lsls	r1, r3, #5
 800186c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001870:	0150      	lsls	r0, r2, #5
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4621      	mov	r1, r4
 8001878:	1a51      	subs	r1, r2, r1
 800187a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800187c:	4629      	mov	r1, r5
 800187e:	eb63 0301 	sbc.w	r3, r3, r1
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018be:	4692      	mov	sl, r2
 80018c0:	469b      	mov	fp, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	eb1a 0303 	adds.w	r3, sl, r3
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	462b      	mov	r3, r5
 80018cc:	eb4b 0303 	adc.w	r3, fp, r3
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018de:	4629      	mov	r1, r5
 80018e0:	028b      	lsls	r3, r1, #10
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e8:	4621      	mov	r1, r4
 80018ea:	028a      	lsls	r2, r1, #10
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018f4:	2200      	movs	r2, #0
 80018f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80018f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80018fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018fe:	f7fe fc81 	bl	8000204 <__aeabi_uldivmod>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4613      	mov	r3, r2
 8001908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800190c:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800191e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800192e:	e0eb      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d06b      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	2200      	movs	r2, #0
 8001950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195a:	663b      	str	r3, [r7, #96]	@ 0x60
 800195c:	2300      	movs	r3, #0
 800195e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001964:	4622      	mov	r2, r4
 8001966:	462b      	mov	r3, r5
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	0159      	lsls	r1, r3, #5
 8001972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001976:	0150      	lsls	r0, r2, #5
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4621      	mov	r1, r4
 800197e:	1a51      	subs	r1, r2, r1
 8001980:	61b9      	str	r1, [r7, #24]
 8001982:	4629      	mov	r1, r5
 8001984:	eb63 0301 	sbc.w	r3, r3, r1
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001996:	4659      	mov	r1, fp
 8001998:	018b      	lsls	r3, r1, #6
 800199a:	4651      	mov	r1, sl
 800199c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a0:	4651      	mov	r1, sl
 80019a2:	018a      	lsls	r2, r1, #6
 80019a4:	4651      	mov	r1, sl
 80019a6:	ebb2 0801 	subs.w	r8, r2, r1
 80019aa:	4659      	mov	r1, fp
 80019ac:	eb63 0901 	sbc.w	r9, r3, r1
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c4:	4690      	mov	r8, r2
 80019c6:	4699      	mov	r9, r3
 80019c8:	4623      	mov	r3, r4
 80019ca:	eb18 0303 	adds.w	r3, r8, r3
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	462b      	mov	r3, r5
 80019d2:	eb49 0303 	adc.w	r3, r9, r3
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019e4:	4629      	mov	r1, r5
 80019e6:	024b      	lsls	r3, r1, #9
 80019e8:	4621      	mov	r1, r4
 80019ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ee:	4621      	mov	r1, r4
 80019f0:	024a      	lsls	r2, r1, #9
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019fa:	2200      	movs	r2, #0
 80019fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a04:	f7fe fbfe 	bl	8000204 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a12:	e065      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x420>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	2200      	movs	r2, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a32:	2300      	movs	r3, #0
 8001a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	0159      	lsls	r1, r3, #5
 8001a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4c:	0150      	lsls	r0, r2, #5
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4641      	mov	r1, r8
 8001a54:	1a51      	subs	r1, r2, r1
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	4649      	mov	r1, r9
 8001a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	018b      	lsls	r3, r1, #6
 8001a70:	4651      	mov	r1, sl
 8001a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a76:	4651      	mov	r1, sl
 8001a78:	018a      	lsls	r2, r1, #6
 8001a7a:	4651      	mov	r1, sl
 8001a7c:	1a54      	subs	r4, r2, r1
 8001a7e:	4659      	mov	r1, fp
 8001a80:	eb63 0501 	sbc.w	r5, r3, r1
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ac8:	2200      	movs	r2, #0
 8001aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001acc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ace:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ad2:	f7fe fb97 	bl	8000204 <__aeabi_uldivmod>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4613      	mov	r3, r2
 8001adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0f1b      	lsrs	r3, r3, #28
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001afe:	e003      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	37b8      	adds	r7, #184	@ 0xb8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	00f42400 	.word	0x00f42400

08001b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e28d      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8083 	beq.w	8001c46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b40:	4b94      	ldr	r3, [pc, #592]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d019      	beq.n	8001b80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b4c:	4b91      	ldr	r3, [pc, #580]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b58:	4b8e      	ldr	r3, [pc, #568]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b64:	d00c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b66:	4b8b      	ldr	r3, [pc, #556]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4b88      	ldr	r3, [pc, #544]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b84      	ldr	r3, [pc, #528]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x124>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d157      	bne.n	8001c44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e25a      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x90>
 8001ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7b      	ldr	r2, [pc, #492]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xcc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xb4>
 8001bba:	4b76      	ldr	r3, [pc, #472]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a75      	ldr	r2, [pc, #468]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b73      	ldr	r3, [pc, #460]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a72      	ldr	r2, [pc, #456]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xcc>
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f878 	bl	8000ce8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f874 	bl	8000ce8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e21f      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xdc>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f864 	bl	8000ce8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f860 	bl	8000ce8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e20b      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b57      	ldr	r3, [pc, #348]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x104>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d06f      	beq.n	8001d32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c52:	4b50      	ldr	r3, [pc, #320]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d017      	beq.n	8001c8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b47      	ldr	r3, [pc, #284]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b44      	ldr	r3, [pc, #272]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b41      	ldr	r3, [pc, #260]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x186>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1d3      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4937      	ldr	r1, [pc, #220]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0x278>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff f80d 	bl	8000ce8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f809 	bl	8000ce8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e1b4      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4925      	ldr	r1, [pc, #148]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0x278>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ffec 	bl	8000ce8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7fe ffe8 	bl	8000ce8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e193      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d036      	beq.n	8001dac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ffcc 	bl	8000ce8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe ffc8 	bl	8000ce8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e173      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x234>
 8001d72:	e01b      	b.n	8001dac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7fe ffb5 	bl	8000ce8 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	e00e      	b.n	8001da0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7fe ffb1 	bl	8000ce8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d907      	bls.n	8001da0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e15c      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	42470000 	.word	0x42470000
 8001d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b8a      	ldr	r3, [pc, #552]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ea      	bne.n	8001d82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8097 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbe:	4b83      	ldr	r3, [pc, #524]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10f      	bne.n	8001dea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b7f      	ldr	r3, [pc, #508]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b7c      	ldr	r3, [pc, #496]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b79      	ldr	r3, [pc, #484]	@ (8001fd0 <HAL_RCC_OscConfig+0x4b0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df6:	4b76      	ldr	r3, [pc, #472]	@ (8001fd0 <HAL_RCC_OscConfig+0x4b0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	@ (8001fd0 <HAL_RCC_OscConfig+0x4b0>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7fe ff71 	bl	8000ce8 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7fe ff6d 	bl	8000ce8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e118      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd0 <HAL_RCC_OscConfig+0x4b0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x31e>
 8001e30:	4b66      	ldr	r3, [pc, #408]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e34:	4a65      	ldr	r2, [pc, #404]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3c:	e01c      	b.n	8001e78 <HAL_RCC_OscConfig+0x358>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x340>
 8001e46:	4b61      	ldr	r3, [pc, #388]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4a:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e52:	4b5e      	ldr	r3, [pc, #376]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	4a5d      	ldr	r2, [pc, #372]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0x358>
 8001e60:	4b5a      	ldr	r3, [pc, #360]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e64:	4a59      	ldr	r2, [pc, #356]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6c:	4b57      	ldr	r3, [pc, #348]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e70:	4a56      	ldr	r2, [pc, #344]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d015      	beq.n	8001eac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7fe ff32 	bl	8000ce8 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe ff2e 	bl	8000ce8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0d7      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ee      	beq.n	8001e88 <HAL_RCC_OscConfig+0x368>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7fe ff1c 	bl	8000ce8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7fe ff18 	bl	8000ce8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0c1      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	4b40      	ldr	r3, [pc, #256]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ee      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ad 	beq.w	800204c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d060      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d145      	bne.n	8001f92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b33      	ldr	r3, [pc, #204]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7fe feec 	bl	8000ce8 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fee8 	bl	8000ce8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e093      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b29      	ldr	r3, [pc, #164]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	019b      	lsls	r3, r3, #6
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	071b      	lsls	r3, r3, #28
 8001f5e:	491b      	ldr	r1, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b4>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7fe febd 	bl	8000ce8 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7fe feb9 	bl	8000ce8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e064      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x452>
 8001f90:	e05c      	b.n	800204c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe fea6 	bl	8000ce8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fea2 	bl	8000ce8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e04d      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x480>
 8001fbe:	e045      	b.n	800204c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e040      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_RCC_OscConfig+0x538>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d030      	beq.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d129      	bne.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d122      	bne.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002010:	4293      	cmp	r3, r2
 8002012:	d119      	bne.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d10f      	bne.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07b      	b.n	8002166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800207e:	d009      	beq.n	8002094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	e005      	b.n	8002094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fc94 	bl	80009dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002118:	ea42 0103 	orr.w	r1, r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0104 	and.w	r1, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	f003 0210 	and.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b088      	sub	sp, #32
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800217e:	f7fe fdb3 	bl	8000ce8 <HAL_GetTick>
 8002182:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
 8002196:	e12a      	b.n	80023ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_Transmit+0x36>
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e122      	b.n	80023ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Transmit+0x48>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e11b      	b.n	80023ee <HAL_SPI_Transmit+0x280>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002204:	d10f      	bne.n	8002226 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002230:	2b40      	cmp	r3, #64	@ 0x40
 8002232:	d007      	beq.n	8002244 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800224c:	d152      	bne.n	80022f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0xee>
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d145      	bne.n	80022e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	1c9a      	adds	r2, r3, #2
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002280:	e032      	b.n	80022e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d112      	bne.n	80022b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	1c9a      	adds	r2, r3, #2
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022b4:	e018      	b.n	80022e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b6:	f7fe fd17 	bl	8000ce8 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d803      	bhi.n	80022ce <HAL_SPI_Transmit+0x160>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Transmit+0x166>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e082      	b.n	80023ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1c7      	bne.n	8002282 <HAL_SPI_Transmit+0x114>
 80022f2:	e053      	b.n	800239c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_SPI_Transmit+0x194>
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d147      	bne.n	8002392 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002328:	e033      	b.n	8002392 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d113      	bne.n	8002360 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800235e:	e018      	b.n	8002392 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002360:	f7fe fcc2 	bl	8000ce8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d803      	bhi.n	8002378 <HAL_SPI_Transmit+0x20a>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x210>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e02d      	b.n	80023ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1c6      	bne.n	800232a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f9cf 	bl	8002744 <SPI_EndRxTxTransaction>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
    return;
 800243a:	e0d7      	b.n	80025ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_SPI_IRQHandler+0x66>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	09db      	lsrs	r3, r3, #7
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    return;
 800245c:	e0c6      	b.n	80025ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_SPI_IRQHandler+0x8c>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80b4 	beq.w	80025ec <HAL_SPI_IRQHandler+0x1f4>
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ad 	beq.w	80025ec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d023      	beq.n	80024e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d011      	beq.n	80024ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	e00b      	b.n	80024e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
        return;
 80024e4:	e082      	b.n	80025ec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d014      	beq.n	800251c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	f043 0208 	orr.w	r2, r3, #8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	2b00      	cmp	r3, #0
 8002548:	d04f      	beq.n	80025ea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002558:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <HAL_SPI_IRQHandler+0x17e>
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d034      	beq.n	80025e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0203 	bic.w	r2, r2, #3
 8002584:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_SPI_IRQHandler+0x1fc>)
 8002594:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fd55 	bl	800104a <HAL_DMA_Abort_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025be:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_SPI_IRQHandler+0x1fc>)
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd3f 	bl	800104a <HAL_DMA_Abort_IT>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80025de:	e003      	b.n	80025e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f809 	bl	80025f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80025e6:	e000      	b.n	80025ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80025e8:	bf00      	nop
    return;
 80025ea:	bf00      	nop
  }
}
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0800260d 	.word	0x0800260d

080025f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff ffe6 	bl	80025f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002644:	f7fe fb50 	bl	8000ce8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002654:	f7fe fb48 	bl	8000ce8 <HAL_GetTick>
 8002658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800265a:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	0d1b      	lsrs	r3, r3, #20
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800266a:	e055      	b.n	8002718 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d051      	beq.n	8002718 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002674:	f7fe fb38 	bl	8000ce8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	d902      	bls.n	800268a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d13d      	bne.n	8002706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026a2:	d111      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ac:	d004      	beq.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b6:	d107      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d0:	d10f      	bne.n	80026f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e018      	b.n	8002738 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	e002      	b.n	8002718 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3b01      	subs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	429a      	cmp	r2, r3
 8002734:	d19a      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000

08002744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2201      	movs	r2, #1
 8002758:	2102      	movs	r1, #2
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff ff6a 	bl	8002634 <SPI_WaitFlagStateUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e032      	b.n	80027dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <SPI_EndRxTxTransaction+0xa0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <SPI_EndRxTxTransaction+0xa4>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002794:	d112      	bne.n	80027bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff47 	bl	8002634 <SPI_WaitFlagStateUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e00f      	b.n	80027dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d0f2      	beq.n	80027bc <SPI_EndRxTxTransaction+0x78>
 80027d6:	e000      	b.n	80027da <SPI_EndRxTxTransaction+0x96>
        break;
 80027d8:	bf00      	nop
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000000 	.word	0x20000000
 80027e8:	165e9f81 	.word	0x165e9f81

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f932 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc99 	bl	8003168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b0ba      	sub	sp, #232	@ 0xe8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_UART_IRQHandler+0x66>
 80028de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fb7e 	bl	8002fec <UART_Receive_IT>
      return;
 80028f0:	e273      	b.n	8002dda <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80de 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x22c>
 80028fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800290c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80d1 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_UART_IRQHandler+0xae>
 8002922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800293a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_UART_IRQHandler+0xd2>
 8002946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0xf6>
 800296a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f043 0204 	orr.w	r2, r3, #4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d011      	beq.n	80029b2 <HAL_UART_IRQHandler+0x126>
 800298e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800299a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 820a 	beq.w	8002dd0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x14e>
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb09 	bl	8002fec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b40      	cmp	r3, #64	@ 0x40
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_UART_IRQHandler+0x17a>
 80029fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04f      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa14 	bl	8002e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d141      	bne.n	8002a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3314      	adds	r3, #20
 8002a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1d9      	bne.n	8002a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d013      	beq.n	8002a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	4a8a      	ldr	r2, [pc, #552]	@ (8002c9c <HAL_UART_IRQHandler+0x410>)
 8002a74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fae5 	bl	800104a <HAL_DMA_Abort_IT>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a90:	4610      	mov	r0, r2
 8002a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	e00e      	b.n	8002ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9b6 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	e00a      	b.n	8002ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9b2 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	e006      	b.n	8002ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9ae 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ab2:	e18d      	b.n	8002dd0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	bf00      	nop
    return;
 8002ab6:	e18b      	b.n	8002dd0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 8167 	bne.w	8002d90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8160 	beq.w	8002d90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8159 	beq.w	8002d90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	2b40      	cmp	r3, #64	@ 0x40
 8002b00:	f040 80ce 	bne.w	8002ca0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a9 	beq.w	8002c6c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b22:	429a      	cmp	r2, r3
 8002b24:	f080 80a2 	bcs.w	8002c6c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b3a:	f000 8088 	beq.w	8002c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1d9      	bne.n	8002b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3314      	adds	r3, #20
 8002b90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3314      	adds	r3, #20
 8002baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e1      	bne.n	8002b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e3      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c1e:	f023 0310 	bic.w	r3, r3, #16
 8002c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e3      	bne.n	8002c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f98e 	bl	8000f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8d9 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002c6a:	e0b3      	b.n	8002dd4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 80ad 	bne.w	8002dd4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	f040 80a6 	bne.w	8002dd4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8c1 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
      return;
 8002c9a:	e09b      	b.n	8002dd4 <HAL_UART_IRQHandler+0x548>
 8002c9c:	08002efb 	.word	0x08002efb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 808e 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8089 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cea:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e3      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d22:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e3      	bne.n	8002cfe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0310 	bic.w	r3, r3, #16
 8002d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d68:	61fa      	str	r2, [r7, #28]
 8002d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	617b      	str	r3, [r7, #20]
   return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e3      	bne.n	8002d44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f847 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d8e:	e023      	b.n	8002dd8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_UART_IRQHandler+0x524>
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f8b7 	bl	8002f1c <UART_Transmit_IT>
    return;
 8002dae:	e014      	b.n	8002dda <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <HAL_UART_IRQHandler+0x54e>
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8f7 	bl	8002fbc <UART_EndTransmit_IT>
    return;
 8002dce:	e004      	b.n	8002dda <HAL_UART_IRQHandler+0x54e>
    return;
 8002dd0:	bf00      	nop
 8002dd2:	e002      	b.n	8002dda <HAL_UART_IRQHandler+0x54e>
      return;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_UART_IRQHandler+0x54e>
      return;
 8002dd8:	bf00      	nop
  }
}
 8002dda:	37e8      	adds	r7, #232	@ 0xe8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b095      	sub	sp, #84	@ 0x54
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d119      	bne.n	8002ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ecc:	61ba      	str	r2, [r7, #24]
 8002ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e5      	bne.n	8002eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eee:	bf00      	nop
 8002ef0:	3754      	adds	r7, #84	@ 0x54
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff ff7a 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b21      	cmp	r3, #33	@ 0x21
 8002f2e:	d13e      	bne.n	8002fae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f38:	d114      	bne.n	8002f64 <UART_Transmit_IT+0x48>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d110      	bne.n	8002f64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	621a      	str	r2, [r3, #32]
 8002f62:	e008      	b.n	8002f76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6211      	str	r1, [r2, #32]
 8002f6e:	781a      	ldrb	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff feff 	bl	8002de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08c      	sub	sp, #48	@ 0x30
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b22      	cmp	r3, #34	@ 0x22
 8003006:	f040 80aa 	bne.w	800315e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003012:	d115      	bne.n	8003040 <UART_Receive_IT+0x54>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	b29a      	uxth	r2, r3
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
 800303e:	e024      	b.n	800308a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304e:	d007      	beq.n	8003060 <UART_Receive_IT+0x74>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <UART_Receive_IT+0x82>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e008      	b.n	8003080 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307a:	b2da      	uxtb	r2, r3
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4619      	mov	r1, r3
 8003098:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800309a:	2b00      	cmp	r3, #0
 800309c:	d15d      	bne.n	800315a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0220 	bic.w	r2, r2, #32
 80030ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d135      	bne.n	8003150 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	613b      	str	r3, [r7, #16]
   return(result);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f023 0310 	bic.w	r3, r3, #16
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310a:	623a      	str	r2, [r7, #32]
 800310c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	69f9      	ldr	r1, [r7, #28]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	61bb      	str	r3, [r7, #24]
   return(result);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e5      	bne.n	80030ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d10a      	bne.n	8003142 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe67 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
 800314e:	e002      	b.n	8003156 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fe4f 	bl	8002df4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e002      	b.n	8003160 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3730      	adds	r7, #48	@ 0x30
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b0c0      	sub	sp, #256	@ 0x100
 800316e:	af00      	add	r7, sp, #0
 8003170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	ea40 0301 	orr.w	r3, r0, r1
 8003190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031c0:	f021 010c 	bic.w	r1, r1, #12
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	6999      	ldr	r1, [r3, #24]
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	ea40 0301 	orr.w	r3, r0, r1
 80031ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003434 <UART_SetConfig+0x2cc>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d005      	beq.n	8003208 <UART_SetConfig+0xa0>
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b8d      	ldr	r3, [pc, #564]	@ (8003438 <UART_SetConfig+0x2d0>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d104      	bne.n	8003212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7fe fa46 	bl	8001698 <HAL_RCC_GetPCLK2Freq>
 800320c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003210:	e003      	b.n	800321a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003212:	f7fe fa2d 	bl	8001670 <HAL_RCC_GetPCLK1Freq>
 8003216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003224:	f040 810c 	bne.w	8003440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800322c:	2200      	movs	r2, #0
 800322e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	1891      	adds	r1, r2, r2
 8003240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003242:	415b      	adcs	r3, r3
 8003244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800324a:	4621      	mov	r1, r4
 800324c:	eb12 0801 	adds.w	r8, r2, r1
 8003250:	4629      	mov	r1, r5
 8003252:	eb43 0901 	adc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003278:	462b      	mov	r3, r5
 800327a:	eb49 0303 	adc.w	r3, r9, r3
 800327e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800328e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003296:	460b      	mov	r3, r1
 8003298:	18db      	adds	r3, r3, r3
 800329a:	653b      	str	r3, [r7, #80]	@ 0x50
 800329c:	4613      	mov	r3, r2
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032ac:	f7fc ffaa 	bl	8000204 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4b61      	ldr	r3, [pc, #388]	@ (800343c <UART_SetConfig+0x2d4>)
 80032b6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	011c      	lsls	r4, r3, #4
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	1891      	adds	r1, r2, r2
 80032d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d8:	415b      	adcs	r3, r3
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032e0:	4641      	mov	r1, r8
 80032e2:	eb12 0a01 	adds.w	sl, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb43 0b01 	adc.w	fp, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003300:	4692      	mov	sl, r2
 8003302:	469b      	mov	fp, r3
 8003304:	4643      	mov	r3, r8
 8003306:	eb1a 0303 	adds.w	r3, sl, r3
 800330a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800330e:	464b      	mov	r3, r9
 8003310:	eb4b 0303 	adc.w	r3, fp, r3
 8003314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800332c:	460b      	mov	r3, r1
 800332e:	18db      	adds	r3, r3, r3
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40
 8003332:	4613      	mov	r3, r2
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	647b      	str	r3, [r7, #68]	@ 0x44
 800333a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800333e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003342:	f7fc ff5f 	bl	8000204 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4611      	mov	r1, r2
 800334c:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <UART_SetConfig+0x2d4>)
 800334e:	fba3 2301 	umull	r2, r3, r3, r1
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2264      	movs	r2, #100	@ 0x64
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	1acb      	subs	r3, r1, r3
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003362:	4b36      	ldr	r3, [pc, #216]	@ (800343c <UART_SetConfig+0x2d4>)
 8003364:	fba3 2302 	umull	r2, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003370:	441c      	add	r4, r3
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800337c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800338c:	415b      	adcs	r3, r3
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003394:	4641      	mov	r1, r8
 8003396:	1851      	adds	r1, r2, r1
 8003398:	6339      	str	r1, [r7, #48]	@ 0x30
 800339a:	4649      	mov	r1, r9
 800339c:	414b      	adcs	r3, r1
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033ac:	4659      	mov	r1, fp
 80033ae:	00cb      	lsls	r3, r1, #3
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b6:	4651      	mov	r1, sl
 80033b8:	00ca      	lsls	r2, r1, #3
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	4642      	mov	r2, r8
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c8:	464b      	mov	r3, r9
 80033ca:	460a      	mov	r2, r1
 80033cc:	eb42 0303 	adc.w	r3, r2, r3
 80033d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e8:	460b      	mov	r3, r1
 80033ea:	18db      	adds	r3, r3, r3
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ee:	4613      	mov	r3, r2
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033fe:	f7fc ff01 	bl	8000204 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <UART_SetConfig+0x2d4>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	@ 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	@ 0x32
 800341a:	4a08      	ldr	r2, [pc, #32]	@ (800343c <UART_SetConfig+0x2d4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4422      	add	r2, r4
 800342e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003430:	e106      	b.n	8003640 <UART_SetConfig+0x4d8>
 8003432:	bf00      	nop
 8003434:	40011000 	.word	0x40011000
 8003438:	40011400 	.word	0x40011400
 800343c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800344a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800344e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003452:	4642      	mov	r2, r8
 8003454:	464b      	mov	r3, r9
 8003456:	1891      	adds	r1, r2, r2
 8003458:	6239      	str	r1, [r7, #32]
 800345a:	415b      	adcs	r3, r3
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
 800345e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003462:	4641      	mov	r1, r8
 8003464:	1854      	adds	r4, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0501 	adc.w	r5, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	00eb      	lsls	r3, r5, #3
 8003476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347a:	00e2      	lsls	r2, r4, #3
 800347c:	4614      	mov	r4, r2
 800347e:	461d      	mov	r5, r3
 8003480:	4643      	mov	r3, r8
 8003482:	18e3      	adds	r3, r4, r3
 8003484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003488:	464b      	mov	r3, r9
 800348a:	eb45 0303 	adc.w	r3, r5, r3
 800348e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034ae:	4629      	mov	r1, r5
 80034b0:	008b      	lsls	r3, r1, #2
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b8:	4621      	mov	r1, r4
 80034ba:	008a      	lsls	r2, r1, #2
 80034bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034c0:	f7fc fea0 	bl	8000204 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4b60      	ldr	r3, [pc, #384]	@ (800364c <UART_SetConfig+0x4e4>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	011c      	lsls	r4, r3, #4
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	61b9      	str	r1, [r7, #24]
 80034ec:	415b      	adcs	r3, r3
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6139      	str	r1, [r7, #16]
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003528:	464b      	mov	r3, r9
 800352a:	460a      	mov	r2, r1
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800353e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800354c:	4649      	mov	r1, r9
 800354e:	008b      	lsls	r3, r1, #2
 8003550:	4641      	mov	r1, r8
 8003552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003556:	4641      	mov	r1, r8
 8003558:	008a      	lsls	r2, r1, #2
 800355a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800355e:	f7fc fe51 	bl	8000204 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4611      	mov	r1, r2
 8003568:	4b38      	ldr	r3, [pc, #224]	@ (800364c <UART_SetConfig+0x4e4>)
 800356a:	fba3 2301 	umull	r2, r3, r3, r1
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2264      	movs	r2, #100	@ 0x64
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	1acb      	subs	r3, r1, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	@ 0x32
 800357c:	4a33      	ldr	r2, [pc, #204]	@ (800364c <UART_SetConfig+0x4e4>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003588:	441c      	add	r4, r3
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	673b      	str	r3, [r7, #112]	@ 0x70
 8003592:	677a      	str	r2, [r7, #116]	@ 0x74
 8003594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	415b      	adcs	r3, r3
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035da:	464b      	mov	r3, r9
 80035dc:	460a      	mov	r2, r1
 80035de:	eb42 0303 	adc.w	r3, r2, r3
 80035e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035fc:	4649      	mov	r1, r9
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	4641      	mov	r1, r8
 8003602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003606:	4641      	mov	r1, r8
 8003608:	008a      	lsls	r2, r1, #2
 800360a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800360e:	f7fc fdf9 	bl	8000204 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <UART_SetConfig+0x4e4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	@ 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	@ 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <UART_SetConfig+0x4e4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4422      	add	r2, r4
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003646:	46bd      	mov	sp, r7
 8003648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <memset>:
 8003650:	4402      	add	r2, r0
 8003652:	4603      	mov	r3, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4d0d      	ldr	r5, [pc, #52]	@ (8003698 <__libc_init_array+0x38>)
 8003664:	4c0d      	ldr	r4, [pc, #52]	@ (800369c <__libc_init_array+0x3c>)
 8003666:	1b64      	subs	r4, r4, r5
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	2600      	movs	r6, #0
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	4d0b      	ldr	r5, [pc, #44]	@ (80036a0 <__libc_init_array+0x40>)
 8003672:	4c0c      	ldr	r4, [pc, #48]	@ (80036a4 <__libc_init_array+0x44>)
 8003674:	f000 f818 	bl	80036a8 <_init>
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	2600      	movs	r6, #0
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	080036e8 	.word	0x080036e8
 800369c:	080036e8 	.word	0x080036e8
 80036a0:	080036e8 	.word	0x080036e8
 80036a4:	080036ec 	.word	0x080036ec

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
