
SPI_CAN_DOUBLE_MCP2515.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800413c  0800413c  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800413c  0800413c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004144  08004144  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800414c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000074  080041c0  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080041c0  000062d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a381  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a74  00000000  00000000  00010425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00011ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000738  00000000  00000000  00012808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216f1  00000000  00000000  00012f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb1e  00000000  00000000  00034631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca853  00000000  00000000  0004014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a9a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b20  00000000  00000000  0010a9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0010d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004018 	.word	0x08004018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004018 	.word	0x08004018

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MCP2515_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* MCP2515 Driver Functions */
void MCP2515_Select(MCP2515_Handle *hcan) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_RESET);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6858      	ldr	r0, [r3, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	891b      	ldrh	r3, [r3, #8]
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	f001 f83a 	bl	8001678 <HAL_GPIO_WritePin>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MCP2515_Deselect>:

void MCP2515_Deselect(MCP2515_Handle *hcan) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_SET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6858      	ldr	r0, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	891b      	ldrh	r3, [r3, #8]
 800061c:	2201      	movs	r2, #1
 800061e:	4619      	mov	r1, r3
 8000620:	f001 f82a 	bl	8001678 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MCP2515_WriteReg>:

void MCP2515_WriteReg(MCP2515_Handle *hcan, uint8_t reg, uint8_t value) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
 8000638:	4613      	mov	r3, r2
 800063a:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buf[3] = {MCP2515_WRITE, reg, value};
 800063c:	2302      	movs	r3, #2
 800063e:	733b      	strb	r3, [r7, #12]
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	737b      	strb	r3, [r7, #13]
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	73bb      	strb	r3, [r7, #14]
    MCP2515_Select(hcan);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffcf 	bl	80005ec <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 3, HAL_MAX_DELAY);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	2203      	movs	r2, #3
 800065c:	f001 fee7 	bl	800242e <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffd3 	bl	800060c <MCP2515_Deselect>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <MCP2515_ReadReg>:

uint8_t MCP2515_ReadReg(MCP2515_Handle *hcan, uint8_t reg) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[2] = {MCP2515_READ, reg};
 800067a:	2303      	movs	r3, #3
 800067c:	733b      	strb	r3, [r7, #12]
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
    MCP2515_Select(hcan);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffb0 	bl	80005ec <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 2, HAL_MAX_DELAY);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	f107 010c 	add.w	r1, r7, #12
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	2202      	movs	r2, #2
 800069a:	f001 fec8 	bl	800242e <HAL_SPI_Transmit>
    HAL_SPI_Receive(hcan->hspi, &rx_buf, 1, HAL_MAX_DELAY);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	f107 010b 	add.w	r1, r7, #11
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	2201      	movs	r2, #1
 80006ac:	f002 f803 	bl	80026b6 <HAL_SPI_Receive>
    MCP2515_Deselect(hcan);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ffab 	bl	800060c <MCP2515_Deselect>
    return rx_buf;
 80006b6:	7afb      	ldrb	r3, [r7, #11]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MCP2515_Reset>:

void MCP2515_Reset(MCP2515_Handle *hcan) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    uint8_t tx_buf = MCP2515_RESET;
 80006c8:	23c0      	movs	r3, #192	@ 0xc0
 80006ca:	73fb      	strb	r3, [r7, #15]
    MCP2515_Select(hcan);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff8d 	bl	80005ec <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, &tx_buf, 1, HAL_MAX_DELAY);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f107 010f 	add.w	r1, r7, #15
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2201      	movs	r2, #1
 80006e0:	f001 fea5 	bl	800242e <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff91 	bl	800060c <MCP2515_Deselect>
    HAL_Delay(10);
 80006ea:	200a      	movs	r0, #10
 80006ec:	f000 fd26 	bl	800113c <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MCP2515_SetMode>:

void MCP2515_SetMode(MCP2515_Handle *hcan, uint8_t mode) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
    MCP2515_WriteReg(hcan, MCP2515_CANCTRL, mode);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	461a      	mov	r2, r3
 8000708:	210f      	movs	r1, #15
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff8e 	bl	800062c <MCP2515_WriteReg>
    HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fd13 	bl	800113c <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 8000716:	e002      	b.n	800071e <MCP2515_SetMode+0x26>
        HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fd0f 	bl	800113c <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 800071e:	210e      	movs	r1, #14
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffa4 	bl	800066e <MCP2515_ReadReg>
 8000726:	4603      	mov	r3, r0
 8000728:	f003 02e0 	and.w	r2, r3, #224	@ 0xe0
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	429a      	cmp	r2, r3
 8000730:	d1f2      	bne.n	8000718 <MCP2515_SetMode+0x20>
    }
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MCP2515_Init>:

void MCP2515_Init(MCP2515_Handle *hcan, uint32_t bitrate) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    MCP2515_Reset(hcan);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffba 	bl	80006c0 <MCP2515_Reset>
    MCP2515_SetMode(hcan, MCP2515_MODE_CONFIG);
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffd2 	bl	80006f8 <MCP2515_SetMode>
    // 500 kbps @ 16 MHz MCP2515 clock
    if (bitrate == 500000) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <MCP2515_Init+0x78>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d10e      	bne.n	800077a <MCP2515_Init+0x3e>
        MCP2515_WriteReg(hcan, MCP2515_CNF1, 0x01); // SJW=1, BRP=1
 800075c:	2201      	movs	r2, #1
 800075e:	212a      	movs	r1, #42	@ 0x2a
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff63 	bl	800062c <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF2, 0xB1); // BTLMODE=1, PHSEG1=6, PRSEG=1
 8000766:	22b1      	movs	r2, #177	@ 0xb1
 8000768:	2129      	movs	r1, #41	@ 0x29
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ff5e 	bl	800062c <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF3, 0x05); // PHSEG2=6
 8000770:	2205      	movs	r2, #5
 8000772:	2128      	movs	r1, #40	@ 0x28
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff59 	bl	800062c <MCP2515_WriteReg>
    }
    MCP2515_WriteReg(hcan, MCP2515_RXB0CTRL, 0x60); // Receive all
 800077a:	2260      	movs	r2, #96	@ 0x60
 800077c:	2160      	movs	r1, #96	@ 0x60
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff54 	bl	800062c <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDH, 0x00); // Filter ID 0
 8000784:	2200      	movs	r2, #0
 8000786:	2161      	movs	r1, #97	@ 0x61
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff4f 	bl	800062c <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDL, 0x00);
 800078e:	2200      	movs	r2, #0
 8000790:	2162      	movs	r1, #98	@ 0x62
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff4a 	bl	800062c <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_CANINTE, 0x00); // No interrupts
 8000798:	2200      	movs	r2, #0
 800079a:	212b      	movs	r1, #43	@ 0x2b
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff45 	bl	800062c <MCP2515_WriteReg>
    MCP2515_SetMode(hcan, MCP2515_MODE_NORMAL);
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffa7 	bl	80006f8 <MCP2515_SetMode>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0007a120 	.word	0x0007a120

080007b8 <MCP2515_Transmit>:

void MCP2515_Transmit(MCP2515_Handle *hcan, CAN_Message *msg) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDH, (msg->id >> 3));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	2131      	movs	r1, #49	@ 0x31
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff2c 	bl	800062c <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDL, ((msg->id & 0x07) << 5));
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	015b      	lsls	r3, r3, #5
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2132      	movs	r1, #50	@ 0x32
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ff22 	bl	800062c <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0DLC, msg->dlc & 0x0F);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	f003 030f 	and.w	r3, r3, #15
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	2135      	movs	r1, #53	@ 0x35
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff18 	bl	800062c <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e00d      	b.n	800081e <MCP2515_Transmit+0x66>
        MCP2515_WriteReg(hcan, MCP2515_TXB0D0 + i, msg->data[i]);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	3336      	adds	r3, #54	@ 0x36
 8000806:	b2d9      	uxtb	r1, r3
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	461a      	mov	r2, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ff0a 	bl	800062c <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	7bfa      	ldrb	r2, [r7, #15]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3ec      	bcc.n	8000802 <MCP2515_Transmit+0x4a>
    }
    MCP2515_WriteReg(hcan, MCP2515_TXB0CTRL, 0x08); // Set TXREQ
 8000828:	2208      	movs	r2, #8
 800082a:	2130      	movs	r1, #48	@ 0x30
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fefd 	bl	800062c <MCP2515_WriteReg>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <MCP2515_Receive>:

uint8_t MCP2515_Receive(MCP2515_Handle *hcan, CAN_Message *msg) {
 800083a:	b590      	push	{r4, r7, lr}
 800083c:	b085      	sub	sp, #20
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
    uint8_t status = MCP2515_ReadReg(hcan, MCP2515_CANINTF);
 8000844:	212c      	movs	r1, #44	@ 0x2c
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff11 	bl	800066e <MCP2515_ReadReg>
 800084c:	4603      	mov	r3, r0
 800084e:	73bb      	strb	r3, [r7, #14]
    if (!(status & MCP2515_INT_RX0IF)) {
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <MCP2515_Receive+0x24>
        return 0; // No message
 800085a:	2300      	movs	r3, #0
 800085c:	e03c      	b.n	80008d8 <MCP2515_Receive+0x9e>
    }
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 800085e:	2161      	movs	r1, #97	@ 0x61
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff04 	bl	800066e <MCP2515_ReadReg>
 8000866:	4603      	mov	r3, r0
 8000868:	00dc      	lsls	r4, r3, #3
              (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDL) >> 5);
 800086a:	2162      	movs	r1, #98	@ 0x62
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fefe 	bl	800066e <MCP2515_ReadReg>
 8000872:	4603      	mov	r3, r0
 8000874:	095b      	lsrs	r3, r3, #5
 8000876:	b2db      	uxtb	r3, r3
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 8000878:	4323      	orrs	r3, r4
 800087a:	461a      	mov	r2, r3
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	601a      	str	r2, [r3, #0]
    msg->dlc = MCP2515_ReadReg(hcan, MCP2515_RXB0DLC) & 0x0F;
 8000880:	2165      	movs	r1, #101	@ 0x65
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fef3 	bl	800066e <MCP2515_ReadReg>
 8000888:	4603      	mov	r3, r0
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	b2da      	uxtb	r2, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e00f      	b.n	80008ba <MCP2515_Receive+0x80>
        msg->data[i] = MCP2515_ReadReg(hcan, MCP2515_RXB0D0 + i);
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3366      	adds	r3, #102	@ 0x66
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fee2 	bl	800066e <MCP2515_ReadReg>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	4423      	add	r3, r4
 80008b2:	715a      	strb	r2, [r3, #5]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	7bfa      	ldrb	r2, [r7, #15]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3ea      	bcc.n	800089a <MCP2515_Receive+0x60>
    }
    MCP2515_WriteReg(hcan, MCP2515_CANINTF, status & ~MCP2515_INT_RX0IF);
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	f023 0301 	bic.w	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	212c      	movs	r1, #44	@ 0x2c
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff feab 	bl	800062c <MCP2515_WriteReg>
    return 1; // Message received
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <UART_Print>:

void UART_Print(const char *str) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fc91 	bl	8000210 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <UART_Print+0x28>)
 80008fa:	f002 fb31 	bl	8002f60 <HAL_UART_Transmit>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000140 	.word	0x20000140

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b09b      	sub	sp, #108	@ 0x6c
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000912:	f000 fba1 	bl	8001058 <HAL_Init>
  SystemClock_Config();
 8000916:	f000 f87b 	bl	8000a10 <SystemClock_Config>
  MX_GPIO_Init();
 800091a:	f000 f983 	bl	8000c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800091e:	f000 f957 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000922:	f000 f8e9 	bl	8000af8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000926:	f000 f91d 	bl	8000b64 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MCP2515 modules
  UART_Print("Initializing MCP2515 Transmitter (SPI3)...\r\n");
 800092a:	482f      	ldr	r0, [pc, #188]	@ (80009e8 <main+0xdc>)
 800092c:	f7ff ffd8 	bl	80008e0 <UART_Print>
  MCP2515_Init(&hcan_tx, 500000);
 8000930:	492e      	ldr	r1, [pc, #184]	@ (80009ec <main+0xe0>)
 8000932:	482f      	ldr	r0, [pc, #188]	@ (80009f0 <main+0xe4>)
 8000934:	f7ff ff02 	bl	800073c <MCP2515_Init>
  UART_Print("Initializing MCP2515 Receiver (SPI1)...\r\n");
 8000938:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <main+0xe8>)
 800093a:	f7ff ffd1 	bl	80008e0 <UART_Print>
  MCP2515_Init(&hcan_rx, 500000);
 800093e:	492b      	ldr	r1, [pc, #172]	@ (80009ec <main+0xe0>)
 8000940:	482d      	ldr	r0, [pc, #180]	@ (80009f8 <main+0xec>)
 8000942:	f7ff fefb 	bl	800073c <MCP2515_Init>

  // Test message
  CAN_Message tx_msg = {
 8000946:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <main+0xf0>)
 8000948:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800094c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buf[64];
  while (1)
  {
    UART_Print("Sending CAN message...\r\n");
 8000952:	482b      	ldr	r0, [pc, #172]	@ (8000a00 <main+0xf4>)
 8000954:	f7ff ffc4 	bl	80008e0 <UART_Print>
    MCP2515_Transmit(&hcan_tx, &tx_msg);
 8000958:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800095c:	4619      	mov	r1, r3
 800095e:	4824      	ldr	r0, [pc, #144]	@ (80009f0 <main+0xe4>)
 8000960:	f7ff ff2a 	bl	80007b8 <MCP2515_Transmit>
    HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000968:	f000 fbe8 	bl	800113c <HAL_Delay>

    CAN_Message rx_msg = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
    if (MCP2515_Receive(&hcan_rx, &rx_msg)) {
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	481e      	ldr	r0, [pc, #120]	@ (80009f8 <main+0xec>)
 800097e:	f7ff ff5c 	bl	800083a <MCP2515_Receive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0e4      	beq.n	8000952 <main+0x46>
        sprintf(buf, "Received CAN ID: 0x%03X, DLC: %d, Data: \r\n", rx_msg.id, rx_msg.dlc);
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7a3b      	ldrb	r3, [r7, #8]
 800098c:	f107 0014 	add.w	r0, r7, #20
 8000990:	491c      	ldr	r1, [pc, #112]	@ (8000a04 <main+0xf8>)
 8000992:	f002 fea1 	bl	80036d8 <siprintf>
        UART_Print(buf);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffa0 	bl	80008e0 <UART_Print>
        for (uint8_t i = 0; i < rx_msg.dlc; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80009a6:	e016      	b.n	80009d6 <main+0xca>
            sprintf(buf, "%02X ", rx_msg.data[i]);
 80009a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009ac:	3368      	adds	r3, #104	@ 0x68
 80009ae:	443b      	add	r3, r7
 80009b0:	f813 3c5f 	ldrb.w	r3, [r3, #-95]
 80009b4:	461a      	mov	r2, r3
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4913      	ldr	r1, [pc, #76]	@ (8000a08 <main+0xfc>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fe8b 	bl	80036d8 <siprintf>
            UART_Print(buf);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff8a 	bl	80008e0 <UART_Print>
        for (uint8_t i = 0; i < rx_msg.dlc; i++) {
 80009cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009d0:	3301      	adds	r3, #1
 80009d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3e3      	bcc.n	80009a8 <main+0x9c>
        }
        UART_Print("\r\n");
 80009e0:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <main+0x100>)
 80009e2:	f7ff ff7d 	bl	80008e0 <UART_Print>
  {
 80009e6:	e7b4      	b.n	8000952 <main+0x46>
 80009e8:	08004030 	.word	0x08004030
 80009ec:	0007a120 	.word	0x0007a120
 80009f0:	20000000 	.word	0x20000000
 80009f4:	08004060 	.word	0x08004060
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	080040e0 	.word	0x080040e0
 8000a00:	0800408c 	.word	0x0800408c
 8000a04:	080040a8 	.word	0x080040a8
 8000a08:	080040d4 	.word	0x080040d4
 8000a0c:	080040dc 	.word	0x080040dc

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	@ 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2234      	movs	r2, #52	@ 0x34
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fe7c 	bl	800371c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <SystemClock_Config+0xe0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8000af0 <SystemClock_Config+0xe0>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <SystemClock_Config+0xe0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <SystemClock_Config+0xe4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a26      	ldr	r2, [pc, #152]	@ (8000af4 <SystemClock_Config+0xe4>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <SystemClock_Config+0xe4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000a84:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000a88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f9a0 	bl	8001de0 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aa6:	f000 f941 	bl	8000d2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aaa:	f000 fdff 	bl	80016ac <HAL_PWREx_EnableOverDrive>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ab4:	f000 f93a 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ace:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fe38 	bl	800174c <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ae2:	f000 f923 	bl	8000d2c <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b2c:	2218      	movs	r2, #24
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_SPI1_Init+0x64>)
 8000b4a:	f001 fbe7 	bl	800231c <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 f8ea 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000090 	.word	0x20000090
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_Init 0 */
  /* USER CODE END SPI3_Init 0 */
  /* USER CODE BEGIN SPI3_Init 1 */
  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b6a:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <MX_SPI3_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b98:	2210      	movs	r2, #16
 8000b9a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_SPI3_Init+0x64>)
 8000bb6:	f001 fbb1 	bl	800231c <HAL_SPI_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000bc0:	f000 f8b4 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  /* USER CODE END SPI3_Init 2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000e8 	.word	0x200000e8
 8000bcc:	40003c00 	.word	0x40003c00

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */
  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <MX_USART2_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c08:	f002 f95a 	bl	8002ec0 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f000 f88b 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000140 	.word	0x20000140
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b37      	ldr	r3, [pc, #220]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a36      	ldr	r2, [pc, #216]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a28      	ldr	r2, [pc, #160]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_GPIO_Init+0xf8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(CS_MSP2515_TX_GPIO_Port, CS_MSP2515_TX_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2110      	movs	r1, #16
 8000cae:	481c      	ldr	r0, [pc, #112]	@ (8000d20 <MX_GPIO_Init+0xfc>)
 8000cb0:	f000 fce2 	bl	8001678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_MSP2515_RX_GPIO_Port, CS_MSP2515_RX_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2140      	movs	r1, #64	@ 0x40
 8000cb8:	481a      	ldr	r0, [pc, #104]	@ (8000d24 <MX_GPIO_Init+0x100>)
 8000cba:	f000 fcdd 	bl	8001678 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4814      	ldr	r0, [pc, #80]	@ (8000d28 <MX_GPIO_Init+0x104>)
 8000cd6:	f000 fb3b 	bl	8001350 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_MSP2515_TX_Pin;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MSP2515_TX_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <MX_GPIO_Init+0xfc>)
 8000cf2:	f000 fb2d 	bl	8001350 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_MSP2515_RX_Pin;
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MSP2515_RX_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_GPIO_Init+0x100>)
 8000d0e:	f000 fb1f 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020800 	.word	0x40020800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 fab6 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a32      	ldr	r2, [pc, #200]	@ (8000e70 <HAL_SPI_MspInit+0xe8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a30      	ldr	r2, [pc, #192]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000db4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23e0      	movs	r3, #224	@ 0xe0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <HAL_SPI_MspInit+0xf0>)
 8000dfe:	f000 faa7 	bl	8001350 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e02:	e031      	b.n	8000e68 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <HAL_SPI_MspInit+0xf4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12c      	bne.n	8000e68 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_SPI_MspInit+0xec>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e46:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <HAL_SPI_MspInit+0xf8>)
 8000e64:	f000 fa74 	bl	8001350 <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40003c00 	.word	0x40003c00
 8000e80:	40020800 	.word	0x40020800

08000e84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_UART_MspInit+0x84>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12b      	bne.n	8000efe <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_UART_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <HAL_UART_MspInit+0x8c>)
 8000efa:	f000 fa29 	bl	8001350 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 f8c7 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f002 fbc2 	bl	800372c <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20020000 	.word	0x20020000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000188 	.word	0x20000188
 8000fdc:	200002d8 	.word	0x200002d8

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001008:	f7ff ffea 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001032:	f002 fb81 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fc69 	bl	800090c <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001048:	0800414c 	.word	0x0800414c
  ldr r2, =_sbss
 800104c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001050:	200002d8 	.word	0x200002d8

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f931 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fe54 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f93b 	bl	8001336 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f911 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000018 	.word	0x20000018
 80010f4:	20000020 	.word	0x20000020
 80010f8:	2000001c 	.word	0x2000001c

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000020 	.word	0x20000020
 8001120:	2000018c 	.word	0x2000018c

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000018c 	.word	0x2000018c

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000020 	.word	0x20000020

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff47 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5c 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb0 	bl	80012a4 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e165      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8154 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80ae 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b5d      	ldr	r3, [pc, #372]	@ (8001650 <HAL_GPIO_Init+0x300>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a5c      	ldr	r2, [pc, #368]	@ (8001650 <HAL_GPIO_Init+0x300>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001650 <HAL_GPIO_Init+0x300>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a58      	ldr	r2, [pc, #352]	@ (8001654 <HAL_GPIO_Init+0x304>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	@ (8001658 <HAL_GPIO_Init+0x308>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4e      	ldr	r2, [pc, #312]	@ (800165c <HAL_GPIO_Init+0x30c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4d      	ldr	r2, [pc, #308]	@ (8001660 <HAL_GPIO_Init+0x310>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4b      	ldr	r2, [pc, #300]	@ (8001668 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x20a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x206>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a49      	ldr	r2, [pc, #292]	@ (8001670 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x202>
 800154e:	2306      	movs	r3, #6
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001552:	2307      	movs	r3, #7
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	@ (8001654 <HAL_GPIO_Init+0x304>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_GPIO_Init+0x324>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a31      	ldr	r2, [pc, #196]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <HAL_GPIO_Init+0x324>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_GPIO_Init+0x324>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_GPIO_Init+0x324>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae96 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_PWREx_EnableOverDrive+0x90>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_PWREx_EnableOverDrive+0x90>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_PWREx_EnableOverDrive+0x90>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_PWREx_EnableOverDrive+0x94>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d8:	f7ff fd24 	bl	8001124 <HAL_GetTick>
 80016dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016de:	e009      	b.n	80016f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016e0:	f7ff fd20 	bl	8001124 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ee:	d901      	bls.n	80016f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e01f      	b.n	8001734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_PWREx_EnableOverDrive+0x98>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d1ee      	bne.n	80016e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001708:	f7ff fd0c 	bl	8001124 <HAL_GetTick>
 800170c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800170e:	e009      	b.n	8001724 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001710:	f7ff fd08 	bl	8001124 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171e:	d901      	bls.n	8001724 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e007      	b.n	8001734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_PWREx_EnableOverDrive+0x98>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001730:	d1ee      	bne.n	8001710 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	420e0040 	.word	0x420e0040
 8001744:	40007000 	.word	0x40007000
 8001748:	420e0044 	.word	0x420e0044

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fc72 	bl	8001124 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fc6e 	bl	8001124 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f855 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	@ (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fbd2 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	080040f0 	.word	0x080040f0
 8001910:	20000018 	.word	0x20000018
 8001914:	2000001c 	.word	0x2000001c

08001918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000018 	.word	0x20000018

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	08004100 	.word	0x08004100

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffdc 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	@ (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	08004100 	.word	0x08004100

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b0ae      	sub	sp, #184	@ 0xb8
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	4bcb      	ldr	r3, [pc, #812]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f200 8206 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x440>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019f1 	.word	0x080019f1
 80019c0:	08001dc1 	.word	0x08001dc1
 80019c4:	08001dc1 	.word	0x08001dc1
 80019c8:	08001dc1 	.word	0x08001dc1
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	08001dc1 	.word	0x08001dc1
 80019d4:	08001dc1 	.word	0x08001dc1
 80019d8:	08001dc1 	.word	0x08001dc1
 80019dc:	08001a01 	.word	0x08001a01
 80019e0:	08001dc1 	.word	0x08001dc1
 80019e4:	08001dc1 	.word	0x08001dc1
 80019e8:	08001dc1 	.word	0x08001dc1
 80019ec:	08001bf1 	.word	0x08001bf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4bb9      	ldr	r3, [pc, #740]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x358>)
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019f6:	e1e7      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4bb8      	ldr	r3, [pc, #736]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x35c>)
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019fe:	e1e3      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4bb4      	ldr	r3, [pc, #720]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d071      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4bae      	ldr	r3, [pc, #696]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a3e:	4622      	mov	r2, r4
 8001a40:	462b      	mov	r3, r5
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	0159      	lsls	r1, r3, #5
 8001a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a50:	0150      	lsls	r0, r2, #5
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4621      	mov	r1, r4
 8001a58:	1a51      	subs	r1, r2, r1
 8001a5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a70:	4649      	mov	r1, r9
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	4641      	mov	r1, r8
 8001a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	018a      	lsls	r2, r1, #6
 8001a7e:	4641      	mov	r1, r8
 8001a80:	1a51      	subs	r1, r2, r1
 8001a82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a84:	4649      	mov	r1, r9
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001a98:	4649      	mov	r1, r9
 8001a9a:	00cb      	lsls	r3, r1, #3
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	00ca      	lsls	r2, r1, #3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4622      	mov	r2, r4
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	eb42 0303 	adc.w	r3, r2, r3
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ac8:	4629      	mov	r1, r5
 8001aca:	024b      	lsls	r3, r1, #9
 8001acc:	4621      	mov	r1, r4
 8001ace:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	024a      	lsls	r2, r1, #9
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ae4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ae8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001aec:	f7fe fbe8 	bl	80002c0 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001afa:	e067      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b75      	ldr	r3, [pc, #468]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b16:	2300      	movs	r3, #0
 8001b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b1e:	4622      	mov	r2, r4
 8001b20:	462b      	mov	r3, r5
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	0159      	lsls	r1, r3, #5
 8001b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b30:	0150      	lsls	r0, r2, #5
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4621      	mov	r1, r4
 8001b38:	1a51      	subs	r1, r2, r1
 8001b3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b50:	4649      	mov	r1, r9
 8001b52:	018b      	lsls	r3, r1, #6
 8001b54:	4641      	mov	r1, r8
 8001b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5a:	4641      	mov	r1, r8
 8001b5c:	018a      	lsls	r2, r1, #6
 8001b5e:	4641      	mov	r1, r8
 8001b60:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b64:	4649      	mov	r1, r9
 8001b66:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b7e:	4692      	mov	sl, r2
 8001b80:	469b      	mov	fp, r3
 8001b82:	4623      	mov	r3, r4
 8001b84:	eb1a 0303 	adds.w	r3, sl, r3
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bb8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bbe:	f7fe fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bcc:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bee:	e0eb      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf0:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d06b      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c08:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	2200      	movs	r2, #0
 8001c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c24:	4622      	mov	r2, r4
 8001c26:	462b      	mov	r3, r5
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	0159      	lsls	r1, r3, #5
 8001c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c36:	0150      	lsls	r0, r2, #5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	1a51      	subs	r1, r2, r1
 8001c40:	61b9      	str	r1, [r7, #24]
 8001c42:	4629      	mov	r1, r5
 8001c44:	eb63 0301 	sbc.w	r3, r3, r1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c56:	4659      	mov	r1, fp
 8001c58:	018b      	lsls	r3, r1, #6
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c60:	4651      	mov	r1, sl
 8001c62:	018a      	lsls	r2, r1, #6
 8001c64:	4651      	mov	r1, sl
 8001c66:	ebb2 0801 	subs.w	r8, r2, r1
 8001c6a:	4659      	mov	r1, fp
 8001c6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4699      	mov	r9, r3
 8001c88:	4623      	mov	r3, r4
 8001c8a:	eb18 0303 	adds.w	r3, r8, r3
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	462b      	mov	r3, r5
 8001c92:	eb49 0303 	adc.w	r3, r9, r3
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	024b      	lsls	r3, r1, #9
 8001ca8:	4621      	mov	r1, r4
 8001caa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cae:	4621      	mov	r1, r4
 8001cb0:	024a      	lsls	r2, r1, #9
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cba:	2200      	movs	r2, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cc4:	f7fe fafc 	bl	80002c0 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cd2:	e065      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x420>
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4611      	mov	r1, r2
 8001cec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cf6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cfa:	4642      	mov	r2, r8
 8001cfc:	464b      	mov	r3, r9
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4641      	mov	r1, r8
 8001d14:	1a51      	subs	r1, r2, r1
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	4649      	mov	r1, r9
 8001d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	4651      	mov	r1, sl
 8001d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d36:	4651      	mov	r1, sl
 8001d38:	018a      	lsls	r2, r1, #6
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	1a54      	subs	r4, r2, r1
 8001d3e:	4659      	mov	r1, fp
 8001d40:	eb63 0501 	sbc.w	r5, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	00eb      	lsls	r3, r5, #3
 8001d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	18e3      	adds	r3, r4, r3
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	464b      	mov	r3, r9
 8001d60:	eb45 0303 	adc.w	r3, r5, r3
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d72:	4629      	mov	r1, r5
 8001d74:	028b      	lsls	r3, r1, #10
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	028a      	lsls	r2, r1, #10
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d88:	2200      	movs	r2, #0
 8001d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d92:	f7fe fa95 	bl	80002c0 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0f1b      	lsrs	r3, r3, #28
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dbe:	e003      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	37b8      	adds	r7, #184	@ 0xb8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400

08001de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e28d      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8083 	beq.w	8001f06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e00:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d019      	beq.n	8001e40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e0c:	4b91      	ldr	r3, [pc, #580]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e18:	4b8e      	ldr	r3, [pc, #568]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b8b      	ldr	r3, [pc, #556]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b84      	ldr	r3, [pc, #528]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x124>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d157      	bne.n	8001f04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e25a      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x90>
 8001e62:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7b      	ldr	r2, [pc, #492]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xcc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0xb4>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b73      	ldr	r3, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xcc>
 8001e94:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f936 	bl	8001124 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f932 	bl	8001124 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e21f      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xdc>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f922 	bl	8001124 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f91e 	bl	8001124 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e20b      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b57      	ldr	r3, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x104>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d06f      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f12:	4b50      	ldr	r3, [pc, #320]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d017      	beq.n	8001f4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f36:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b44      	ldr	r3, [pc, #272]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x186>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1d3      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4937      	ldr	r1, [pc, #220]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f8cb 	bl	8001124 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff f8c7 	bl	8001124 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1b4      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4925      	ldr	r1, [pc, #148]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <HAL_RCC_OscConfig+0x278>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f8aa 	bl	8001124 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff f8a6 	bl	8001124 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e193      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d036      	beq.n	800206c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_RCC_OscConfig+0x27c>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff f88a 	bl	8001124 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff f886 	bl	8001124 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e173      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_RCC_OscConfig+0x274>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x234>
 8002032:	e01b      	b.n	800206c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_RCC_OscConfig+0x27c>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff f873 	bl	8001124 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e00e      	b.n	8002060 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff f86f 	bl	8001124 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d907      	bls.n	8002060 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e15c      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
 8002054:	40023800 	.word	0x40023800
 8002058:	42470000 	.word	0x42470000
 800205c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	4b8a      	ldr	r3, [pc, #552]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ea      	bne.n	8002042 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8097 	beq.w	80021a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b83      	ldr	r3, [pc, #524]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b7f      	ldr	r3, [pc, #508]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a7e      	ldr	r2, [pc, #504]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b79      	ldr	r3, [pc, #484]	@ (8002290 <HAL_RCC_OscConfig+0x4b0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b76      	ldr	r3, [pc, #472]	@ (8002290 <HAL_RCC_OscConfig+0x4b0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	@ (8002290 <HAL_RCC_OscConfig+0x4b0>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f82f 	bl	8001124 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7ff f82b 	bl	8001124 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e118      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002290 <HAL_RCC_OscConfig+0x4b0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x31e>
 80020f0:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f4:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fc:	e01c      	b.n	8002138 <HAL_RCC_OscConfig+0x358>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x340>
 8002106:	4b61      	ldr	r3, [pc, #388]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	4a60      	ldr	r2, [pc, #384]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	@ 0x70
 8002112:	4b5e      	ldr	r3, [pc, #376]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	4a5d      	ldr	r2, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6713      	str	r3, [r2, #112]	@ 0x70
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0x358>
 8002120:	4b5a      	ldr	r3, [pc, #360]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	4a59      	ldr	r2, [pc, #356]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	@ 0x70
 800212c:	4b57      	ldr	r3, [pc, #348]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002130:	4a56      	ldr	r2, [pc, #344]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002132:	f023 0304 	bic.w	r3, r3, #4
 8002136:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe fff0 	bl	8001124 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe ffec 	bl	8001124 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0d7      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0ee      	beq.n	8002148 <HAL_RCC_OscConfig+0x368>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe ffda 	bl	8001124 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe ffd6 	bl	8001124 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0c1      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218a:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ee      	bne.n	8002174 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	4a3a      	ldr	r2, [pc, #232]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 80021a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ad 	beq.w	800230c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d060      	beq.n	8002280 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d145      	bne.n	8002252 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_RCC_OscConfig+0x4b4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe ffaa 	bl	8001124 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe ffa6 	bl	8001124 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e093      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	071b      	lsls	r3, r3, #28
 800221e:	491b      	ldr	r1, [pc, #108]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4b4>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe ff7b 	bl	8001124 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe ff77 	bl	8001124 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e064      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x452>
 8002250:	e05c      	b.n	800230c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_OscConfig+0x4b4>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe ff64 	bl	8001124 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff60 	bl	8001124 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e04d      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_RCC_OscConfig+0x4ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x480>
 800227e:	e045      	b.n	800230c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e040      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002298:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <HAL_RCC_OscConfig+0x538>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d030      	beq.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d129      	bne.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d122      	bne.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d119      	bne.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10f      	bne.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07b      	b.n	8002426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800233e:	d009      	beq.n	8002354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
 8002346:	e005      	b.n	8002354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fd0a 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800238a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d8:	ea42 0103 	orr.w	r1, r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	f003 0104 	and.w	r1, r3, #4
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	f003 0210 	and.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b088      	sub	sp, #32
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243e:	f7fe fe71 	bl	8001124 <HAL_GetTick>
 8002442:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d001      	beq.n	8002458 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e12a      	b.n	80026ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_Transmit+0x36>
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e122      	b.n	80026ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_SPI_Transmit+0x48>
 8002472:	2302      	movs	r3, #2
 8002474:	e11b      	b.n	80026ae <HAL_SPI_Transmit+0x280>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024c4:	d10f      	bne.n	80024e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800250c:	d152      	bne.n	80025b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_SPI_Transmit+0xee>
 8002516:	8b7b      	ldrh	r3, [r7, #26]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d145      	bne.n	80025a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002540:	e032      	b.n	80025a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d112      	bne.n	8002576 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	1c9a      	adds	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002574:	e018      	b.n	80025a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002576:	f7fe fdd5 	bl	8001124 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d803      	bhi.n	800258e <HAL_SPI_Transmit+0x160>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Transmit+0x166>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e082      	b.n	80026ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1c7      	bne.n	8002542 <HAL_SPI_Transmit+0x114>
 80025b2:	e053      	b.n	800265c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x194>
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d147      	bne.n	8002652 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025e8:	e033      	b.n	8002652 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d113      	bne.n	8002620 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800261e:	e018      	b.n	8002652 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002620:	f7fe fd80 	bl	8001124 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d803      	bhi.n	8002638 <HAL_SPI_Transmit+0x20a>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002636:	d102      	bne.n	800263e <HAL_SPI_Transmit+0x210>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e02d      	b.n	80026ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1c6      	bne.n	80025ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fbd9 	bl	8002e18 <SPI_EndRxTxTransaction>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	e104      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_SPI_Receive+0x2c>
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0fc      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ee:	d112      	bne.n	8002716 <HAL_SPI_Receive+0x60>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10e      	bne.n	8002716 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f8eb 	bl	80028e8 <HAL_SPI_TransmitReceive>
 8002712:	4603      	mov	r3, r0
 8002714:	e0e4      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002716:	f7fe fd05 	bl	8001124 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_SPI_Receive+0x74>
 8002726:	2302      	movs	r3, #2
 8002728:	e0da      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2204      	movs	r2, #4
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002778:	d10f      	bne.n	800279a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d007      	beq.n	80027b8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d170      	bne.n	80028a2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027c0:	e035      	b.n	800282e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d115      	bne.n	80027fc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f103 020c 	add.w	r2, r3, #12
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027fa:	e018      	b.n	800282e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027fc:	f7fe fc92 	bl	8001124 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d803      	bhi.n	8002814 <HAL_SPI_Receive+0x15e>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d102      	bne.n	800281a <HAL_SPI_Receive+0x164>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e058      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1c4      	bne.n	80027c2 <HAL_SPI_Receive+0x10c>
 8002838:	e038      	b.n	80028ac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d113      	bne.n	8002870 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	b292      	uxth	r2, r2
 8002854:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800286e:	e018      	b.n	80028a2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002870:	f7fe fc58 	bl	8001124 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d803      	bhi.n	8002888 <HAL_SPI_Receive+0x1d2>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d102      	bne.n	800288e <HAL_SPI_Receive+0x1d8>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e01e      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1c6      	bne.n	800283a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa4b 	bl	8002d4c <SPI_EndRxTransaction>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80028de:	2300      	movs	r3, #0
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028f6:	2301      	movs	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fa:	f7fe fc13 	bl	8001124 <HAL_GetTick>
 80028fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002906:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d00c      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x4a>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800291e:	d106      	bne.n	800292e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_SPI_TransmitReceive+0x46>
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d001      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	e17f      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x5c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x5c>
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e174      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x6e>
 8002952:	2302      	movs	r3, #2
 8002954:	e16d      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b04      	cmp	r3, #4
 8002968:	d003      	beq.n	8002972 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2205      	movs	r2, #5
 800296e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	887a      	ldrh	r2, [r7, #2]
 8002982:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b2:	2b40      	cmp	r3, #64	@ 0x40
 80029b4:	d007      	beq.n	80029c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ce:	d17e      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_TransmitReceive+0xf6>
 80029d8:	8afb      	ldrh	r3, [r7, #22]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d16c      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a02:	e059      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d11b      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x162>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_SPI_TransmitReceive+0x162>
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d113      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x1a4>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a8c:	f7fe fb4a 	bl	8001124 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d80d      	bhi.n	8002ab8 <HAL_SPI_TransmitReceive+0x1d0>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d009      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0bc      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1a0      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x11c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d19b      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x11c>
 8002acc:	e082      	b.n	8002bd4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x1f4>
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d171      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b02:	e05d      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d11c      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x264>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_SPI_TransmitReceive+0x264>
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d114      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d119      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x2a6>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d014      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b8e:	f7fe fac9 	bl	8001124 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d803      	bhi.n	8002ba6 <HAL_SPI_TransmitReceive+0x2be>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d102      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x2c4>
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e038      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d19c      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x21c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d197      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f91d 	bl	8002e18 <SPI_EndRxTxTransaction>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01d      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3728      	adds	r7, #40	@ 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c4c:	f7fe fa6a 	bl	8001124 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c5c:	f7fe fa62 	bl	8001124 <HAL_GetTick>
 8002c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c62:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	015b      	lsls	r3, r3, #5
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c72:	e055      	b.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d051      	beq.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c7c:	f7fe fa52 	bl	8001124 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d902      	bls.n	8002c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d13d      	bne.n	8002d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002caa:	d111      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb4:	d004      	beq.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cbe:	d107      	bne.n	8002cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd8:	d10f      	bne.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e018      	b.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	e002      	b.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d19a      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000018 	.word	0x20000018

08002d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d60:	d111      	bne.n	8002d86 <SPI_EndRxTransaction+0x3a>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d6a:	d004      	beq.n	8002d76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d74:	d107      	bne.n	8002d86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8e:	d12a      	bne.n	8002de6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d98:	d012      	beq.n	8002dc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff ff49 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02d      	beq.n	8002e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e026      	b.n	8002e0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2101      	movs	r1, #1
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff ff36 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e013      	b.n	8002e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2101      	movs	r1, #1
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff23 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff04 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e032      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <SPI_EndRxTxTransaction+0xa0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <SPI_EndRxTxTransaction+0xa4>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e68:	d112      	bne.n	8002e90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fee1 	bl	8002c3c <SPI_WaitFlagStateUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d016      	beq.n	8002eae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00f      	b.n	8002eb0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea6:	2b80      	cmp	r3, #128	@ 0x80
 8002ea8:	d0f2      	beq.n	8002e90 <SPI_EndRxTxTransaction+0x78>
 8002eaa:	e000      	b.n	8002eae <SPI_EndRxTxTransaction+0x96>
        break;
 8002eac:	bf00      	nop
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000018 	.word	0x20000018
 8002ebc:	165e9f81 	.word	0x165e9f81

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e042      	b.n	8002f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd ffcc 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f973 	bl	80031f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d175      	bne.n	800306c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Transmit+0x2c>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e06e      	b.n	800306e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2221      	movs	r2, #33	@ 0x21
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9e:	f7fe f8c1 	bl	8001124 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d108      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e003      	b.n	8002fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd4:	e02e      	b.n	8003034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f848 	bl	8003076 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03a      	b.n	800306e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	3302      	adds	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e007      	b.n	8003026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3301      	adds	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1cb      	bne.n	8002fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2140      	movs	r1, #64	@ 0x40
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f814 	bl	8003076 <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e006      	b.n	800306e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003086:	e03b      	b.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d037      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7fe f848 	bl	8001124 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e03a      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d023      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b80      	cmp	r3, #128	@ 0x80
 80030bc:	d020      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	d01d      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d116      	bne.n	8003100 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f81d 	bl	8003128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2208      	movs	r2, #8
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e00f      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d0b4      	beq.n	8003088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003128:	b480      	push	{r7}
 800312a:	b095      	sub	sp, #84	@ 0x54
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003150:	643a      	str	r2, [r7, #64]	@ 0x40
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e5      	bne.n	8003130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	61fb      	str	r3, [r7, #28]
   return(result);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3314      	adds	r3, #20
 8003182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800318a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	2b01      	cmp	r3, #1
 800319e:	d119      	bne.n	80031d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f023 0310 	bic.w	r3, r3, #16
 80031b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031c0:	61ba      	str	r2, [r7, #24]
 80031c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6979      	ldr	r1, [r7, #20]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	613b      	str	r3, [r7, #16]
   return(result);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031e2:	bf00      	nop
 80031e4:	3754      	adds	r7, #84	@ 0x54
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b0c0      	sub	sp, #256	@ 0x100
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	ea40 0301 	orr.w	r3, r0, r1
 8003218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	431a      	orrs	r2, r3
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003248:	f021 010c 	bic.w	r1, r1, #12
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003256:	430b      	orrs	r3, r1
 8003258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	6999      	ldr	r1, [r3, #24]
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	ea40 0301 	orr.w	r3, r0, r1
 8003276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b8f      	ldr	r3, [pc, #572]	@ (80034bc <UART_SetConfig+0x2cc>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <UART_SetConfig+0xa0>
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b8d      	ldr	r3, [pc, #564]	@ (80034c0 <UART_SetConfig+0x2d0>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d104      	bne.n	800329a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7fe fb62 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8003294:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003298:	e003      	b.n	80032a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800329a:	f7fe fb49 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 800329e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ac:	f040 810c 	bne.w	80034c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	1891      	adds	r1, r2, r2
 80032c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032ca:	415b      	adcs	r3, r3
 80032cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032d2:	4621      	mov	r1, r4
 80032d4:	eb12 0801 	adds.w	r8, r2, r1
 80032d8:	4629      	mov	r1, r5
 80032da:	eb43 0901 	adc.w	r9, r3, r1
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f2:	4690      	mov	r8, r2
 80032f4:	4699      	mov	r9, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	eb18 0303 	adds.w	r3, r8, r3
 80032fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003300:	462b      	mov	r3, r5
 8003302:	eb49 0303 	adc.w	r3, r9, r3
 8003306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003316:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800331a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800331e:	460b      	mov	r3, r1
 8003320:	18db      	adds	r3, r3, r3
 8003322:	653b      	str	r3, [r7, #80]	@ 0x50
 8003324:	4613      	mov	r3, r2
 8003326:	eb42 0303 	adc.w	r3, r2, r3
 800332a:	657b      	str	r3, [r7, #84]	@ 0x54
 800332c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003334:	f7fc ffc4 	bl	80002c0 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b61      	ldr	r3, [pc, #388]	@ (80034c4 <UART_SetConfig+0x2d4>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	011c      	lsls	r4, r3, #4
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003350:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003360:	415b      	adcs	r3, r3
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003368:	4641      	mov	r1, r8
 800336a:	eb12 0a01 	adds.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb43 0b01 	adc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003388:	4692      	mov	sl, r2
 800338a:	469b      	mov	fp, r3
 800338c:	4643      	mov	r3, r8
 800338e:	eb1a 0303 	adds.w	r3, sl, r3
 8003392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003396:	464b      	mov	r3, r9
 8003398:	eb4b 0303 	adc.w	r3, fp, r3
 800339c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033ca:	f7fc ff79 	bl	80002c0 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	4b3b      	ldr	r3, [pc, #236]	@ (80034c4 <UART_SetConfig+0x2d4>)
 80033d6:	fba3 2301 	umull	r2, r3, r3, r1
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2264      	movs	r2, #100	@ 0x64
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	1acb      	subs	r3, r1, r3
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033ea:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <UART_SetConfig+0x2d4>)
 80033ec:	fba3 2302 	umull	r2, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033f8:	441c      	add	r4, r3
 80033fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003404:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	1891      	adds	r1, r2, r2
 8003412:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003414:	415b      	adcs	r3, r3
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800341c:	4641      	mov	r1, r8
 800341e:	1851      	adds	r1, r2, r1
 8003420:	6339      	str	r1, [r7, #48]	@ 0x30
 8003422:	4649      	mov	r1, r9
 8003424:	414b      	adcs	r3, r1
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003434:	4659      	mov	r1, fp
 8003436:	00cb      	lsls	r3, r1, #3
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343e:	4651      	mov	r1, sl
 8003440:	00ca      	lsls	r2, r1, #3
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	4603      	mov	r3, r0
 8003448:	4642      	mov	r2, r8
 800344a:	189b      	adds	r3, r3, r2
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003450:	464b      	mov	r3, r9
 8003452:	460a      	mov	r2, r1
 8003454:	eb42 0303 	adc.w	r3, r2, r3
 8003458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003468:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800346c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003470:	460b      	mov	r3, r1
 8003472:	18db      	adds	r3, r3, r3
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003476:	4613      	mov	r3, r2
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003486:	f7fc ff1b 	bl	80002c0 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <UART_SetConfig+0x2d4>)
 8003490:	fba3 1302 	umull	r1, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2164      	movs	r1, #100	@ 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3332      	adds	r3, #50	@ 0x32
 80034a2:	4a08      	ldr	r2, [pc, #32]	@ (80034c4 <UART_SetConfig+0x2d4>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	f003 0207 	and.w	r2, r3, #7
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4422      	add	r2, r4
 80034b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b8:	e106      	b.n	80036c8 <UART_SetConfig+0x4d8>
 80034ba:	bf00      	nop
 80034bc:	40011000 	.word	0x40011000
 80034c0:	40011400 	.word	0x40011400
 80034c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034da:	4642      	mov	r2, r8
 80034dc:	464b      	mov	r3, r9
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	6239      	str	r1, [r7, #32]
 80034e2:	415b      	adcs	r3, r3
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ea:	4641      	mov	r1, r8
 80034ec:	1854      	adds	r4, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0501 	adc.w	r5, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	00eb      	lsls	r3, r5, #3
 80034fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003502:	00e2      	lsls	r2, r4, #3
 8003504:	4614      	mov	r4, r2
 8003506:	461d      	mov	r5, r3
 8003508:	4643      	mov	r3, r8
 800350a:	18e3      	adds	r3, r4, r3
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003510:	464b      	mov	r3, r9
 8003512:	eb45 0303 	adc.w	r3, r5, r3
 8003516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003536:	4629      	mov	r1, r5
 8003538:	008b      	lsls	r3, r1, #2
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003540:	4621      	mov	r1, r4
 8003542:	008a      	lsls	r2, r1, #2
 8003544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003548:	f7fc feba 	bl	80002c0 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b60      	ldr	r3, [pc, #384]	@ (80036d4 <UART_SetConfig+0x4e4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011c      	lsls	r4, r3, #4
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003564:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	61b9      	str	r1, [r7, #24]
 8003574:	415b      	adcs	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	4641      	mov	r1, r8
 800357e:	1851      	adds	r1, r2, r1
 8003580:	6139      	str	r1, [r7, #16]
 8003582:	4649      	mov	r1, r9
 8003584:	414b      	adcs	r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	00cb      	lsls	r3, r1, #3
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359e:	4651      	mov	r1, sl
 80035a0:	00ca      	lsls	r2, r1, #3
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	4642      	mov	r2, r8
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035b0:	464b      	mov	r3, r9
 80035b2:	460a      	mov	r2, r1
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035d4:	4649      	mov	r1, r9
 80035d6:	008b      	lsls	r3, r1, #2
 80035d8:	4641      	mov	r1, r8
 80035da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035de:	4641      	mov	r1, r8
 80035e0:	008a      	lsls	r2, r1, #2
 80035e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035e6:	f7fc fe6b 	bl	80002c0 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	4b38      	ldr	r3, [pc, #224]	@ (80036d4 <UART_SetConfig+0x4e4>)
 80035f2:	fba3 2301 	umull	r2, r3, r3, r1
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2264      	movs	r2, #100	@ 0x64
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	@ 0x32
 8003604:	4a33      	ldr	r2, [pc, #204]	@ (80036d4 <UART_SetConfig+0x4e4>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	673b      	str	r3, [r7, #112]	@ 0x70
 800361a:	677a      	str	r2, [r7, #116]	@ 0x74
 800361c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	415b      	adcs	r3, r3
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003662:	464b      	mov	r3, r9
 8003664:	460a      	mov	r2, r1
 8003666:	eb42 0303 	adc.w	r3, r2, r3
 800366a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	663b      	str	r3, [r7, #96]	@ 0x60
 8003676:	667a      	str	r2, [r7, #100]	@ 0x64
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003684:	4649      	mov	r1, r9
 8003686:	008b      	lsls	r3, r1, #2
 8003688:	4641      	mov	r1, r8
 800368a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368e:	4641      	mov	r1, r8
 8003690:	008a      	lsls	r2, r1, #2
 8003692:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003696:	f7fc fe13 	bl	80002c0 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <UART_SetConfig+0x4e4>)
 80036a0:	fba3 1302 	umull	r1, r3, r3, r2
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	2164      	movs	r1, #100	@ 0x64
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	3332      	adds	r3, #50	@ 0x32
 80036b2:	4a08      	ldr	r2, [pc, #32]	@ (80036d4 <UART_SetConfig+0x4e4>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4422      	add	r2, r4
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d4:	51eb851f 	.word	0x51eb851f

080036d8 <siprintf>:
 80036d8:	b40e      	push	{r1, r2, r3}
 80036da:	b510      	push	{r4, lr}
 80036dc:	b09d      	sub	sp, #116	@ 0x74
 80036de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80036e0:	9002      	str	r0, [sp, #8]
 80036e2:	9006      	str	r0, [sp, #24]
 80036e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80036e8:	480a      	ldr	r0, [pc, #40]	@ (8003714 <siprintf+0x3c>)
 80036ea:	9107      	str	r1, [sp, #28]
 80036ec:	9104      	str	r1, [sp, #16]
 80036ee:	490a      	ldr	r1, [pc, #40]	@ (8003718 <siprintf+0x40>)
 80036f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80036f4:	9105      	str	r1, [sp, #20]
 80036f6:	2400      	movs	r4, #0
 80036f8:	a902      	add	r1, sp, #8
 80036fa:	6800      	ldr	r0, [r0, #0]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003700:	f000 f994 	bl	8003a2c <_svfiprintf_r>
 8003704:	9b02      	ldr	r3, [sp, #8]
 8003706:	701c      	strb	r4, [r3, #0]
 8003708:	b01d      	add	sp, #116	@ 0x74
 800370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370e:	b003      	add	sp, #12
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000024 	.word	0x20000024
 8003718:	ffff0208 	.word	0xffff0208

0800371c <memset>:
 800371c:	4402      	add	r2, r0
 800371e:	4603      	mov	r3, r0
 8003720:	4293      	cmp	r3, r2
 8003722:	d100      	bne.n	8003726 <memset+0xa>
 8003724:	4770      	bx	lr
 8003726:	f803 1b01 	strb.w	r1, [r3], #1
 800372a:	e7f9      	b.n	8003720 <memset+0x4>

0800372c <__errno>:
 800372c:	4b01      	ldr	r3, [pc, #4]	@ (8003734 <__errno+0x8>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000024 	.word	0x20000024

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4d0d      	ldr	r5, [pc, #52]	@ (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	@ (8003774 <__libc_init_array+0x3c>)
 800373e:	1b64      	subs	r4, r4, r5
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2600      	movs	r6, #0
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4d0b      	ldr	r5, [pc, #44]	@ (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <__libc_init_array+0x44>)
 800374c:	f000 fc64 	bl	8004018 <_init>
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2600      	movs	r6, #0
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	08004144 	.word	0x08004144
 8003774:	08004144 	.word	0x08004144
 8003778:	08004144 	.word	0x08004144
 800377c:	08004148 	.word	0x08004148

08003780 <__retarget_lock_acquire_recursive>:
 8003780:	4770      	bx	lr

08003782 <__retarget_lock_release_recursive>:
 8003782:	4770      	bx	lr

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d041      	beq.n	8003810 <_free_r+0x8c>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f8e0 	bl	800395c <__malloc_lock>
 800379c:	4a1d      	ldr	r2, [pc, #116]	@ (8003814 <_free_r+0x90>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	b933      	cbnz	r3, 80037b0 <_free_r+0x2c>
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	6014      	str	r4, [r2, #0]
 80037a6:	4628      	mov	r0, r5
 80037a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ac:	f000 b8dc 	b.w	8003968 <__malloc_unlock>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d908      	bls.n	80037c6 <_free_r+0x42>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf01      	itttt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	e7ed      	b.n	80037a2 <_free_r+0x1e>
 80037c6:	461a      	mov	r2, r3
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b10b      	cbz	r3, 80037d0 <_free_r+0x4c>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d9fa      	bls.n	80037c6 <_free_r+0x42>
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	1850      	adds	r0, r2, r1
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d10b      	bne.n	80037f0 <_free_r+0x6c>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	1850      	adds	r0, r2, r1
 80037de:	4283      	cmp	r3, r0
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	d1e0      	bne.n	80037a6 <_free_r+0x22>
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	6053      	str	r3, [r2, #4]
 80037ea:	4408      	add	r0, r1
 80037ec:	6010      	str	r0, [r2, #0]
 80037ee:	e7da      	b.n	80037a6 <_free_r+0x22>
 80037f0:	d902      	bls.n	80037f8 <_free_r+0x74>
 80037f2:	230c      	movs	r3, #12
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	e7d6      	b.n	80037a6 <_free_r+0x22>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf04      	itt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	6063      	str	r3, [r4, #4]
 8003806:	bf04      	itt	eq
 8003808:	1809      	addeq	r1, r1, r0
 800380a:	6021      	streq	r1, [r4, #0]
 800380c:	6054      	str	r4, [r2, #4]
 800380e:	e7ca      	b.n	80037a6 <_free_r+0x22>
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	200002d4 	.word	0x200002d4

08003818 <sbrk_aligned>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4e0f      	ldr	r6, [pc, #60]	@ (8003858 <sbrk_aligned+0x40>)
 800381c:	460c      	mov	r4, r1
 800381e:	6831      	ldr	r1, [r6, #0]
 8003820:	4605      	mov	r5, r0
 8003822:	b911      	cbnz	r1, 800382a <sbrk_aligned+0x12>
 8003824:	f000 fba4 	bl	8003f70 <_sbrk_r>
 8003828:	6030      	str	r0, [r6, #0]
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 fb9f 	bl	8003f70 <_sbrk_r>
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d103      	bne.n	800383e <sbrk_aligned+0x26>
 8003836:	f04f 34ff 	mov.w	r4, #4294967295
 800383a:	4620      	mov	r0, r4
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d0f8      	beq.n	800383a <sbrk_aligned+0x22>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4628      	mov	r0, r5
 800384c:	f000 fb90 	bl	8003f70 <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d1f2      	bne.n	800383a <sbrk_aligned+0x22>
 8003854:	e7ef      	b.n	8003836 <sbrk_aligned+0x1e>
 8003856:	bf00      	nop
 8003858:	200002d0 	.word	0x200002d0

0800385c <_malloc_r>:
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	1ccd      	adds	r5, r1, #3
 8003862:	f025 0503 	bic.w	r5, r5, #3
 8003866:	3508      	adds	r5, #8
 8003868:	2d0c      	cmp	r5, #12
 800386a:	bf38      	it	cc
 800386c:	250c      	movcc	r5, #12
 800386e:	2d00      	cmp	r5, #0
 8003870:	4606      	mov	r6, r0
 8003872:	db01      	blt.n	8003878 <_malloc_r+0x1c>
 8003874:	42a9      	cmp	r1, r5
 8003876:	d904      	bls.n	8003882 <_malloc_r+0x26>
 8003878:	230c      	movs	r3, #12
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	2000      	movs	r0, #0
 800387e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003958 <_malloc_r+0xfc>
 8003886:	f000 f869 	bl	800395c <__malloc_lock>
 800388a:	f8d8 3000 	ldr.w	r3, [r8]
 800388e:	461c      	mov	r4, r3
 8003890:	bb44      	cbnz	r4, 80038e4 <_malloc_r+0x88>
 8003892:	4629      	mov	r1, r5
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff ffbf 	bl	8003818 <sbrk_aligned>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	4604      	mov	r4, r0
 800389e:	d158      	bne.n	8003952 <_malloc_r+0xf6>
 80038a0:	f8d8 4000 	ldr.w	r4, [r8]
 80038a4:	4627      	mov	r7, r4
 80038a6:	2f00      	cmp	r7, #0
 80038a8:	d143      	bne.n	8003932 <_malloc_r+0xd6>
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	d04b      	beq.n	8003946 <_malloc_r+0xea>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	4639      	mov	r1, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	eb04 0903 	add.w	r9, r4, r3
 80038b8:	f000 fb5a 	bl	8003f70 <_sbrk_r>
 80038bc:	4581      	cmp	r9, r0
 80038be:	d142      	bne.n	8003946 <_malloc_r+0xea>
 80038c0:	6821      	ldr	r1, [r4, #0]
 80038c2:	1a6d      	subs	r5, r5, r1
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffa6 	bl	8003818 <sbrk_aligned>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d03a      	beq.n	8003946 <_malloc_r+0xea>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	442b      	add	r3, r5
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f8d8 3000 	ldr.w	r3, [r8]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	bb62      	cbnz	r2, 8003938 <_malloc_r+0xdc>
 80038de:	f8c8 7000 	str.w	r7, [r8]
 80038e2:	e00f      	b.n	8003904 <_malloc_r+0xa8>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	1b52      	subs	r2, r2, r5
 80038e8:	d420      	bmi.n	800392c <_malloc_r+0xd0>
 80038ea:	2a0b      	cmp	r2, #11
 80038ec:	d917      	bls.n	800391e <_malloc_r+0xc2>
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	bf18      	it	ne
 80038f6:	6059      	strne	r1, [r3, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	bf08      	it	eq
 80038fc:	f8c8 1000 	streq.w	r1, [r8]
 8003900:	5162      	str	r2, [r4, r5]
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	4630      	mov	r0, r6
 8003906:	f000 f82f 	bl	8003968 <__malloc_unlock>
 800390a:	f104 000b 	add.w	r0, r4, #11
 800390e:	1d23      	adds	r3, r4, #4
 8003910:	f020 0007 	bic.w	r0, r0, #7
 8003914:	1ac2      	subs	r2, r0, r3
 8003916:	bf1c      	itt	ne
 8003918:	1a1b      	subne	r3, r3, r0
 800391a:	50a3      	strne	r3, [r4, r2]
 800391c:	e7af      	b.n	800387e <_malloc_r+0x22>
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	42a3      	cmp	r3, r4
 8003922:	bf0c      	ite	eq
 8003924:	f8c8 2000 	streq.w	r2, [r8]
 8003928:	605a      	strne	r2, [r3, #4]
 800392a:	e7eb      	b.n	8003904 <_malloc_r+0xa8>
 800392c:	4623      	mov	r3, r4
 800392e:	6864      	ldr	r4, [r4, #4]
 8003930:	e7ae      	b.n	8003890 <_malloc_r+0x34>
 8003932:	463c      	mov	r4, r7
 8003934:	687f      	ldr	r7, [r7, #4]
 8003936:	e7b6      	b.n	80038a6 <_malloc_r+0x4a>
 8003938:	461a      	mov	r2, r3
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	d1fb      	bne.n	8003938 <_malloc_r+0xdc>
 8003940:	2300      	movs	r3, #0
 8003942:	6053      	str	r3, [r2, #4]
 8003944:	e7de      	b.n	8003904 <_malloc_r+0xa8>
 8003946:	230c      	movs	r3, #12
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	4630      	mov	r0, r6
 800394c:	f000 f80c 	bl	8003968 <__malloc_unlock>
 8003950:	e794      	b.n	800387c <_malloc_r+0x20>
 8003952:	6005      	str	r5, [r0, #0]
 8003954:	e7d6      	b.n	8003904 <_malloc_r+0xa8>
 8003956:	bf00      	nop
 8003958:	200002d4 	.word	0x200002d4

0800395c <__malloc_lock>:
 800395c:	4801      	ldr	r0, [pc, #4]	@ (8003964 <__malloc_lock+0x8>)
 800395e:	f7ff bf0f 	b.w	8003780 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	200002cc 	.word	0x200002cc

08003968 <__malloc_unlock>:
 8003968:	4801      	ldr	r0, [pc, #4]	@ (8003970 <__malloc_unlock+0x8>)
 800396a:	f7ff bf0a 	b.w	8003782 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	200002cc 	.word	0x200002cc

08003974 <__ssputs_r>:
 8003974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	688e      	ldr	r6, [r1, #8]
 800397a:	461f      	mov	r7, r3
 800397c:	42be      	cmp	r6, r7
 800397e:	680b      	ldr	r3, [r1, #0]
 8003980:	4682      	mov	sl, r0
 8003982:	460c      	mov	r4, r1
 8003984:	4690      	mov	r8, r2
 8003986:	d82d      	bhi.n	80039e4 <__ssputs_r+0x70>
 8003988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800398c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003990:	d026      	beq.n	80039e0 <__ssputs_r+0x6c>
 8003992:	6965      	ldr	r5, [r4, #20]
 8003994:	6909      	ldr	r1, [r1, #16]
 8003996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800399a:	eba3 0901 	sub.w	r9, r3, r1
 800399e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039a2:	1c7b      	adds	r3, r7, #1
 80039a4:	444b      	add	r3, r9
 80039a6:	106d      	asrs	r5, r5, #1
 80039a8:	429d      	cmp	r5, r3
 80039aa:	bf38      	it	cc
 80039ac:	461d      	movcc	r5, r3
 80039ae:	0553      	lsls	r3, r2, #21
 80039b0:	d527      	bpl.n	8003a02 <__ssputs_r+0x8e>
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7ff ff52 	bl	800385c <_malloc_r>
 80039b8:	4606      	mov	r6, r0
 80039ba:	b360      	cbz	r0, 8003a16 <__ssputs_r+0xa2>
 80039bc:	6921      	ldr	r1, [r4, #16]
 80039be:	464a      	mov	r2, r9
 80039c0:	f000 fae6 	bl	8003f90 <memcpy>
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	6126      	str	r6, [r4, #16]
 80039d2:	6165      	str	r5, [r4, #20]
 80039d4:	444e      	add	r6, r9
 80039d6:	eba5 0509 	sub.w	r5, r5, r9
 80039da:	6026      	str	r6, [r4, #0]
 80039dc:	60a5      	str	r5, [r4, #8]
 80039de:	463e      	mov	r6, r7
 80039e0:	42be      	cmp	r6, r7
 80039e2:	d900      	bls.n	80039e6 <__ssputs_r+0x72>
 80039e4:	463e      	mov	r6, r7
 80039e6:	6820      	ldr	r0, [r4, #0]
 80039e8:	4632      	mov	r2, r6
 80039ea:	4641      	mov	r1, r8
 80039ec:	f000 faa6 	bl	8003f3c <memmove>
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	1b9b      	subs	r3, r3, r6
 80039f4:	60a3      	str	r3, [r4, #8]
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	4433      	add	r3, r6
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	2000      	movs	r0, #0
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	462a      	mov	r2, r5
 8003a04:	f000 fad2 	bl	8003fac <_realloc_r>
 8003a08:	4606      	mov	r6, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d1e0      	bne.n	80039d0 <__ssputs_r+0x5c>
 8003a0e:	6921      	ldr	r1, [r4, #16]
 8003a10:	4650      	mov	r0, sl
 8003a12:	f7ff feb7 	bl	8003784 <_free_r>
 8003a16:	230c      	movs	r3, #12
 8003a18:	f8ca 3000 	str.w	r3, [sl]
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a22:	81a3      	strh	r3, [r4, #12]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	e7e9      	b.n	80039fe <__ssputs_r+0x8a>
	...

08003a2c <_svfiprintf_r>:
 8003a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	4698      	mov	r8, r3
 8003a32:	898b      	ldrh	r3, [r1, #12]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	b09d      	sub	sp, #116	@ 0x74
 8003a38:	4607      	mov	r7, r0
 8003a3a:	460d      	mov	r5, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	d510      	bpl.n	8003a62 <_svfiprintf_r+0x36>
 8003a40:	690b      	ldr	r3, [r1, #16]
 8003a42:	b973      	cbnz	r3, 8003a62 <_svfiprintf_r+0x36>
 8003a44:	2140      	movs	r1, #64	@ 0x40
 8003a46:	f7ff ff09 	bl	800385c <_malloc_r>
 8003a4a:	6028      	str	r0, [r5, #0]
 8003a4c:	6128      	str	r0, [r5, #16]
 8003a4e:	b930      	cbnz	r0, 8003a5e <_svfiprintf_r+0x32>
 8003a50:	230c      	movs	r3, #12
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	b01d      	add	sp, #116	@ 0x74
 8003a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5e:	2340      	movs	r3, #64	@ 0x40
 8003a60:	616b      	str	r3, [r5, #20]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a66:	2320      	movs	r3, #32
 8003a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a70:	2330      	movs	r3, #48	@ 0x30
 8003a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c10 <_svfiprintf_r+0x1e4>
 8003a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a7a:	f04f 0901 	mov.w	r9, #1
 8003a7e:	4623      	mov	r3, r4
 8003a80:	469a      	mov	sl, r3
 8003a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a86:	b10a      	cbz	r2, 8003a8c <_svfiprintf_r+0x60>
 8003a88:	2a25      	cmp	r2, #37	@ 0x25
 8003a8a:	d1f9      	bne.n	8003a80 <_svfiprintf_r+0x54>
 8003a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a90:	d00b      	beq.n	8003aaa <_svfiprintf_r+0x7e>
 8003a92:	465b      	mov	r3, fp
 8003a94:	4622      	mov	r2, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f7ff ff6b 	bl	8003974 <__ssputs_r>
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f000 80a7 	beq.w	8003bf2 <_svfiprintf_r+0x1c6>
 8003aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aa6:	445a      	add	r2, fp
 8003aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 809f 	beq.w	8003bf2 <_svfiprintf_r+0x1c6>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003abe:	f10a 0a01 	add.w	sl, sl, #1
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	9307      	str	r3, [sp, #28]
 8003ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8003acc:	4654      	mov	r4, sl
 8003ace:	2205      	movs	r2, #5
 8003ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad4:	484e      	ldr	r0, [pc, #312]	@ (8003c10 <_svfiprintf_r+0x1e4>)
 8003ad6:	f7fc fba3 	bl	8000220 <memchr>
 8003ada:	9a04      	ldr	r2, [sp, #16]
 8003adc:	b9d8      	cbnz	r0, 8003b16 <_svfiprintf_r+0xea>
 8003ade:	06d0      	lsls	r0, r2, #27
 8003ae0:	bf44      	itt	mi
 8003ae2:	2320      	movmi	r3, #32
 8003ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ae8:	0711      	lsls	r1, r2, #28
 8003aea:	bf44      	itt	mi
 8003aec:	232b      	movmi	r3, #43	@ 0x2b
 8003aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af2:	f89a 3000 	ldrb.w	r3, [sl]
 8003af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af8:	d015      	beq.n	8003b26 <_svfiprintf_r+0xfa>
 8003afa:	9a07      	ldr	r2, [sp, #28]
 8003afc:	4654      	mov	r4, sl
 8003afe:	2000      	movs	r0, #0
 8003b00:	f04f 0c0a 	mov.w	ip, #10
 8003b04:	4621      	mov	r1, r4
 8003b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0a:	3b30      	subs	r3, #48	@ 0x30
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	d94b      	bls.n	8003ba8 <_svfiprintf_r+0x17c>
 8003b10:	b1b0      	cbz	r0, 8003b40 <_svfiprintf_r+0x114>
 8003b12:	9207      	str	r2, [sp, #28]
 8003b14:	e014      	b.n	8003b40 <_svfiprintf_r+0x114>
 8003b16:	eba0 0308 	sub.w	r3, r0, r8
 8003b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	9304      	str	r3, [sp, #16]
 8003b22:	46a2      	mov	sl, r4
 8003b24:	e7d2      	b.n	8003acc <_svfiprintf_r+0xa0>
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	1d19      	adds	r1, r3, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	9103      	str	r1, [sp, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfbb      	ittet	lt
 8003b32:	425b      	neglt	r3, r3
 8003b34:	f042 0202 	orrlt.w	r2, r2, #2
 8003b38:	9307      	strge	r3, [sp, #28]
 8003b3a:	9307      	strlt	r3, [sp, #28]
 8003b3c:	bfb8      	it	lt
 8003b3e:	9204      	strlt	r2, [sp, #16]
 8003b40:	7823      	ldrb	r3, [r4, #0]
 8003b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b44:	d10a      	bne.n	8003b5c <_svfiprintf_r+0x130>
 8003b46:	7863      	ldrb	r3, [r4, #1]
 8003b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4a:	d132      	bne.n	8003bb2 <_svfiprintf_r+0x186>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	9203      	str	r2, [sp, #12]
 8003b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b58:	3402      	adds	r4, #2
 8003b5a:	9305      	str	r3, [sp, #20]
 8003b5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c20 <_svfiprintf_r+0x1f4>
 8003b60:	7821      	ldrb	r1, [r4, #0]
 8003b62:	2203      	movs	r2, #3
 8003b64:	4650      	mov	r0, sl
 8003b66:	f7fc fb5b 	bl	8000220 <memchr>
 8003b6a:	b138      	cbz	r0, 8003b7c <_svfiprintf_r+0x150>
 8003b6c:	9b04      	ldr	r3, [sp, #16]
 8003b6e:	eba0 000a 	sub.w	r0, r0, sl
 8003b72:	2240      	movs	r2, #64	@ 0x40
 8003b74:	4082      	lsls	r2, r0
 8003b76:	4313      	orrs	r3, r2
 8003b78:	3401      	adds	r4, #1
 8003b7a:	9304      	str	r3, [sp, #16]
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	4824      	ldr	r0, [pc, #144]	@ (8003c14 <_svfiprintf_r+0x1e8>)
 8003b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b86:	2206      	movs	r2, #6
 8003b88:	f7fc fb4a 	bl	8000220 <memchr>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d036      	beq.n	8003bfe <_svfiprintf_r+0x1d2>
 8003b90:	4b21      	ldr	r3, [pc, #132]	@ (8003c18 <_svfiprintf_r+0x1ec>)
 8003b92:	bb1b      	cbnz	r3, 8003bdc <_svfiprintf_r+0x1b0>
 8003b94:	9b03      	ldr	r3, [sp, #12]
 8003b96:	3307      	adds	r3, #7
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	9303      	str	r3, [sp, #12]
 8003ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba2:	4433      	add	r3, r6
 8003ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ba6:	e76a      	b.n	8003a7e <_svfiprintf_r+0x52>
 8003ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bac:	460c      	mov	r4, r1
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7a8      	b.n	8003b04 <_svfiprintf_r+0xd8>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	3401      	adds	r4, #1
 8003bb6:	9305      	str	r3, [sp, #20]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 0c0a 	mov.w	ip, #10
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bc4:	3a30      	subs	r2, #48	@ 0x30
 8003bc6:	2a09      	cmp	r2, #9
 8003bc8:	d903      	bls.n	8003bd2 <_svfiprintf_r+0x1a6>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0c6      	beq.n	8003b5c <_svfiprintf_r+0x130>
 8003bce:	9105      	str	r1, [sp, #20]
 8003bd0:	e7c4      	b.n	8003b5c <_svfiprintf_r+0x130>
 8003bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e7f0      	b.n	8003bbe <_svfiprintf_r+0x192>
 8003bdc:	ab03      	add	r3, sp, #12
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	462a      	mov	r2, r5
 8003be2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c1c <_svfiprintf_r+0x1f0>)
 8003be4:	a904      	add	r1, sp, #16
 8003be6:	4638      	mov	r0, r7
 8003be8:	f3af 8000 	nop.w
 8003bec:	1c42      	adds	r2, r0, #1
 8003bee:	4606      	mov	r6, r0
 8003bf0:	d1d6      	bne.n	8003ba0 <_svfiprintf_r+0x174>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	065b      	lsls	r3, r3, #25
 8003bf6:	f53f af2d 	bmi.w	8003a54 <_svfiprintf_r+0x28>
 8003bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bfc:	e72c      	b.n	8003a58 <_svfiprintf_r+0x2c>
 8003bfe:	ab03      	add	r3, sp, #12
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	462a      	mov	r2, r5
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <_svfiprintf_r+0x1f0>)
 8003c06:	a904      	add	r1, sp, #16
 8003c08:	4638      	mov	r0, r7
 8003c0a:	f000 f879 	bl	8003d00 <_printf_i>
 8003c0e:	e7ed      	b.n	8003bec <_svfiprintf_r+0x1c0>
 8003c10:	08004108 	.word	0x08004108
 8003c14:	08004112 	.word	0x08004112
 8003c18:	00000000 	.word	0x00000000
 8003c1c:	08003975 	.word	0x08003975
 8003c20:	0800410e 	.word	0x0800410e

08003c24 <_printf_common>:
 8003c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	4616      	mov	r6, r2
 8003c2a:	4698      	mov	r8, r3
 8003c2c:	688a      	ldr	r2, [r1, #8]
 8003c2e:	690b      	ldr	r3, [r1, #16]
 8003c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bfb8      	it	lt
 8003c38:	4613      	movlt	r3, r2
 8003c3a:	6033      	str	r3, [r6, #0]
 8003c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c40:	4607      	mov	r7, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	b10a      	cbz	r2, 8003c4a <_printf_common+0x26>
 8003c46:	3301      	adds	r3, #1
 8003c48:	6033      	str	r3, [r6, #0]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	0699      	lsls	r1, r3, #26
 8003c4e:	bf42      	ittt	mi
 8003c50:	6833      	ldrmi	r3, [r6, #0]
 8003c52:	3302      	addmi	r3, #2
 8003c54:	6033      	strmi	r3, [r6, #0]
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	f015 0506 	ands.w	r5, r5, #6
 8003c5c:	d106      	bne.n	8003c6c <_printf_common+0x48>
 8003c5e:	f104 0a19 	add.w	sl, r4, #25
 8003c62:	68e3      	ldr	r3, [r4, #12]
 8003c64:	6832      	ldr	r2, [r6, #0]
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	42ab      	cmp	r3, r5
 8003c6a:	dc26      	bgt.n	8003cba <_printf_common+0x96>
 8003c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	3b00      	subs	r3, #0
 8003c74:	bf18      	it	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	0692      	lsls	r2, r2, #26
 8003c7a:	d42b      	bmi.n	8003cd4 <_printf_common+0xb0>
 8003c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c80:	4641      	mov	r1, r8
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c8      	blx	r9
 8003c86:	3001      	adds	r0, #1
 8003c88:	d01e      	beq.n	8003cc8 <_printf_common+0xa4>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	6922      	ldr	r2, [r4, #16]
 8003c8e:	f003 0306 	and.w	r3, r3, #6
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf02      	ittt	eq
 8003c96:	68e5      	ldreq	r5, [r4, #12]
 8003c98:	6833      	ldreq	r3, [r6, #0]
 8003c9a:	1aed      	subeq	r5, r5, r3
 8003c9c:	68a3      	ldr	r3, [r4, #8]
 8003c9e:	bf0c      	ite	eq
 8003ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ca4:	2500      	movne	r5, #0
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bfc4      	itt	gt
 8003caa:	1a9b      	subgt	r3, r3, r2
 8003cac:	18ed      	addgt	r5, r5, r3
 8003cae:	2600      	movs	r6, #0
 8003cb0:	341a      	adds	r4, #26
 8003cb2:	42b5      	cmp	r5, r6
 8003cb4:	d11a      	bne.n	8003cec <_printf_common+0xc8>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e008      	b.n	8003ccc <_printf_common+0xa8>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4652      	mov	r2, sl
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	47c8      	blx	r9
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d103      	bne.n	8003cd0 <_printf_common+0xac>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	e7c6      	b.n	8003c62 <_printf_common+0x3e>
 8003cd4:	18e1      	adds	r1, r4, r3
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	2030      	movs	r0, #48	@ 0x30
 8003cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cde:	4422      	add	r2, r4
 8003ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ce8:	3302      	adds	r3, #2
 8003cea:	e7c7      	b.n	8003c7c <_printf_common+0x58>
 8003cec:	2301      	movs	r3, #1
 8003cee:	4622      	mov	r2, r4
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c8      	blx	r9
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d0e6      	beq.n	8003cc8 <_printf_common+0xa4>
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7d9      	b.n	8003cb2 <_printf_common+0x8e>
	...

08003d00 <_printf_i>:
 8003d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d04:	7e0f      	ldrb	r7, [r1, #24]
 8003d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d08:	2f78      	cmp	r7, #120	@ 0x78
 8003d0a:	4691      	mov	r9, r2
 8003d0c:	4680      	mov	r8, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	469a      	mov	sl, r3
 8003d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d16:	d807      	bhi.n	8003d28 <_printf_i+0x28>
 8003d18:	2f62      	cmp	r7, #98	@ 0x62
 8003d1a:	d80a      	bhi.n	8003d32 <_printf_i+0x32>
 8003d1c:	2f00      	cmp	r7, #0
 8003d1e:	f000 80d1 	beq.w	8003ec4 <_printf_i+0x1c4>
 8003d22:	2f58      	cmp	r7, #88	@ 0x58
 8003d24:	f000 80b8 	beq.w	8003e98 <_printf_i+0x198>
 8003d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d30:	e03a      	b.n	8003da8 <_printf_i+0xa8>
 8003d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d36:	2b15      	cmp	r3, #21
 8003d38:	d8f6      	bhi.n	8003d28 <_printf_i+0x28>
 8003d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d40 <_printf_i+0x40>)
 8003d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003d29 	.word	0x08003d29
 8003d4c:	08003d29 	.word	0x08003d29
 8003d50:	08003d29 	.word	0x08003d29
 8003d54:	08003d29 	.word	0x08003d29
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003d29 	.word	0x08003d29
 8003d60:	08003d29 	.word	0x08003d29
 8003d64:	08003d29 	.word	0x08003d29
 8003d68:	08003d29 	.word	0x08003d29
 8003d6c:	08003eab 	.word	0x08003eab
 8003d70:	08003dd7 	.word	0x08003dd7
 8003d74:	08003e65 	.word	0x08003e65
 8003d78:	08003d29 	.word	0x08003d29
 8003d7c:	08003d29 	.word	0x08003d29
 8003d80:	08003ecd 	.word	0x08003ecd
 8003d84:	08003d29 	.word	0x08003d29
 8003d88:	08003dd7 	.word	0x08003dd7
 8003d8c:	08003d29 	.word	0x08003d29
 8003d90:	08003d29 	.word	0x08003d29
 8003d94:	08003e6d 	.word	0x08003e6d
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6032      	str	r2, [r6, #0]
 8003da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003da8:	2301      	movs	r3, #1
 8003daa:	e09c      	b.n	8003ee6 <_printf_i+0x1e6>
 8003dac:	6833      	ldr	r3, [r6, #0]
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	1d19      	adds	r1, r3, #4
 8003db2:	6031      	str	r1, [r6, #0]
 8003db4:	0606      	lsls	r6, r0, #24
 8003db6:	d501      	bpl.n	8003dbc <_printf_i+0xbc>
 8003db8:	681d      	ldr	r5, [r3, #0]
 8003dba:	e003      	b.n	8003dc4 <_printf_i+0xc4>
 8003dbc:	0645      	lsls	r5, r0, #25
 8003dbe:	d5fb      	bpl.n	8003db8 <_printf_i+0xb8>
 8003dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dc4:	2d00      	cmp	r5, #0
 8003dc6:	da03      	bge.n	8003dd0 <_printf_i+0xd0>
 8003dc8:	232d      	movs	r3, #45	@ 0x2d
 8003dca:	426d      	negs	r5, r5
 8003dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd0:	4858      	ldr	r0, [pc, #352]	@ (8003f34 <_printf_i+0x234>)
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	e011      	b.n	8003dfa <_printf_i+0xfa>
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	6833      	ldr	r3, [r6, #0]
 8003dda:	0608      	lsls	r0, r1, #24
 8003ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003de0:	d402      	bmi.n	8003de8 <_printf_i+0xe8>
 8003de2:	0649      	lsls	r1, r1, #25
 8003de4:	bf48      	it	mi
 8003de6:	b2ad      	uxthmi	r5, r5
 8003de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dea:	4852      	ldr	r0, [pc, #328]	@ (8003f34 <_printf_i+0x234>)
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	bf14      	ite	ne
 8003df0:	230a      	movne	r3, #10
 8003df2:	2308      	moveq	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dfa:	6866      	ldr	r6, [r4, #4]
 8003dfc:	60a6      	str	r6, [r4, #8]
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	db05      	blt.n	8003e0e <_printf_i+0x10e>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	432e      	orrs	r6, r5
 8003e06:	f021 0104 	bic.w	r1, r1, #4
 8003e0a:	6021      	str	r1, [r4, #0]
 8003e0c:	d04b      	beq.n	8003ea6 <_printf_i+0x1a6>
 8003e0e:	4616      	mov	r6, r2
 8003e10:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e14:	fb03 5711 	mls	r7, r3, r1, r5
 8003e18:	5dc7      	ldrb	r7, [r0, r7]
 8003e1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e1e:	462f      	mov	r7, r5
 8003e20:	42bb      	cmp	r3, r7
 8003e22:	460d      	mov	r5, r1
 8003e24:	d9f4      	bls.n	8003e10 <_printf_i+0x110>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d10b      	bne.n	8003e42 <_printf_i+0x142>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	07df      	lsls	r7, r3, #31
 8003e2e:	d508      	bpl.n	8003e42 <_printf_i+0x142>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	6861      	ldr	r1, [r4, #4]
 8003e34:	4299      	cmp	r1, r3
 8003e36:	bfde      	ittt	le
 8003e38:	2330      	movle	r3, #48	@ 0x30
 8003e3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e42:	1b92      	subs	r2, r2, r6
 8003e44:	6122      	str	r2, [r4, #16]
 8003e46:	f8cd a000 	str.w	sl, [sp]
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	aa03      	add	r2, sp, #12
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4640      	mov	r0, r8
 8003e52:	f7ff fee7 	bl	8003c24 <_printf_common>
 8003e56:	3001      	adds	r0, #1
 8003e58:	d14a      	bne.n	8003ef0 <_printf_i+0x1f0>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	b004      	add	sp, #16
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f043 0320 	orr.w	r3, r3, #32
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	4832      	ldr	r0, [pc, #200]	@ (8003f38 <_printf_i+0x238>)
 8003e6e:	2778      	movs	r7, #120	@ 0x78
 8003e70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	6831      	ldr	r1, [r6, #0]
 8003e78:	061f      	lsls	r7, r3, #24
 8003e7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e7e:	d402      	bmi.n	8003e86 <_printf_i+0x186>
 8003e80:	065f      	lsls	r7, r3, #25
 8003e82:	bf48      	it	mi
 8003e84:	b2ad      	uxthmi	r5, r5
 8003e86:	6031      	str	r1, [r6, #0]
 8003e88:	07d9      	lsls	r1, r3, #31
 8003e8a:	bf44      	itt	mi
 8003e8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e90:	6023      	strmi	r3, [r4, #0]
 8003e92:	b11d      	cbz	r5, 8003e9c <_printf_i+0x19c>
 8003e94:	2310      	movs	r3, #16
 8003e96:	e7ad      	b.n	8003df4 <_printf_i+0xf4>
 8003e98:	4826      	ldr	r0, [pc, #152]	@ (8003f34 <_printf_i+0x234>)
 8003e9a:	e7e9      	b.n	8003e70 <_printf_i+0x170>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f023 0320 	bic.w	r3, r3, #32
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	e7f6      	b.n	8003e94 <_printf_i+0x194>
 8003ea6:	4616      	mov	r6, r2
 8003ea8:	e7bd      	b.n	8003e26 <_printf_i+0x126>
 8003eaa:	6833      	ldr	r3, [r6, #0]
 8003eac:	6825      	ldr	r5, [r4, #0]
 8003eae:	6961      	ldr	r1, [r4, #20]
 8003eb0:	1d18      	adds	r0, r3, #4
 8003eb2:	6030      	str	r0, [r6, #0]
 8003eb4:	062e      	lsls	r6, r5, #24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	d501      	bpl.n	8003ebe <_printf_i+0x1be>
 8003eba:	6019      	str	r1, [r3, #0]
 8003ebc:	e002      	b.n	8003ec4 <_printf_i+0x1c4>
 8003ebe:	0668      	lsls	r0, r5, #25
 8003ec0:	d5fb      	bpl.n	8003eba <_printf_i+0x1ba>
 8003ec2:	8019      	strh	r1, [r3, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	4616      	mov	r6, r2
 8003eca:	e7bc      	b.n	8003e46 <_printf_i+0x146>
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	6032      	str	r2, [r6, #0]
 8003ed2:	681e      	ldr	r6, [r3, #0]
 8003ed4:	6862      	ldr	r2, [r4, #4]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7fc f9a1 	bl	8000220 <memchr>
 8003ede:	b108      	cbz	r0, 8003ee4 <_printf_i+0x1e4>
 8003ee0:	1b80      	subs	r0, r0, r6
 8003ee2:	6060      	str	r0, [r4, #4]
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eee:	e7aa      	b.n	8003e46 <_printf_i+0x146>
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	47d0      	blx	sl
 8003efa:	3001      	adds	r0, #1
 8003efc:	d0ad      	beq.n	8003e5a <_printf_i+0x15a>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	079b      	lsls	r3, r3, #30
 8003f02:	d413      	bmi.n	8003f2c <_printf_i+0x22c>
 8003f04:	68e0      	ldr	r0, [r4, #12]
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	bfb8      	it	lt
 8003f0c:	4618      	movlt	r0, r3
 8003f0e:	e7a6      	b.n	8003e5e <_printf_i+0x15e>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4632      	mov	r2, r6
 8003f14:	4649      	mov	r1, r9
 8003f16:	4640      	mov	r0, r8
 8003f18:	47d0      	blx	sl
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d09d      	beq.n	8003e5a <_printf_i+0x15a>
 8003f1e:	3501      	adds	r5, #1
 8003f20:	68e3      	ldr	r3, [r4, #12]
 8003f22:	9903      	ldr	r1, [sp, #12]
 8003f24:	1a5b      	subs	r3, r3, r1
 8003f26:	42ab      	cmp	r3, r5
 8003f28:	dcf2      	bgt.n	8003f10 <_printf_i+0x210>
 8003f2a:	e7eb      	b.n	8003f04 <_printf_i+0x204>
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	f104 0619 	add.w	r6, r4, #25
 8003f32:	e7f5      	b.n	8003f20 <_printf_i+0x220>
 8003f34:	08004119 	.word	0x08004119
 8003f38:	0800412a 	.word	0x0800412a

08003f3c <memmove>:
 8003f3c:	4288      	cmp	r0, r1
 8003f3e:	b510      	push	{r4, lr}
 8003f40:	eb01 0402 	add.w	r4, r1, r2
 8003f44:	d902      	bls.n	8003f4c <memmove+0x10>
 8003f46:	4284      	cmp	r4, r0
 8003f48:	4623      	mov	r3, r4
 8003f4a:	d807      	bhi.n	8003f5c <memmove+0x20>
 8003f4c:	1e43      	subs	r3, r0, #1
 8003f4e:	42a1      	cmp	r1, r4
 8003f50:	d008      	beq.n	8003f64 <memmove+0x28>
 8003f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f5a:	e7f8      	b.n	8003f4e <memmove+0x12>
 8003f5c:	4402      	add	r2, r0
 8003f5e:	4601      	mov	r1, r0
 8003f60:	428a      	cmp	r2, r1
 8003f62:	d100      	bne.n	8003f66 <memmove+0x2a>
 8003f64:	bd10      	pop	{r4, pc}
 8003f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f6e:	e7f7      	b.n	8003f60 <memmove+0x24>

08003f70 <_sbrk_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4d06      	ldr	r5, [pc, #24]	@ (8003f8c <_sbrk_r+0x1c>)
 8003f74:	2300      	movs	r3, #0
 8003f76:	4604      	mov	r4, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	602b      	str	r3, [r5, #0]
 8003f7c:	f7fc fffa 	bl	8000f74 <_sbrk>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	d102      	bne.n	8003f8a <_sbrk_r+0x1a>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	b103      	cbz	r3, 8003f8a <_sbrk_r+0x1a>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	200002c8 	.word	0x200002c8

08003f90 <memcpy>:
 8003f90:	440a      	add	r2, r1
 8003f92:	4291      	cmp	r1, r2
 8003f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f98:	d100      	bne.n	8003f9c <memcpy+0xc>
 8003f9a:	4770      	bx	lr
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa6:	4291      	cmp	r1, r2
 8003fa8:	d1f9      	bne.n	8003f9e <memcpy+0xe>
 8003faa:	bd10      	pop	{r4, pc}

08003fac <_realloc_r>:
 8003fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	b921      	cbnz	r1, 8003fc2 <_realloc_r+0x16>
 8003fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	f7ff bc4d 	b.w	800385c <_malloc_r>
 8003fc2:	b92a      	cbnz	r2, 8003fd0 <_realloc_r+0x24>
 8003fc4:	f7ff fbde 	bl	8003784 <_free_r>
 8003fc8:	4625      	mov	r5, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd0:	f000 f81a 	bl	8004008 <_malloc_usable_size_r>
 8003fd4:	4284      	cmp	r4, r0
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	d802      	bhi.n	8003fe0 <_realloc_r+0x34>
 8003fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fde:	d8f4      	bhi.n	8003fca <_realloc_r+0x1e>
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f7ff fc3a 	bl	800385c <_malloc_r>
 8003fe8:	4680      	mov	r8, r0
 8003fea:	b908      	cbnz	r0, 8003ff0 <_realloc_r+0x44>
 8003fec:	4645      	mov	r5, r8
 8003fee:	e7ec      	b.n	8003fca <_realloc_r+0x1e>
 8003ff0:	42b4      	cmp	r4, r6
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	bf28      	it	cs
 8003ff8:	4632      	movcs	r2, r6
 8003ffa:	f7ff ffc9 	bl	8003f90 <memcpy>
 8003ffe:	4629      	mov	r1, r5
 8004000:	4638      	mov	r0, r7
 8004002:	f7ff fbbf 	bl	8003784 <_free_r>
 8004006:	e7f1      	b.n	8003fec <_realloc_r+0x40>

08004008 <_malloc_usable_size_r>:
 8004008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400c:	1f18      	subs	r0, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bfbc      	itt	lt
 8004012:	580b      	ldrlt	r3, [r1, r0]
 8004014:	18c0      	addlt	r0, r0, r3
 8004016:	4770      	bx	lr

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
