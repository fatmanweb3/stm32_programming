
ANALOG_GPIO_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08004cc8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004cc8  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df8c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1e  00000000  00000000  00014024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00015f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac4  00000000  00000000  00016d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f1b  00000000  00000000  000177d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010400  00000000  00000000  0003b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df433  00000000  00000000  0004baef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012af22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ac  00000000  00000000  0012af68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0012f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bc8 	.word	0x08004bc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004bc8 	.word	0x08004bc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__io_putchar>:
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <__io_putchar+0x20>)
 80005ee:	f003 f801 	bl	80035f4 <HAL_UART_Transmit>
    return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000114 	.word	0x20000114

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fc11 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f835 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f993 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f967 	bl	80008e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000616:	f000 f8ef 	bl	80007f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800061a:	f000 f89b 	bl	8000754 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <main+0x6c>)
 8000622:	f002 f9b3 	bl	800298c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int brightness = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */
	  uint32_t adc_value;
	  uint32_t pwm_pulse_value;

	  HAL_ADC_Start(&hadc1);
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0x70>)
 800062c:	f000 fcd8 	bl	8000fe0 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000630:	f04f 31ff 	mov.w	r1, #4294967295
 8000634:	480e      	ldr	r0, [pc, #56]	@ (8000670 <main+0x70>)
 8000636:	f000 fdd8 	bl	80011ea <HAL_ADC_PollForConversion>

	  adc_value = HAL_ADC_GetValue(&hadc1);
 800063a:	480d      	ldr	r0, [pc, #52]	@ (8000670 <main+0x70>)
 800063c:	f000 fe60 	bl	8001300 <HAL_ADC_GetValue>
 8000640:	60b8      	str	r0, [r7, #8]
	  HAL_ADC_Stop(&hadc1);
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <main+0x70>)
 8000644:	f000 fd9e 	bl	8001184 <HAL_ADC_Stop>

	  pwm_pulse_value = adc_value / 4 ;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_pulse_value);
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <main+0x6c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34

	  printf("ADC Value: %lu, PWM value: %lu \r\n", adc_value, pwm_pulse_value);
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <main+0x74>)
 800065c:	f003 fc48 	bl	8003ef0 <iprintf>


	  HAL_Delay(100);
 8000660:	2064      	movs	r0, #100	@ 0x64
 8000662:	f000 fc55 	bl	8000f10 <HAL_Delay>
  {
 8000666:	bf00      	nop
 8000668:	e7df      	b.n	800062a <main+0x2a>
 800066a:	bf00      	nop
 800066c:	200000cc 	.word	0x200000cc
 8000670:	20000084 	.word	0x20000084
 8000674:	08004be0 	.word	0x08004be0

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	@ 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fc87 	bl	8003f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fdfa 	bl	8002300 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000712:	f000 f96b 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa9a 	bl	8001c6c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073e:	f000 f955 	bl	80009ec <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <MX_ADC1_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_ADC1_Init+0x98>)
 800076e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_ADC1_Init+0xa0>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b6:	f000 fbcf 	bl	8000f58 <HAL_ADC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 f914 	bl	80009ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007d6:	f000 fda1 	bl	800131c <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 f904 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	40012000 	.word	0x40012000
 80007f4:	0f000001 	.word	0x0f000001

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	@ 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000828:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800082a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800082e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 8000832:	2253      	movs	r2, #83	@ 0x53
 8000834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800083c:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800083e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000850:	4823      	ldr	r0, [pc, #140]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 8000852:	f001 fff3 	bl	800283c <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800085c:	f000 f8c6 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086a:	4619      	mov	r1, r3
 800086c:	481c      	ldr	r0, [pc, #112]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800086e:	f002 fa17 	bl	8002ca0 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000878:	f000 f8b8 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800087c:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800087e:	f002 f82c 	bl	80028da <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000888:	f000 f8b0 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 800089c:	f002 fdde 	bl	800345c <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008a6:	f000 f8a1 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008aa:	2360      	movs	r3, #96	@ 0x60
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 80008c2:	f002 f92b 	bl	8002b1c <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008cc:	f000 f88e 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MX_TIM2_Init+0xe8>)
 80008d2:	f000 f91d 	bl	8000b10 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3738      	adds	r7, #56	@ 0x38
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000cc 	.word	0x200000cc

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f002 fe1a 	bl	8003554 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f861 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000114 	.word	0x20000114
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0xac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_GPIO_Init+0xac>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <MX_GPIO_Init+0xac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_GPIO_Init+0xac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <MX_GPIO_Init+0xac>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_GPIO_Init+0xac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_GPIO_Init+0xb0>)
 80009d6:	f000 ffb5 	bl	8001944 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020800 	.word	0x40020800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 ff50 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_ADC_MspInit+0x7c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d127      	bne.n	8000aba <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_ADC_MspInit+0x84>)
 8000ab6:	f000 ff45 	bl	8001944 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40012000 	.word	0x40012000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ae0:	d10d      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b30:	d11d      	bne.n	8000b6e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <HAL_TIM_MspPostInit+0x68>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4619      	mov	r1, r3
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <HAL_TIM_MspPostInit+0x6c>)
 8000b6a:	f000 feeb 	bl	8001944 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a17      	ldr	r2, [pc, #92]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_UART_MspInit+0x8c>)
 8000bf6:	f000 fea5 	bl	8001944 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	@ 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f933 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e00a      	b.n	8000c96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c80:	f3af 8000 	nop.w
 8000c84:	4601      	mov	r1, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbf0      	blt.n	8000c80 <_read+0x12>
  }

  return len;
 8000c9e:	687b      	ldr	r3, [r7, #4]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e009      	b.n	8000cce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	60ba      	str	r2, [r7, #8]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fc8a 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	dbf1      	blt.n	8000cba <_write+0x12>
  }
  return len;
 8000cd6:	687b      	ldr	r3, [r7, #4]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_close>:

int _close(int file)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d08:	605a      	str	r2, [r3, #4]
  return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_isatty>:

int _isatty(int file)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f003 f95e 	bl	8004038 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	2000015c 	.word	0x2000015c
 8000db0:	200002b0 	.word	0x200002b0

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f003 f91d 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fbf9 	bl	8000600 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e1c:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8000e20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e24:	200002b0 	.word	0x200002b0

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 fd41 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fdca 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fd4b 	bl	800192a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 fd21 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000160 	.word	0x20000160

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000160 	.word	0x20000160

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e033      	b.n	8000fd6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fd66 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f9e:	f023 0302 	bic.w	r3, r3, #2
 8000fa2:	f043 0202 	orr.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fae8 	bl	8001580 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fc6:	e001      	b.n	8000fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Start+0x1a>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e0b2      	b.n	8001160 <HAL_ADC_Start+0x180>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b01      	cmp	r3, #1
 800100e:	d018      	beq.n	8001042 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001020:	4b52      	ldr	r3, [pc, #328]	@ (800116c <HAL_ADC_Start+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <HAL_ADC_Start+0x190>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	0c9a      	lsrs	r2, r3, #18
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001034:	e002      	b.n	800103c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3b01      	subs	r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d17a      	bne.n	8001146 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800107a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800108e:	d106      	bne.n	800109e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001094:	f023 0206 	bic.w	r2, r3, #6
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	645a      	str	r2, [r3, #68]	@ 0x44
 800109c:	e002      	b.n	80010a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ac:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d12a      	bne.n	800111c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001178 <HAL_ADC_Start+0x198>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d015      	beq.n	80010fc <HAL_ADC_Start+0x11c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_ADC_Start+0x19c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d105      	bne.n	80010e6 <HAL_ADC_Start+0x106>
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a25      	ldr	r2, [pc, #148]	@ (8001180 <HAL_ADC_Start+0x1a0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d136      	bne.n	800115e <HAL_ADC_Start+0x17e>
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d130      	bne.n	800115e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d129      	bne.n	800115e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	e020      	b.n	800115e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <HAL_ADC_Start+0x198>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d11b      	bne.n	800115e <HAL_ADC_Start+0x17e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d114      	bne.n	800115e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e00b      	b.n	800115e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f043 0210 	orr.w	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	40012300 	.word	0x40012300
 8001178:	40012000 	.word	0x40012000
 800117c:	40012100 	.word	0x40012100
 8001180:	40012200 	.word	0x40012200

08001184 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ADC_Stop+0x16>
 8001196:	2302      	movs	r3, #2
 8001198:	e021      	b.n	80011de <HAL_ADC_Stop+0x5a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001206:	d113      	bne.n	8001230 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001216:	d10b      	bne.n	8001230 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f043 0220 	orr.w	r2, r3, #32
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e063      	b.n	80012f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff fe62 	bl	8000ef8 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001236:	e021      	b.n	800127c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123e:	d01d      	beq.n	800127c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <HAL_ADC_PollForConversion+0x6c>
 8001246:	f7ff fe57 	bl	8000ef8 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d212      	bcs.n	800127c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b02      	cmp	r3, #2
 8001262:	d00b      	beq.n	800127c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f043 0204 	orr.w	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e03d      	b.n	80012f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b02      	cmp	r3, #2
 8001288:	d1d6      	bne.n	8001238 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f06f 0212 	mvn.w	r2, #18
 8001292:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d123      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11f      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d111      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d105      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1c>
 8001334:	2302      	movs	r3, #2
 8001336:	e113      	b.n	8001560 <HAL_ADC_ConfigChannel+0x244>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d925      	bls.n	8001394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68d9      	ldr	r1, [r3, #12]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	3b1e      	subs	r3, #30
 800135e:	2207      	movs	r2, #7
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43da      	mvns	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	400a      	ands	r2, r1
 800136c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	4603      	mov	r3, r0
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4403      	add	r3, r0
 8001386:	3b1e      	subs	r3, #30
 8001388:	409a      	lsls	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	e022      	b.n	80013da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	2207      	movs	r2, #7
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	400a      	ands	r2, r1
 80013b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4403      	add	r3, r0
 80013d0:	409a      	lsls	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d824      	bhi.n	800142c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b05      	subs	r3, #5
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b05      	subs	r3, #5
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
 800142a:	e04c      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b0c      	cmp	r3, #12
 8001432:	d824      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b23      	subs	r3, #35	@ 0x23
 8001446:	221f      	movs	r2, #31
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43da      	mvns	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	400a      	ands	r2, r1
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b23      	subs	r3, #35	@ 0x23
 8001470:	fa00 f203 	lsl.w	r2, r0, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
 800147c:	e023      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b41      	subs	r3, #65	@ 0x41
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b41      	subs	r3, #65	@ 0x41
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_ADC_ConfigChannel+0x250>)
 80014c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <HAL_ADC_ConfigChannel+0x254>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10f      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1d8>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d10b      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <HAL_ADC_ConfigChannel+0x254>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x23a>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1c      	ldr	r2, [pc, #112]	@ (8001574 <HAL_ADC_ConfigChannel+0x258>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x1f4>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b11      	cmp	r3, #17
 800150e:	d122      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_ADC_ConfigChannel+0x258>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d111      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_ADC_ConfigChannel+0x25c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_ADC_ConfigChannel+0x260>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	0c9a      	lsrs	r2, r3, #18
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001548:	e002      	b.n	8001550 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f9      	bne.n	800154a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40012300 	.word	0x40012300
 8001570:	40012000 	.word	0x40012000
 8001574:	10000012 	.word	0x10000012
 8001578:	20000000 	.word	0x20000000
 800157c:	431bde83 	.word	0x431bde83

08001580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001588:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <ADC_Init+0x1f0>)
 800158a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	4a58      	ldr	r2, [pc, #352]	@ (8001774 <ADC_Init+0x1f4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d022      	beq.n	800165e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e00f      	b.n	800167e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800166c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800167c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0202 	bic.w	r2, r2, #2
 800168c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e1b      	ldrb	r3, [r3, #24]
 8001698:	005a      	lsls	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6859      	ldr	r1, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	3b01      	subs	r3, #1
 80016d8:	035a      	lsls	r2, r3, #13
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e007      	b.n	80016f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	3b01      	subs	r3, #1
 8001710:	051a      	lsls	r2, r3, #20
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800174e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	029a      	lsls	r2, r3, #10
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40012300 	.word	0x40012300
 8001774:	0f000001 	.word	0x0f000001

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff47 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff5c 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffb0 	bl	8001898 <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e165      	b.n	8001c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8154 	bne.w	8001c26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d005      	beq.n	8001996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	2b02      	cmp	r3, #2
 8001994:	d130      	bne.n	80019f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0201 	and.w	r2, r3, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d017      	beq.n	8001a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80ae 	beq.w	8001c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b5d      	ldr	r3, [pc, #372]	@ (8001c44 <HAL_GPIO_Init+0x300>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c44 <HAL_GPIO_Init+0x300>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_GPIO_Init+0x300>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae6:	4a58      	ldr	r2, [pc, #352]	@ (8001c48 <HAL_GPIO_Init+0x304>)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c4c <HAL_GPIO_Init+0x308>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d025      	beq.n	8001b5e <HAL_GPIO_Init+0x21a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4e      	ldr	r2, [pc, #312]	@ (8001c50 <HAL_GPIO_Init+0x30c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_GPIO_Init+0x216>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c54 <HAL_GPIO_Init+0x310>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x212>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	@ (8001c58 <HAL_GPIO_Init+0x314>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x20e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c5c <HAL_GPIO_Init+0x318>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x20a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_GPIO_Init+0x31c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x206>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	@ (8001c64 <HAL_GPIO_Init+0x320>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x202>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00c      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e00a      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x21c>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b70:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <HAL_GPIO_Init+0x304>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba2:	4a31      	ldr	r2, [pc, #196]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bcc:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f ae96 	bls.w	8001960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40021800 	.word	0x40021800
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0cc      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b68      	ldr	r3, [pc, #416]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d90c      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b63      	ldr	r3, [pc, #396]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b8      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b59      	ldr	r3, [pc, #356]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	494d      	ldr	r1, [pc, #308]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d044      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d119      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e07f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e06f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e067      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4934      	ldr	r1, [pc, #208]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff f8cc 	bl	8000ef8 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7ff f8c8 	bl	8000ef8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e04f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d20c      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4916      	ldr	r1, [pc, #88]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	490e      	ldr	r1, [pc, #56]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f000 f855 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	490a      	ldr	r1, [pc, #40]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	5ccb      	ldrb	r3, [r1, r3]
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f82c 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08004c04 	.word	0x08004c04
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08004c14 	.word	0x08004c14

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08004c14 	.word	0x08004c14

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	b0ae      	sub	sp, #184	@ 0xb8
 8001ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec6:	4bcb      	ldr	r3, [pc, #812]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	f200 8206 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8001edc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001f11 	.word	0x08001f11
 8001ee0:	080022e1 	.word	0x080022e1
 8001ee4:	080022e1 	.word	0x080022e1
 8001ee8:	080022e1 	.word	0x080022e1
 8001eec:	08001f19 	.word	0x08001f19
 8001ef0:	080022e1 	.word	0x080022e1
 8001ef4:	080022e1 	.word	0x080022e1
 8001ef8:	080022e1 	.word	0x080022e1
 8001efc:	08001f21 	.word	0x08001f21
 8001f00:	080022e1 	.word	0x080022e1
 8001f04:	080022e1 	.word	0x080022e1
 8001f08:	080022e1 	.word	0x080022e1
 8001f0c:	08002111 	.word	0x08002111
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4bb9      	ldr	r3, [pc, #740]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f16:	e1e7      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4bb8      	ldr	r3, [pc, #736]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f1e:	e1e3      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f20:	4bb4      	ldr	r3, [pc, #720]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f2c:	4bb1      	ldr	r3, [pc, #708]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d071      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f38:	4bae      	ldr	r3, [pc, #696]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f5e:	4622      	mov	r2, r4
 8001f60:	462b      	mov	r3, r5
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	0159      	lsls	r1, r3, #5
 8001f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f70:	0150      	lsls	r0, r2, #5
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4621      	mov	r1, r4
 8001f78:	1a51      	subs	r1, r2, r1
 8001f7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f90:	4649      	mov	r1, r9
 8001f92:	018b      	lsls	r3, r1, #6
 8001f94:	4641      	mov	r1, r8
 8001f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	018a      	lsls	r2, r1, #6
 8001f9e:	4641      	mov	r1, r8
 8001fa0:	1a51      	subs	r1, r2, r1
 8001fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001fb8:	4649      	mov	r1, r9
 8001fba:	00cb      	lsls	r3, r1, #3
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	00ca      	lsls	r2, r1, #3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4622      	mov	r2, r4
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	eb42 0303 	adc.w	r3, r2, r3
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fe8:	4629      	mov	r1, r5
 8001fea:	024b      	lsls	r3, r1, #9
 8001fec:	4621      	mov	r1, r4
 8001fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	024a      	lsls	r2, r1, #9
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002008:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800200c:	f7fe f950 	bl	80002b0 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4613      	mov	r3, r2
 8002016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800201a:	e067      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201c:	4b75      	ldr	r3, [pc, #468]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002028:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800202c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002036:	2300      	movs	r3, #0
 8002038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800203a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800203e:	4622      	mov	r2, r4
 8002040:	462b      	mov	r3, r5
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4621      	mov	r1, r4
 8002058:	1a51      	subs	r1, r2, r1
 800205a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800205c:	4629      	mov	r1, r5
 800205e:	eb63 0301 	sbc.w	r3, r3, r1
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002070:	4649      	mov	r1, r9
 8002072:	018b      	lsls	r3, r1, #6
 8002074:	4641      	mov	r1, r8
 8002076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800207a:	4641      	mov	r1, r8
 800207c:	018a      	lsls	r2, r1, #6
 800207e:	4641      	mov	r1, r8
 8002080:	ebb2 0a01 	subs.w	sl, r2, r1
 8002084:	4649      	mov	r1, r9
 8002086:	eb63 0b01 	sbc.w	fp, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002096:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800209a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800209e:	4692      	mov	sl, r2
 80020a0:	469b      	mov	fp, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb1a 0303 	adds.w	r3, sl, r3
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	462b      	mov	r3, r5
 80020ac:	eb4b 0303 	adc.w	r3, fp, r3
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020be:	4629      	mov	r1, r5
 80020c0:	028b      	lsls	r3, r1, #10
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c8:	4621      	mov	r1, r4
 80020ca:	028a      	lsls	r2, r1, #10
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020d4:	2200      	movs	r2, #0
 80020d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80020d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80020da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020de:	f7fe f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4613      	mov	r3, r2
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020ec:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80020fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800210e:	e0eb      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002110:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800211c:	4b35      	ldr	r3, [pc, #212]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d06b      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002128:	4b32      	ldr	r3, [pc, #200]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	2200      	movs	r2, #0
 8002130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213a:	663b      	str	r3, [r7, #96]	@ 0x60
 800213c:	2300      	movs	r3, #0
 800213e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002140:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002144:	4622      	mov	r2, r4
 8002146:	462b      	mov	r3, r5
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0159      	lsls	r1, r3, #5
 8002152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002156:	0150      	lsls	r0, r2, #5
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4621      	mov	r1, r4
 800215e:	1a51      	subs	r1, r2, r1
 8002160:	61b9      	str	r1, [r7, #24]
 8002162:	4629      	mov	r1, r5
 8002164:	eb63 0301 	sbc.w	r3, r3, r1
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002176:	4659      	mov	r1, fp
 8002178:	018b      	lsls	r3, r1, #6
 800217a:	4651      	mov	r1, sl
 800217c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002180:	4651      	mov	r1, sl
 8002182:	018a      	lsls	r2, r1, #6
 8002184:	4651      	mov	r1, sl
 8002186:	ebb2 0801 	subs.w	r8, r2, r1
 800218a:	4659      	mov	r1, fp
 800218c:	eb63 0901 	sbc.w	r9, r3, r1
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800219c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021a4:	4690      	mov	r8, r2
 80021a6:	4699      	mov	r9, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	eb18 0303 	adds.w	r3, r8, r3
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	462b      	mov	r3, r5
 80021b2:	eb49 0303 	adc.w	r3, r9, r3
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021c4:	4629      	mov	r1, r5
 80021c6:	024b      	lsls	r3, r1, #9
 80021c8:	4621      	mov	r1, r4
 80021ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ce:	4621      	mov	r1, r4
 80021d0:	024a      	lsls	r2, r1, #9
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021da:	2200      	movs	r2, #0
 80021dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021e4:	f7fe f864 	bl	80002b0 <__aeabi_uldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4613      	mov	r3, r2
 80021ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021f2:	e065      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x420>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002200:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	2200      	movs	r2, #0
 8002208:	4618      	mov	r0, r3
 800220a:	4611      	mov	r1, r2
 800220c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002210:	653b      	str	r3, [r7, #80]	@ 0x50
 8002212:	2300      	movs	r3, #0
 8002214:	657b      	str	r3, [r7, #84]	@ 0x54
 8002216:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800221a:	4642      	mov	r2, r8
 800221c:	464b      	mov	r3, r9
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0159      	lsls	r1, r3, #5
 8002228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222c:	0150      	lsls	r0, r2, #5
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4641      	mov	r1, r8
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	4649      	mov	r1, r9
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800224c:	4659      	mov	r1, fp
 800224e:	018b      	lsls	r3, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002256:	4651      	mov	r1, sl
 8002258:	018a      	lsls	r2, r1, #6
 800225a:	4651      	mov	r1, sl
 800225c:	1a54      	subs	r4, r2, r1
 800225e:	4659      	mov	r1, fp
 8002260:	eb63 0501 	sbc.w	r5, r3, r1
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	00eb      	lsls	r3, r5, #3
 800226e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002272:	00e2      	lsls	r2, r4, #3
 8002274:	4614      	mov	r4, r2
 8002276:	461d      	mov	r5, r3
 8002278:	4643      	mov	r3, r8
 800227a:	18e3      	adds	r3, r4, r3
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	464b      	mov	r3, r9
 8002280:	eb45 0303 	adc.w	r3, r5, r3
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002292:	4629      	mov	r1, r5
 8002294:	028b      	lsls	r3, r1, #10
 8002296:	4621      	mov	r1, r4
 8002298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800229c:	4621      	mov	r1, r4
 800229e:	028a      	lsls	r2, r1, #10
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022a8:	2200      	movs	r2, #0
 80022aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022b2:	f7fd fffd 	bl	80002b0 <__aeabi_uldivmod>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4613      	mov	r3, r2
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022c0:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0f1b      	lsrs	r3, r3, #28
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80022ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022de:	e003      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80022e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	37b8      	adds	r7, #184	@ 0xb8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	00f42400 	.word	0x00f42400

08002300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e28d      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8083 	beq.w	8002426 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002320:	4b94      	ldr	r3, [pc, #592]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b04      	cmp	r3, #4
 800232a:	d019      	beq.n	8002360 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800232c:	4b91      	ldr	r3, [pc, #580]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
        || \
 8002334:	2b08      	cmp	r3, #8
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002338:	4b8e      	ldr	r3, [pc, #568]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002344:	d00c      	beq.n	8002360 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b8b      	ldr	r3, [pc, #556]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d112      	bne.n	8002378 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b88      	ldr	r3, [pc, #544]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800235e:	d10b      	bne.n	8002378 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	4b84      	ldr	r3, [pc, #528]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d05b      	beq.n	8002424 <HAL_RCC_OscConfig+0x124>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d157      	bne.n	8002424 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e25a      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d106      	bne.n	8002390 <HAL_RCC_OscConfig+0x90>
 8002382:	4b7c      	ldr	r3, [pc, #496]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7b      	ldr	r2, [pc, #492]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e01d      	b.n	80023cc <HAL_RCC_OscConfig+0xcc>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0xb4>
 800239a:	4b76      	ldr	r3, [pc, #472]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a75      	ldr	r2, [pc, #468]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b73      	ldr	r3, [pc, #460]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a72      	ldr	r2, [pc, #456]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0xcc>
 80023b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fd90 	bl	8000ef8 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fd8c 	bl	8000ef8 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	@ 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e21f      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b61      	ldr	r3, [pc, #388]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0xdc>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd7c 	bl	8000ef8 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fd78 	bl	8000ef8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e20b      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	4b57      	ldr	r3, [pc, #348]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x104>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d06f      	beq.n	8002512 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002432:	4b50      	ldr	r3, [pc, #320]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b00      	cmp	r3, #0
 800243c:	d017      	beq.n	800246e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800243e:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
        || \
 8002446:	2b08      	cmp	r3, #8
 8002448:	d105      	bne.n	8002456 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800244a:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b47      	ldr	r3, [pc, #284]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002462:	4b44      	ldr	r3, [pc, #272]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b41      	ldr	r3, [pc, #260]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x186>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1d3      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4937      	ldr	r1, [pc, #220]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <HAL_RCC_OscConfig+0x278>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fd25 	bl	8000ef8 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe fd21 	bl	8000ef8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1b4      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4925      	ldr	r1, [pc, #148]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <HAL_RCC_OscConfig+0x278>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd04 	bl	8000ef8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe fd00 	bl	8000ef8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e193      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d036      	beq.n	800258c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_RCC_OscConfig+0x27c>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fce4 	bl	8000ef8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fce0 	bl	8000ef8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e173      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_RCC_OscConfig+0x274>)
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x234>
 8002552:	e01b      	b.n	800258c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_RCC_OscConfig+0x27c>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fccd 	bl	8000ef8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	e00e      	b.n	8002580 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002562:	f7fe fcc9 	bl	8000ef8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d907      	bls.n	8002580 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e15c      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
 8002574:	40023800 	.word	0x40023800
 8002578:	42470000 	.word	0x42470000
 800257c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b8a      	ldr	r3, [pc, #552]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ea      	bne.n	8002562 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8097 	beq.w	80026c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b83      	ldr	r3, [pc, #524]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10f      	bne.n	80025ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b7f      	ldr	r3, [pc, #508]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4a7e      	ldr	r2, [pc, #504]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ba:	4b7c      	ldr	r3, [pc, #496]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b79      	ldr	r3, [pc, #484]	@ (80027b0 <HAL_RCC_OscConfig+0x4b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d118      	bne.n	8002608 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_RCC_OscConfig+0x4b0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	@ (80027b0 <HAL_RCC_OscConfig+0x4b0>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fc89 	bl	8000ef8 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7fe fc85 	bl	8000ef8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e118      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <HAL_RCC_OscConfig+0x4b0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x31e>
 8002610:	4b66      	ldr	r3, [pc, #408]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x358>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x340>
 8002626:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	4a60      	ldr	r2, [pc, #384]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6713      	str	r3, [r2, #112]	@ 0x70
 8002632:	4b5e      	ldr	r3, [pc, #376]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	4a5d      	ldr	r2, [pc, #372]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	@ 0x70
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x358>
 8002640:	4b5a      	ldr	r3, [pc, #360]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a59      	ldr	r2, [pc, #356]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
 800264c:	4b57      	ldr	r3, [pc, #348]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002652:	f023 0304 	bic.w	r3, r3, #4
 8002656:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d015      	beq.n	800268c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fc4a 	bl	8000ef8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe fc46 	bl	8000ef8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0d7      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	4b4b      	ldr	r3, [pc, #300]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ee      	beq.n	8002668 <HAL_RCC_OscConfig+0x368>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fc34 	bl	8000ef8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fc30 	bl	8000ef8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0c1      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026aa:	4b40      	ldr	r3, [pc, #256]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ee      	bne.n	8002694 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	4a3a      	ldr	r2, [pc, #232]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80ad 	beq.w	800282c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d2:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d060      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d145      	bne.n	8002772 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_RCC_OscConfig+0x4b4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fc04 	bl	8000ef8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fc00 	bl	8000ef8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e093      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	4b29      	ldr	r3, [pc, #164]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	019b      	lsls	r3, r3, #6
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	071b      	lsls	r3, r3, #28
 800273e:	491b      	ldr	r1, [pc, #108]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x4b4>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fbd5 	bl	8000ef8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fbd1 	bl	8000ef8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e064      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x452>
 8002770:	e05c      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <HAL_RCC_OscConfig+0x4b4>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fbbe 	bl	8000ef8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fbba 	bl	8000ef8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04d      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_RCC_OscConfig+0x4ac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x480>
 800279e:	e045      	b.n	800282c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e040      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40007000 	.word	0x40007000
 80027b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <HAL_RCC_OscConfig+0x538>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d030      	beq.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d129      	bne.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d122      	bne.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d119      	bne.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d10f      	bne.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f934 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fad8 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e041      	b.n	8002970 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f839 	bl	8002978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 fa89 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e015      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07c      	b.n	8002af8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x82>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fce6 	bl	8003410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <HAL_TIM_PWM_Start+0x174>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_PWM_Start+0xcc>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2c      	ldr	r2, [pc, #176]	@ (8002b04 <HAL_TIM_PWM_Start+0x178>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_TIM_PWM_Start+0xd0>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_TIM_PWM_Start+0xd2>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a22      	ldr	r2, [pc, #136]	@ (8002b00 <HAL_TIM_PWM_Start+0x174>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a84:	d01d      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <HAL_TIM_PWM_Start+0x17c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_TIM_PWM_Start+0x180>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <HAL_TIM_PWM_Start+0x184>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_TIM_PWM_Start+0x178>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a18      	ldr	r2, [pc, #96]	@ (8002b14 <HAL_TIM_PWM_Start+0x188>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x136>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a16      	ldr	r2, [pc, #88]	@ (8002b18 <HAL_TIM_PWM_Start+0x18c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	e007      	b.n	8002af6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40010400 	.word	0x40010400
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40001800 	.word	0x40001800

08002b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0ae      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	f200 809f 	bhi.w	8002c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002c89 	.word	0x08002c89
 8002b58:	08002c89 	.word	0x08002c89
 8002b5c:	08002c89 	.word	0x08002c89
 8002b60:	08002bc5 	.word	0x08002bc5
 8002b64:	08002c89 	.word	0x08002c89
 8002b68:	08002c89 	.word	0x08002c89
 8002b6c:	08002c89 	.word	0x08002c89
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c89 	.word	0x08002c89
 8002b78:	08002c89 	.word	0x08002c89
 8002b7c:	08002c89 	.word	0x08002c89
 8002b80:	08002c47 	.word	0x08002c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f9f6 	bl	8002f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
      break;
 8002bc2:	e064      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fa46 	bl	800305c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
      break;
 8002c04:	e043      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fa9b 	bl	8003148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]
      break;
 8002c44:	e023      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 faef 	bl	8003230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0b4      	b.n	8002e26 <HAL_TIM_ConfigClockSource+0x186>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf4:	d03e      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cfa:	f200 8087 	bhi.w	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d02:	f000 8086 	beq.w	8002e12 <HAL_TIM_ConfigClockSource+0x172>
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0a:	d87f      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b70      	cmp	r3, #112	@ 0x70
 8002d0e:	d01a      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xa6>
 8002d10:	2b70      	cmp	r3, #112	@ 0x70
 8002d12:	d87b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b60      	cmp	r3, #96	@ 0x60
 8002d16:	d050      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x11a>
 8002d18:	2b60      	cmp	r3, #96	@ 0x60
 8002d1a:	d877      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b50      	cmp	r3, #80	@ 0x50
 8002d1e:	d03c      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xfa>
 8002d20:	2b50      	cmp	r3, #80	@ 0x50
 8002d22:	d873      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d058      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x13a>
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d86f      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b30      	cmp	r3, #48	@ 0x30
 8002d2e:	d064      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b30      	cmp	r3, #48	@ 0x30
 8002d32:	d86b      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d060      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d867      	bhi.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05c      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d05a      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	e062      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	f000 fb3b 	bl	80033d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	609a      	str	r2, [r3, #8]
      break;
 8002d72:	e04f      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d84:	f000 fb24 	bl	80033d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d96:	609a      	str	r2, [r3, #8]
      break;
 8002d98:	e03c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 fa98 	bl	80032dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2150      	movs	r1, #80	@ 0x50
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 faf1 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002db8:	e02c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f000 fab7 	bl	800333a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2160      	movs	r1, #96	@ 0x60
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fae1 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e01c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fa78 	bl	80032dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fad1 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002df8:	e00c      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f000 fac8 	bl	800339a <TIM_ITRx_SetConfig>
      break;
 8002e0a:	e003      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e000      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a43      	ldr	r2, [pc, #268]	@ (8002f50 <TIM_Base_SetConfig+0x120>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d00f      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a40      	ldr	r2, [pc, #256]	@ (8002f54 <TIM_Base_SetConfig+0x124>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f58 <TIM_Base_SetConfig+0x128>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3e      	ldr	r2, [pc, #248]	@ (8002f5c <TIM_Base_SetConfig+0x12c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f60 <TIM_Base_SetConfig+0x130>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a32      	ldr	r2, [pc, #200]	@ (8002f50 <TIM_Base_SetConfig+0x120>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e90:	d027      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	@ (8002f54 <TIM_Base_SetConfig+0x124>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d023      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f58 <TIM_Base_SetConfig+0x128>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <TIM_Base_SetConfig+0x12c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2c      	ldr	r2, [pc, #176]	@ (8002f60 <TIM_Base_SetConfig+0x130>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d017      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f64 <TIM_Base_SetConfig+0x134>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f68 <TIM_Base_SetConfig+0x138>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a29      	ldr	r2, [pc, #164]	@ (8002f6c <TIM_Base_SetConfig+0x13c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a28      	ldr	r2, [pc, #160]	@ (8002f70 <TIM_Base_SetConfig+0x140>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	@ (8002f74 <TIM_Base_SetConfig+0x144>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a26      	ldr	r2, [pc, #152]	@ (8002f78 <TIM_Base_SetConfig+0x148>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <TIM_Base_SetConfig+0x120>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0xf2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a10      	ldr	r2, [pc, #64]	@ (8002f60 <TIM_Base_SetConfig+0x130>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d103      	bne.n	8002f2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40000c00 	.word	0x40000c00
 8002f60:	40010400 	.word	0x40010400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800
 8002f70:	40001800 	.word	0x40001800
 8002f74:	40001c00 	.word	0x40001c00
 8002f78:	40002000 	.word	0x40002000

08002f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0201 	bic.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a20      	ldr	r2, [pc, #128]	@ (8003054 <TIM_OC1_SetConfig+0xd8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_OC1_SetConfig+0x64>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <TIM_OC1_SetConfig+0xdc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10c      	bne.n	8002ffa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0308 	bic.w	r3, r3, #8
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <TIM_OC1_SetConfig+0xd8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_OC1_SetConfig+0x8e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <TIM_OC1_SetConfig+0xdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d111      	bne.n	800302e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40010000 	.word	0x40010000
 8003058:	40010400 	.word	0x40010400

0800305c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 0210 	bic.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0320 	bic.w	r3, r3, #32
 80030a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <TIM_OC2_SetConfig+0xe4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <TIM_OC2_SetConfig+0x68>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <TIM_OC2_SetConfig+0xe8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10d      	bne.n	80030e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a17      	ldr	r2, [pc, #92]	@ (8003140 <TIM_OC2_SetConfig+0xe4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_OC2_SetConfig+0x94>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <TIM_OC2_SetConfig+0xe8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d113      	bne.n	8003118 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40010400 	.word	0x40010400

08003148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <TIM_OC3_SetConfig+0xe0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_OC3_SetConfig+0x66>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a20      	ldr	r2, [pc, #128]	@ (800322c <TIM_OC3_SetConfig+0xe4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10d      	bne.n	80031ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <TIM_OC3_SetConfig+0xe0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_OC3_SetConfig+0x92>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a15      	ldr	r2, [pc, #84]	@ (800322c <TIM_OC3_SetConfig+0xe4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d113      	bne.n	8003202 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40010000 	.word	0x40010000
 800322c:	40010400 	.word	0x40010400

08003230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800327a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <TIM_OC4_SetConfig+0xa4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_OC4_SetConfig+0x68>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <TIM_OC4_SetConfig+0xa8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d109      	bne.n	80032ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800329e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010400 	.word	0x40010400

080032dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f023 0201 	bic.w	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 030a 	bic.w	r3, r3, #10
 8003318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 0210 	bic.w	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f043 0307 	orr.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2201      	movs	r2, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003470:	2302      	movs	r3, #2
 8003472:	e05a      	b.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a21      	ldr	r2, [pc, #132]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d01d      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a17      	ldr	r2, [pc, #92]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a15      	ldr	r2, [pc, #84]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10c      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4313      	orrs	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40010400 	.word	0x40010400
 800354c:	40014000 	.word	0x40014000
 8003550:	40001800 	.word	0x40001800

08003554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e042      	b.n	80035ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fb00 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f973 	bl	8003884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	@ 0x28
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	d175      	bne.n	8003700 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Transmit+0x2c>
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e06e      	b.n	8003702 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2221      	movs	r2, #33	@ 0x21
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003632:	f7fd fc61 	bl	8000ef8 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364c:	d108      	bne.n	8003660 <HAL_UART_Transmit+0x6c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e003      	b.n	8003668 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003668:	e02e      	b.n	80036c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	@ 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f848 	bl	800370a <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e03a      	b.n	8003702 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3302      	adds	r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e007      	b.n	80036ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	3301      	adds	r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1cb      	bne.n	800366a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2140      	movs	r1, #64	@ 0x40
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f814 	bl	800370a <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e006      	b.n	8003702 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371a:	e03b      	b.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d037      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003724:	f7fd fbe8 	bl	8000ef8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	429a      	cmp	r2, r3
 8003732:	d302      	bcc.n	800373a <UART_WaitOnFlagUntilTimeout+0x30>
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e03a      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d023      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b80      	cmp	r3, #128	@ 0x80
 8003750:	d020      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d01d      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d116      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f81d 	bl	80037bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2208      	movs	r2, #8
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e00f      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d0b4      	beq.n	800371c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b095      	sub	sp, #84	@ 0x54
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	61fb      	str	r3, [r7, #28]
   return(result);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	2b01      	cmp	r3, #1
 8003832:	d119      	bne.n	8003868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	60bb      	str	r3, [r7, #8]
   return(result);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	647b      	str	r3, [r7, #68]	@ 0x44
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003854:	61ba      	str	r2, [r7, #24]
 8003856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	613b      	str	r3, [r7, #16]
   return(result);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003876:	bf00      	nop
 8003878:	3754      	adds	r7, #84	@ 0x54
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003888:	b0c0      	sub	sp, #256	@ 0x100
 800388a:	af00      	add	r7, sp, #0
 800388c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	68d9      	ldr	r1, [r3, #12]
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	ea40 0301 	orr.w	r3, r0, r1
 80038ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038dc:	f021 010c 	bic.w	r1, r1, #12
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038ea:	430b      	orrs	r3, r1
 80038ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	6999      	ldr	r1, [r3, #24]
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	ea40 0301 	orr.w	r3, r0, r1
 800390a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b8f      	ldr	r3, [pc, #572]	@ (8003b50 <UART_SetConfig+0x2cc>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d005      	beq.n	8003924 <UART_SetConfig+0xa0>
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b54 <UART_SetConfig+0x2d0>)
 8003920:	429a      	cmp	r2, r3
 8003922:	d104      	bne.n	800392e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe faa8 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8003928:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800392c:	e003      	b.n	8003936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800392e:	f7fe fa8f 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8003932:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003940:	f040 810c 	bne.w	8003b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003948:	2200      	movs	r2, #0
 800394a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800394e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003956:	4622      	mov	r2, r4
 8003958:	462b      	mov	r3, r5
 800395a:	1891      	adds	r1, r2, r2
 800395c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800395e:	415b      	adcs	r3, r3
 8003960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003966:	4621      	mov	r1, r4
 8003968:	eb12 0801 	adds.w	r8, r2, r1
 800396c:	4629      	mov	r1, r5
 800396e:	eb43 0901 	adc.w	r9, r3, r1
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003986:	4690      	mov	r8, r2
 8003988:	4699      	mov	r9, r3
 800398a:	4623      	mov	r3, r4
 800398c:	eb18 0303 	adds.w	r3, r8, r3
 8003990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003994:	462b      	mov	r3, r5
 8003996:	eb49 0303 	adc.w	r3, r9, r3
 800399a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039b2:	460b      	mov	r3, r1
 80039b4:	18db      	adds	r3, r3, r3
 80039b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80039b8:	4613      	mov	r3, r2
 80039ba:	eb42 0303 	adc.w	r3, r2, r3
 80039be:	657b      	str	r3, [r7, #84]	@ 0x54
 80039c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039c8:	f7fc fc72 	bl	80002b0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b61      	ldr	r3, [pc, #388]	@ (8003b58 <UART_SetConfig+0x2d4>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011c      	lsls	r4, r3, #4
 80039da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	1891      	adds	r1, r2, r2
 80039f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039f4:	415b      	adcs	r3, r3
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039fc:	4641      	mov	r1, r8
 80039fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003a02:	4649      	mov	r1, r9
 8003a04:	eb43 0b01 	adc.w	fp, r3, r1
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1c:	4692      	mov	sl, r2
 8003a1e:	469b      	mov	fp, r3
 8003a20:	4643      	mov	r3, r8
 8003a22:	eb1a 0303 	adds.w	r3, sl, r3
 8003a26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	18db      	adds	r3, r3, r3
 8003a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a4e:	4613      	mov	r3, r2
 8003a50:	eb42 0303 	adc.w	r3, r2, r3
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a5e:	f7fc fc27 	bl	80002b0 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4611      	mov	r1, r2
 8003a68:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <UART_SetConfig+0x2d4>)
 8003a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2264      	movs	r2, #100	@ 0x64
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	1acb      	subs	r3, r1, r3
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a7e:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 2302 	umull	r2, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a8c:	441c      	add	r4, r3
 8003a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1891      	adds	r1, r2, r2
 8003aa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003aa8:	415b      	adcs	r3, r3
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	1851      	adds	r1, r2, r1
 8003ab4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	414b      	adcs	r3, r1
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ac8:	4659      	mov	r1, fp
 8003aca:	00cb      	lsls	r3, r1, #3
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	00ca      	lsls	r2, r1, #3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4642      	mov	r2, r8
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003afc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b04:	460b      	mov	r3, r1
 8003b06:	18db      	adds	r3, r3, r3
 8003b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b1a:	f7fc fbc9 	bl	80002b0 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <UART_SetConfig+0x2d4>)
 8003b24:	fba3 1302 	umull	r1, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	2164      	movs	r1, #100	@ 0x64
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3332      	adds	r3, #50	@ 0x32
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <UART_SetConfig+0x2d4>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	f003 0207 	and.w	r2, r3, #7
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4422      	add	r2, r4
 8003b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b4c:	e106      	b.n	8003d5c <UART_SetConfig+0x4d8>
 8003b4e:	bf00      	nop
 8003b50:	40011000 	.word	0x40011000
 8003b54:	40011400 	.word	0x40011400
 8003b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b6e:	4642      	mov	r2, r8
 8003b70:	464b      	mov	r3, r9
 8003b72:	1891      	adds	r1, r2, r2
 8003b74:	6239      	str	r1, [r7, #32]
 8003b76:	415b      	adcs	r3, r3
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b7e:	4641      	mov	r1, r8
 8003b80:	1854      	adds	r4, r2, r1
 8003b82:	4649      	mov	r1, r9
 8003b84:	eb43 0501 	adc.w	r5, r3, r1
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	00eb      	lsls	r3, r5, #3
 8003b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b96:	00e2      	lsls	r2, r4, #3
 8003b98:	4614      	mov	r4, r2
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	18e3      	adds	r3, r4, r3
 8003ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	eb45 0303 	adc.w	r3, r5, r3
 8003baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bca:	4629      	mov	r1, r5
 8003bcc:	008b      	lsls	r3, r1, #2
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	008a      	lsls	r2, r1, #2
 8003bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003bdc:	f7fc fb68 	bl	80002b0 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4b60      	ldr	r3, [pc, #384]	@ (8003d68 <UART_SetConfig+0x4e4>)
 8003be6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	011c      	lsls	r4, r3, #4
 8003bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c00:	4642      	mov	r2, r8
 8003c02:	464b      	mov	r3, r9
 8003c04:	1891      	adds	r1, r2, r2
 8003c06:	61b9      	str	r1, [r7, #24]
 8003c08:	415b      	adcs	r3, r3
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c10:	4641      	mov	r1, r8
 8003c12:	1851      	adds	r1, r2, r1
 8003c14:	6139      	str	r1, [r7, #16]
 8003c16:	4649      	mov	r1, r9
 8003c18:	414b      	adcs	r3, r1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c28:	4659      	mov	r1, fp
 8003c2a:	00cb      	lsls	r3, r1, #3
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c32:	4651      	mov	r1, sl
 8003c34:	00ca      	lsls	r2, r1, #3
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c44:	464b      	mov	r3, r9
 8003c46:	460a      	mov	r2, r1
 8003c48:	eb42 0303 	adc.w	r3, r2, r3
 8003c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c68:	4649      	mov	r1, r9
 8003c6a:	008b      	lsls	r3, r1, #2
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c72:	4641      	mov	r1, r8
 8003c74:	008a      	lsls	r2, r1, #2
 8003c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c7a:	f7fc fb19 	bl	80002b0 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <UART_SetConfig+0x4e4>)
 8003c86:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2264      	movs	r2, #100	@ 0x64
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	1acb      	subs	r3, r1, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	@ 0x32
 8003c98:	4a33      	ldr	r2, [pc, #204]	@ (8003d68 <UART_SetConfig+0x4e4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca4:	441c      	add	r4, r3
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cae:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	1891      	adds	r1, r2, r2
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	415b      	adcs	r3, r3
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	1851      	adds	r1, r2, r1
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	4649      	mov	r1, r9
 8003ccc:	414b      	adcs	r3, r1
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cdc:	4659      	mov	r1, fp
 8003cde:	00cb      	lsls	r3, r1, #3
 8003ce0:	4651      	mov	r1, sl
 8003ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	00ca      	lsls	r2, r1, #3
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	eb42 0303 	adc.w	r3, r2, r3
 8003cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d18:	4649      	mov	r1, r9
 8003d1a:	008b      	lsls	r3, r1, #2
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d22:	4641      	mov	r1, r8
 8003d24:	008a      	lsls	r2, r1, #2
 8003d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d2a:	f7fc fac1 	bl	80002b0 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <UART_SetConfig+0x4e4>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	@ 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	3332      	adds	r3, #50	@ 0x32
 8003d46:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <UART_SetConfig+0x4e4>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4422      	add	r2, r4
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d62:	46bd      	mov	sp, r7
 8003d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d68:	51eb851f 	.word	0x51eb851f

08003d6c <std>:
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
 8003d72:	e9c0 3300 	strd	r3, r3, [r0]
 8003d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d7a:	6083      	str	r3, [r0, #8]
 8003d7c:	8181      	strh	r1, [r0, #12]
 8003d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d80:	81c2      	strh	r2, [r0, #14]
 8003d82:	6183      	str	r3, [r0, #24]
 8003d84:	4619      	mov	r1, r3
 8003d86:	2208      	movs	r2, #8
 8003d88:	305c      	adds	r0, #92	@ 0x5c
 8003d8a:	f000 f906 	bl	8003f9a <memset>
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <std+0x58>)
 8003d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <std+0x5c>)
 8003d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <std+0x60>)
 8003d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <std+0x64>)
 8003d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <std+0x68>)
 8003da0:	6224      	str	r4, [r4, #32]
 8003da2:	429c      	cmp	r4, r3
 8003da4:	d006      	beq.n	8003db4 <std+0x48>
 8003da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003daa:	4294      	cmp	r4, r2
 8003dac:	d002      	beq.n	8003db4 <std+0x48>
 8003dae:	33d0      	adds	r3, #208	@ 0xd0
 8003db0:	429c      	cmp	r4, r3
 8003db2:	d105      	bne.n	8003dc0 <std+0x54>
 8003db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dbc:	f000 b966 	b.w	800408c <__retarget_lock_init_recursive>
 8003dc0:	bd10      	pop	{r4, pc}
 8003dc2:	bf00      	nop
 8003dc4:	08003f15 	.word	0x08003f15
 8003dc8:	08003f37 	.word	0x08003f37
 8003dcc:	08003f6f 	.word	0x08003f6f
 8003dd0:	08003f93 	.word	0x08003f93
 8003dd4:	20000164 	.word	0x20000164

08003dd8 <stdio_exit_handler>:
 8003dd8:	4a02      	ldr	r2, [pc, #8]	@ (8003de4 <stdio_exit_handler+0xc>)
 8003dda:	4903      	ldr	r1, [pc, #12]	@ (8003de8 <stdio_exit_handler+0x10>)
 8003ddc:	4803      	ldr	r0, [pc, #12]	@ (8003dec <stdio_exit_handler+0x14>)
 8003dde:	f000 b869 	b.w	8003eb4 <_fwalk_sglue>
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c
 8003de8:	08004929 	.word	0x08004929
 8003dec:	2000001c 	.word	0x2000001c

08003df0 <cleanup_stdio>:
 8003df0:	6841      	ldr	r1, [r0, #4]
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <cleanup_stdio+0x34>)
 8003df4:	4299      	cmp	r1, r3
 8003df6:	b510      	push	{r4, lr}
 8003df8:	4604      	mov	r4, r0
 8003dfa:	d001      	beq.n	8003e00 <cleanup_stdio+0x10>
 8003dfc:	f000 fd94 	bl	8004928 <_fflush_r>
 8003e00:	68a1      	ldr	r1, [r4, #8]
 8003e02:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <cleanup_stdio+0x38>)
 8003e04:	4299      	cmp	r1, r3
 8003e06:	d002      	beq.n	8003e0e <cleanup_stdio+0x1e>
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 fd8d 	bl	8004928 <_fflush_r>
 8003e0e:	68e1      	ldr	r1, [r4, #12]
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <cleanup_stdio+0x3c>)
 8003e12:	4299      	cmp	r1, r3
 8003e14:	d004      	beq.n	8003e20 <cleanup_stdio+0x30>
 8003e16:	4620      	mov	r0, r4
 8003e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e1c:	f000 bd84 	b.w	8004928 <_fflush_r>
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	bf00      	nop
 8003e24:	20000164 	.word	0x20000164
 8003e28:	200001cc 	.word	0x200001cc
 8003e2c:	20000234 	.word	0x20000234

08003e30 <global_stdio_init.part.0>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <global_stdio_init.part.0+0x30>)
 8003e34:	4c0b      	ldr	r4, [pc, #44]	@ (8003e64 <global_stdio_init.part.0+0x34>)
 8003e36:	4a0c      	ldr	r2, [pc, #48]	@ (8003e68 <global_stdio_init.part.0+0x38>)
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2104      	movs	r1, #4
 8003e40:	f7ff ff94 	bl	8003d6c <std>
 8003e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e48:	2201      	movs	r2, #1
 8003e4a:	2109      	movs	r1, #9
 8003e4c:	f7ff ff8e 	bl	8003d6c <std>
 8003e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e54:	2202      	movs	r2, #2
 8003e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5a:	2112      	movs	r1, #18
 8003e5c:	f7ff bf86 	b.w	8003d6c <std>
 8003e60:	2000029c 	.word	0x2000029c
 8003e64:	20000164 	.word	0x20000164
 8003e68:	08003dd9 	.word	0x08003dd9

08003e6c <__sfp_lock_acquire>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__sfp_lock_acquire+0x8>)
 8003e6e:	f000 b90e 	b.w	800408e <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	200002a5 	.word	0x200002a5

08003e78 <__sfp_lock_release>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__sfp_lock_release+0x8>)
 8003e7a:	f000 b909 	b.w	8004090 <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	200002a5 	.word	0x200002a5

08003e84 <__sinit>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	f7ff fff0 	bl	8003e6c <__sfp_lock_acquire>
 8003e8c:	6a23      	ldr	r3, [r4, #32]
 8003e8e:	b11b      	cbz	r3, 8003e98 <__sinit+0x14>
 8003e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e94:	f7ff bff0 	b.w	8003e78 <__sfp_lock_release>
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <__sinit+0x28>)
 8003e9a:	6223      	str	r3, [r4, #32]
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <__sinit+0x2c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f5      	bne.n	8003e90 <__sinit+0xc>
 8003ea4:	f7ff ffc4 	bl	8003e30 <global_stdio_init.part.0>
 8003ea8:	e7f2      	b.n	8003e90 <__sinit+0xc>
 8003eaa:	bf00      	nop
 8003eac:	08003df1 	.word	0x08003df1
 8003eb0:	2000029c 	.word	0x2000029c

08003eb4 <_fwalk_sglue>:
 8003eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb8:	4607      	mov	r7, r0
 8003eba:	4688      	mov	r8, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ec8:	d505      	bpl.n	8003ed6 <_fwalk_sglue+0x22>
 8003eca:	6824      	ldr	r4, [r4, #0]
 8003ecc:	2c00      	cmp	r4, #0
 8003ece:	d1f7      	bne.n	8003ec0 <_fwalk_sglue+0xc>
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d907      	bls.n	8003eec <_fwalk_sglue+0x38>
 8003edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	d003      	beq.n	8003eec <_fwalk_sglue+0x38>
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	4306      	orrs	r6, r0
 8003eec:	3568      	adds	r5, #104	@ 0x68
 8003eee:	e7e9      	b.n	8003ec4 <_fwalk_sglue+0x10>

08003ef0 <iprintf>:
 8003ef0:	b40f      	push	{r0, r1, r2, r3}
 8003ef2:	b507      	push	{r0, r1, r2, lr}
 8003ef4:	4906      	ldr	r1, [pc, #24]	@ (8003f10 <iprintf+0x20>)
 8003ef6:	ab04      	add	r3, sp, #16
 8003ef8:	6808      	ldr	r0, [r1, #0]
 8003efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003efe:	6881      	ldr	r1, [r0, #8]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	f000 f9e9 	bl	80042d8 <_vfiprintf_r>
 8003f06:	b003      	add	sp, #12
 8003f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f0c:	b004      	add	sp, #16
 8003f0e:	4770      	bx	lr
 8003f10:	20000018 	.word	0x20000018

08003f14 <__sread>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	460c      	mov	r4, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	f000 f868 	bl	8003ff0 <_read_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	bfab      	itete	ge
 8003f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f26:	89a3      	ldrhlt	r3, [r4, #12]
 8003f28:	181b      	addge	r3, r3, r0
 8003f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f2e:	bfac      	ite	ge
 8003f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f32:	81a3      	strhlt	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__swrite>:
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	4605      	mov	r5, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4616      	mov	r6, r2
 8003f46:	d505      	bpl.n	8003f54 <__swrite+0x1e>
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f000 f83c 	bl	8003fcc <_lseek_r>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	4632      	mov	r2, r6
 8003f62:	463b      	mov	r3, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	f000 b853 	b.w	8004014 <_write_r>

08003f6e <__sseek>:
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 f829 	bl	8003fcc <_lseek_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	bf15      	itete	ne
 8003f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f8a:	81a3      	strheq	r3, [r4, #12]
 8003f8c:	bf18      	it	ne
 8003f8e:	81a3      	strhne	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__sclose>:
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 b809 	b.w	8003fac <_close_r>

08003f9a <memset>:
 8003f9a:	4402      	add	r2, r0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <memset+0xa>
 8003fa2:	4770      	bx	lr
 8003fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa8:	e7f9      	b.n	8003f9e <memset+0x4>
	...

08003fac <_close_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d06      	ldr	r5, [pc, #24]	@ (8003fc8 <_close_r+0x1c>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fc fe92 	bl	8000ce0 <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_close_r+0x1a>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_close_r+0x1a>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	200002a0 	.word	0x200002a0

08003fcc <_lseek_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	@ (8003fec <_lseek_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fc fea7 	bl	8000d2e <_lseek>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_lseek_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_lseek_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	200002a0 	.word	0x200002a0

08003ff0 <_read_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	@ (8004010 <_read_r+0x20>)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7fc fe35 	bl	8000c6e <_read>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_read_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_read_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	200002a0 	.word	0x200002a0

08004014 <_write_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	@ (8004034 <_write_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fc fe40 	bl	8000ca8 <_write>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_write_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_write_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200002a0 	.word	0x200002a0

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	@ (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000018 	.word	0x20000018

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	@ (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	@ (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	@ (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	@ (8004088 <__libc_init_array+0x44>)
 8004058:	f000 fdb6 	bl	8004bc8 <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004c58 	.word	0x08004c58
 8004080:	08004c58 	.word	0x08004c58
 8004084:	08004c58 	.word	0x08004c58
 8004088:	08004c5c 	.word	0x08004c5c

0800408c <__retarget_lock_init_recursive>:
 800408c:	4770      	bx	lr

0800408e <__retarget_lock_acquire_recursive>:
 800408e:	4770      	bx	lr

08004090 <__retarget_lock_release_recursive>:
 8004090:	4770      	bx	lr
	...

08004094 <_free_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4605      	mov	r5, r0
 8004098:	2900      	cmp	r1, #0
 800409a:	d041      	beq.n	8004120 <_free_r+0x8c>
 800409c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a0:	1f0c      	subs	r4, r1, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	18e4      	addlt	r4, r4, r3
 80040a8:	f000 f8e0 	bl	800426c <__malloc_lock>
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <_free_r+0x90>)
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	b933      	cbnz	r3, 80040c0 <_free_r+0x2c>
 80040b2:	6063      	str	r3, [r4, #4]
 80040b4:	6014      	str	r4, [r2, #0]
 80040b6:	4628      	mov	r0, r5
 80040b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040bc:	f000 b8dc 	b.w	8004278 <__malloc_unlock>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d908      	bls.n	80040d6 <_free_r+0x42>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	1821      	adds	r1, r4, r0
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf01      	itttt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	1809      	addeq	r1, r1, r0
 80040d2:	6021      	streq	r1, [r4, #0]
 80040d4:	e7ed      	b.n	80040b2 <_free_r+0x1e>
 80040d6:	461a      	mov	r2, r3
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b10b      	cbz	r3, 80040e0 <_free_r+0x4c>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d9fa      	bls.n	80040d6 <_free_r+0x42>
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	1850      	adds	r0, r2, r1
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d10b      	bne.n	8004100 <_free_r+0x6c>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	4401      	add	r1, r0
 80040ec:	1850      	adds	r0, r2, r1
 80040ee:	4283      	cmp	r3, r0
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	d1e0      	bne.n	80040b6 <_free_r+0x22>
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6053      	str	r3, [r2, #4]
 80040fa:	4408      	add	r0, r1
 80040fc:	6010      	str	r0, [r2, #0]
 80040fe:	e7da      	b.n	80040b6 <_free_r+0x22>
 8004100:	d902      	bls.n	8004108 <_free_r+0x74>
 8004102:	230c      	movs	r3, #12
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	e7d6      	b.n	80040b6 <_free_r+0x22>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	1821      	adds	r1, r4, r0
 800410c:	428b      	cmp	r3, r1
 800410e:	bf04      	itt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	bf04      	itt	eq
 8004118:	1809      	addeq	r1, r1, r0
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	6054      	str	r4, [r2, #4]
 800411e:	e7ca      	b.n	80040b6 <_free_r+0x22>
 8004120:	bd38      	pop	{r3, r4, r5, pc}
 8004122:	bf00      	nop
 8004124:	200002ac 	.word	0x200002ac

08004128 <sbrk_aligned>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0f      	ldr	r6, [pc, #60]	@ (8004168 <sbrk_aligned+0x40>)
 800412c:	460c      	mov	r4, r1
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	4605      	mov	r5, r0
 8004132:	b911      	cbnz	r1, 800413a <sbrk_aligned+0x12>
 8004134:	f000 fcb4 	bl	8004aa0 <_sbrk_r>
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fcaf 	bl	8004aa0 <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d103      	bne.n	800414e <sbrk_aligned+0x26>
 8004146:	f04f 34ff 	mov.w	r4, #4294967295
 800414a:	4620      	mov	r0, r4
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d0f8      	beq.n	800414a <sbrk_aligned+0x22>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fca0 	bl	8004aa0 <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d1f2      	bne.n	800414a <sbrk_aligned+0x22>
 8004164:	e7ef      	b.n	8004146 <sbrk_aligned+0x1e>
 8004166:	bf00      	nop
 8004168:	200002a8 	.word	0x200002a8

0800416c <_malloc_r>:
 800416c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004170:	1ccd      	adds	r5, r1, #3
 8004172:	f025 0503 	bic.w	r5, r5, #3
 8004176:	3508      	adds	r5, #8
 8004178:	2d0c      	cmp	r5, #12
 800417a:	bf38      	it	cc
 800417c:	250c      	movcc	r5, #12
 800417e:	2d00      	cmp	r5, #0
 8004180:	4606      	mov	r6, r0
 8004182:	db01      	blt.n	8004188 <_malloc_r+0x1c>
 8004184:	42a9      	cmp	r1, r5
 8004186:	d904      	bls.n	8004192 <_malloc_r+0x26>
 8004188:	230c      	movs	r3, #12
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	2000      	movs	r0, #0
 800418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004268 <_malloc_r+0xfc>
 8004196:	f000 f869 	bl	800426c <__malloc_lock>
 800419a:	f8d8 3000 	ldr.w	r3, [r8]
 800419e:	461c      	mov	r4, r3
 80041a0:	bb44      	cbnz	r4, 80041f4 <_malloc_r+0x88>
 80041a2:	4629      	mov	r1, r5
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff ffbf 	bl	8004128 <sbrk_aligned>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	4604      	mov	r4, r0
 80041ae:	d158      	bne.n	8004262 <_malloc_r+0xf6>
 80041b0:	f8d8 4000 	ldr.w	r4, [r8]
 80041b4:	4627      	mov	r7, r4
 80041b6:	2f00      	cmp	r7, #0
 80041b8:	d143      	bne.n	8004242 <_malloc_r+0xd6>
 80041ba:	2c00      	cmp	r4, #0
 80041bc:	d04b      	beq.n	8004256 <_malloc_r+0xea>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	4639      	mov	r1, r7
 80041c2:	4630      	mov	r0, r6
 80041c4:	eb04 0903 	add.w	r9, r4, r3
 80041c8:	f000 fc6a 	bl	8004aa0 <_sbrk_r>
 80041cc:	4581      	cmp	r9, r0
 80041ce:	d142      	bne.n	8004256 <_malloc_r+0xea>
 80041d0:	6821      	ldr	r1, [r4, #0]
 80041d2:	1a6d      	subs	r5, r5, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff ffa6 	bl	8004128 <sbrk_aligned>
 80041dc:	3001      	adds	r0, #1
 80041de:	d03a      	beq.n	8004256 <_malloc_r+0xea>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	442b      	add	r3, r5
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	bb62      	cbnz	r2, 8004248 <_malloc_r+0xdc>
 80041ee:	f8c8 7000 	str.w	r7, [r8]
 80041f2:	e00f      	b.n	8004214 <_malloc_r+0xa8>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	1b52      	subs	r2, r2, r5
 80041f8:	d420      	bmi.n	800423c <_malloc_r+0xd0>
 80041fa:	2a0b      	cmp	r2, #11
 80041fc:	d917      	bls.n	800422e <_malloc_r+0xc2>
 80041fe:	1961      	adds	r1, r4, r5
 8004200:	42a3      	cmp	r3, r4
 8004202:	6025      	str	r5, [r4, #0]
 8004204:	bf18      	it	ne
 8004206:	6059      	strne	r1, [r3, #4]
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	bf08      	it	eq
 800420c:	f8c8 1000 	streq.w	r1, [r8]
 8004210:	5162      	str	r2, [r4, r5]
 8004212:	604b      	str	r3, [r1, #4]
 8004214:	4630      	mov	r0, r6
 8004216:	f000 f82f 	bl	8004278 <__malloc_unlock>
 800421a:	f104 000b 	add.w	r0, r4, #11
 800421e:	1d23      	adds	r3, r4, #4
 8004220:	f020 0007 	bic.w	r0, r0, #7
 8004224:	1ac2      	subs	r2, r0, r3
 8004226:	bf1c      	itt	ne
 8004228:	1a1b      	subne	r3, r3, r0
 800422a:	50a3      	strne	r3, [r4, r2]
 800422c:	e7af      	b.n	800418e <_malloc_r+0x22>
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	42a3      	cmp	r3, r4
 8004232:	bf0c      	ite	eq
 8004234:	f8c8 2000 	streq.w	r2, [r8]
 8004238:	605a      	strne	r2, [r3, #4]
 800423a:	e7eb      	b.n	8004214 <_malloc_r+0xa8>
 800423c:	4623      	mov	r3, r4
 800423e:	6864      	ldr	r4, [r4, #4]
 8004240:	e7ae      	b.n	80041a0 <_malloc_r+0x34>
 8004242:	463c      	mov	r4, r7
 8004244:	687f      	ldr	r7, [r7, #4]
 8004246:	e7b6      	b.n	80041b6 <_malloc_r+0x4a>
 8004248:	461a      	mov	r2, r3
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	42a3      	cmp	r3, r4
 800424e:	d1fb      	bne.n	8004248 <_malloc_r+0xdc>
 8004250:	2300      	movs	r3, #0
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e7de      	b.n	8004214 <_malloc_r+0xa8>
 8004256:	230c      	movs	r3, #12
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	4630      	mov	r0, r6
 800425c:	f000 f80c 	bl	8004278 <__malloc_unlock>
 8004260:	e794      	b.n	800418c <_malloc_r+0x20>
 8004262:	6005      	str	r5, [r0, #0]
 8004264:	e7d6      	b.n	8004214 <_malloc_r+0xa8>
 8004266:	bf00      	nop
 8004268:	200002ac 	.word	0x200002ac

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	@ (8004274 <__malloc_lock+0x8>)
 800426e:	f7ff bf0e 	b.w	800408e <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	200002a4 	.word	0x200002a4

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	@ (8004280 <__malloc_unlock+0x8>)
 800427a:	f7ff bf09 	b.w	8004090 <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	200002a4 	.word	0x200002a4

08004284 <__sfputc_r>:
 8004284:	6893      	ldr	r3, [r2, #8]
 8004286:	3b01      	subs	r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	b410      	push	{r4}
 800428c:	6093      	str	r3, [r2, #8]
 800428e:	da08      	bge.n	80042a2 <__sfputc_r+0x1e>
 8004290:	6994      	ldr	r4, [r2, #24]
 8004292:	42a3      	cmp	r3, r4
 8004294:	db01      	blt.n	800429a <__sfputc_r+0x16>
 8004296:	290a      	cmp	r1, #10
 8004298:	d103      	bne.n	80042a2 <__sfputc_r+0x1e>
 800429a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429e:	f000 bb6b 	b.w	8004978 <__swbuf_r>
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	1c58      	adds	r0, r3, #1
 80042a6:	6010      	str	r0, [r2, #0]
 80042a8:	7019      	strb	r1, [r3, #0]
 80042aa:	4608      	mov	r0, r1
 80042ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <__sfputs_r>:
 80042b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b4:	4606      	mov	r6, r0
 80042b6:	460f      	mov	r7, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	18d5      	adds	r5, r2, r3
 80042bc:	42ac      	cmp	r4, r5
 80042be:	d101      	bne.n	80042c4 <__sfputs_r+0x12>
 80042c0:	2000      	movs	r0, #0
 80042c2:	e007      	b.n	80042d4 <__sfputs_r+0x22>
 80042c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c8:	463a      	mov	r2, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff ffda 	bl	8004284 <__sfputc_r>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d1f3      	bne.n	80042bc <__sfputs_r+0xa>
 80042d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042d8 <_vfiprintf_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	460d      	mov	r5, r1
 80042de:	b09d      	sub	sp, #116	@ 0x74
 80042e0:	4614      	mov	r4, r2
 80042e2:	4698      	mov	r8, r3
 80042e4:	4606      	mov	r6, r0
 80042e6:	b118      	cbz	r0, 80042f0 <_vfiprintf_r+0x18>
 80042e8:	6a03      	ldr	r3, [r0, #32]
 80042ea:	b90b      	cbnz	r3, 80042f0 <_vfiprintf_r+0x18>
 80042ec:	f7ff fdca 	bl	8003e84 <__sinit>
 80042f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d405      	bmi.n	8004302 <_vfiprintf_r+0x2a>
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	059a      	lsls	r2, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_vfiprintf_r+0x2a>
 80042fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042fe:	f7ff fec6 	bl	800408e <__retarget_lock_acquire_recursive>
 8004302:	89ab      	ldrh	r3, [r5, #12]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	d501      	bpl.n	800430c <_vfiprintf_r+0x34>
 8004308:	692b      	ldr	r3, [r5, #16]
 800430a:	b99b      	cbnz	r3, 8004334 <_vfiprintf_r+0x5c>
 800430c:	4629      	mov	r1, r5
 800430e:	4630      	mov	r0, r6
 8004310:	f000 fb70 	bl	80049f4 <__swsetup_r>
 8004314:	b170      	cbz	r0, 8004334 <_vfiprintf_r+0x5c>
 8004316:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004318:	07dc      	lsls	r4, r3, #31
 800431a:	d504      	bpl.n	8004326 <_vfiprintf_r+0x4e>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b01d      	add	sp, #116	@ 0x74
 8004322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	0598      	lsls	r0, r3, #22
 800432a:	d4f7      	bmi.n	800431c <_vfiprintf_r+0x44>
 800432c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800432e:	f7ff feaf 	bl	8004090 <__retarget_lock_release_recursive>
 8004332:	e7f3      	b.n	800431c <_vfiprintf_r+0x44>
 8004334:	2300      	movs	r3, #0
 8004336:	9309      	str	r3, [sp, #36]	@ 0x24
 8004338:	2320      	movs	r3, #32
 800433a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800433e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004342:	2330      	movs	r3, #48	@ 0x30
 8004344:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044f4 <_vfiprintf_r+0x21c>
 8004348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800434c:	f04f 0901 	mov.w	r9, #1
 8004350:	4623      	mov	r3, r4
 8004352:	469a      	mov	sl, r3
 8004354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004358:	b10a      	cbz	r2, 800435e <_vfiprintf_r+0x86>
 800435a:	2a25      	cmp	r2, #37	@ 0x25
 800435c:	d1f9      	bne.n	8004352 <_vfiprintf_r+0x7a>
 800435e:	ebba 0b04 	subs.w	fp, sl, r4
 8004362:	d00b      	beq.n	800437c <_vfiprintf_r+0xa4>
 8004364:	465b      	mov	r3, fp
 8004366:	4622      	mov	r2, r4
 8004368:	4629      	mov	r1, r5
 800436a:	4630      	mov	r0, r6
 800436c:	f7ff ffa1 	bl	80042b2 <__sfputs_r>
 8004370:	3001      	adds	r0, #1
 8004372:	f000 80a7 	beq.w	80044c4 <_vfiprintf_r+0x1ec>
 8004376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004378:	445a      	add	r2, fp
 800437a:	9209      	str	r2, [sp, #36]	@ 0x24
 800437c:	f89a 3000 	ldrb.w	r3, [sl]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 809f 	beq.w	80044c4 <_vfiprintf_r+0x1ec>
 8004386:	2300      	movs	r3, #0
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004390:	f10a 0a01 	add.w	sl, sl, #1
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800439c:	931a      	str	r3, [sp, #104]	@ 0x68
 800439e:	4654      	mov	r4, sl
 80043a0:	2205      	movs	r2, #5
 80043a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a6:	4853      	ldr	r0, [pc, #332]	@ (80044f4 <_vfiprintf_r+0x21c>)
 80043a8:	f7fb ff32 	bl	8000210 <memchr>
 80043ac:	9a04      	ldr	r2, [sp, #16]
 80043ae:	b9d8      	cbnz	r0, 80043e8 <_vfiprintf_r+0x110>
 80043b0:	06d1      	lsls	r1, r2, #27
 80043b2:	bf44      	itt	mi
 80043b4:	2320      	movmi	r3, #32
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ba:	0713      	lsls	r3, r2, #28
 80043bc:	bf44      	itt	mi
 80043be:	232b      	movmi	r3, #43	@ 0x2b
 80043c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c4:	f89a 3000 	ldrb.w	r3, [sl]
 80043c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ca:	d015      	beq.n	80043f8 <_vfiprintf_r+0x120>
 80043cc:	9a07      	ldr	r2, [sp, #28]
 80043ce:	4654      	mov	r4, sl
 80043d0:	2000      	movs	r0, #0
 80043d2:	f04f 0c0a 	mov.w	ip, #10
 80043d6:	4621      	mov	r1, r4
 80043d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043dc:	3b30      	subs	r3, #48	@ 0x30
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d94b      	bls.n	800447a <_vfiprintf_r+0x1a2>
 80043e2:	b1b0      	cbz	r0, 8004412 <_vfiprintf_r+0x13a>
 80043e4:	9207      	str	r2, [sp, #28]
 80043e6:	e014      	b.n	8004412 <_vfiprintf_r+0x13a>
 80043e8:	eba0 0308 	sub.w	r3, r0, r8
 80043ec:	fa09 f303 	lsl.w	r3, r9, r3
 80043f0:	4313      	orrs	r3, r2
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	46a2      	mov	sl, r4
 80043f6:	e7d2      	b.n	800439e <_vfiprintf_r+0xc6>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d19      	adds	r1, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9103      	str	r1, [sp, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfbb      	ittet	lt
 8004404:	425b      	neglt	r3, r3
 8004406:	f042 0202 	orrlt.w	r2, r2, #2
 800440a:	9307      	strge	r3, [sp, #28]
 800440c:	9307      	strlt	r3, [sp, #28]
 800440e:	bfb8      	it	lt
 8004410:	9204      	strlt	r2, [sp, #16]
 8004412:	7823      	ldrb	r3, [r4, #0]
 8004414:	2b2e      	cmp	r3, #46	@ 0x2e
 8004416:	d10a      	bne.n	800442e <_vfiprintf_r+0x156>
 8004418:	7863      	ldrb	r3, [r4, #1]
 800441a:	2b2a      	cmp	r3, #42	@ 0x2a
 800441c:	d132      	bne.n	8004484 <_vfiprintf_r+0x1ac>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	9203      	str	r2, [sp, #12]
 8004426:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800442a:	3402      	adds	r4, #2
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004504 <_vfiprintf_r+0x22c>
 8004432:	7821      	ldrb	r1, [r4, #0]
 8004434:	2203      	movs	r2, #3
 8004436:	4650      	mov	r0, sl
 8004438:	f7fb feea 	bl	8000210 <memchr>
 800443c:	b138      	cbz	r0, 800444e <_vfiprintf_r+0x176>
 800443e:	9b04      	ldr	r3, [sp, #16]
 8004440:	eba0 000a 	sub.w	r0, r0, sl
 8004444:	2240      	movs	r2, #64	@ 0x40
 8004446:	4082      	lsls	r2, r0
 8004448:	4313      	orrs	r3, r2
 800444a:	3401      	adds	r4, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004452:	4829      	ldr	r0, [pc, #164]	@ (80044f8 <_vfiprintf_r+0x220>)
 8004454:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004458:	2206      	movs	r2, #6
 800445a:	f7fb fed9 	bl	8000210 <memchr>
 800445e:	2800      	cmp	r0, #0
 8004460:	d03f      	beq.n	80044e2 <_vfiprintf_r+0x20a>
 8004462:	4b26      	ldr	r3, [pc, #152]	@ (80044fc <_vfiprintf_r+0x224>)
 8004464:	bb1b      	cbnz	r3, 80044ae <_vfiprintf_r+0x1d6>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	3307      	adds	r3, #7
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	3308      	adds	r3, #8
 8004470:	9303      	str	r3, [sp, #12]
 8004472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004474:	443b      	add	r3, r7
 8004476:	9309      	str	r3, [sp, #36]	@ 0x24
 8004478:	e76a      	b.n	8004350 <_vfiprintf_r+0x78>
 800447a:	fb0c 3202 	mla	r2, ip, r2, r3
 800447e:	460c      	mov	r4, r1
 8004480:	2001      	movs	r0, #1
 8004482:	e7a8      	b.n	80043d6 <_vfiprintf_r+0xfe>
 8004484:	2300      	movs	r3, #0
 8004486:	3401      	adds	r4, #1
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	4619      	mov	r1, r3
 800448c:	f04f 0c0a 	mov.w	ip, #10
 8004490:	4620      	mov	r0, r4
 8004492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004496:	3a30      	subs	r2, #48	@ 0x30
 8004498:	2a09      	cmp	r2, #9
 800449a:	d903      	bls.n	80044a4 <_vfiprintf_r+0x1cc>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0c6      	beq.n	800442e <_vfiprintf_r+0x156>
 80044a0:	9105      	str	r1, [sp, #20]
 80044a2:	e7c4      	b.n	800442e <_vfiprintf_r+0x156>
 80044a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a8:	4604      	mov	r4, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	e7f0      	b.n	8004490 <_vfiprintf_r+0x1b8>
 80044ae:	ab03      	add	r3, sp, #12
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	462a      	mov	r2, r5
 80044b4:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <_vfiprintf_r+0x228>)
 80044b6:	a904      	add	r1, sp, #16
 80044b8:	4630      	mov	r0, r6
 80044ba:	f3af 8000 	nop.w
 80044be:	4607      	mov	r7, r0
 80044c0:	1c78      	adds	r0, r7, #1
 80044c2:	d1d6      	bne.n	8004472 <_vfiprintf_r+0x19a>
 80044c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c6:	07d9      	lsls	r1, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_vfiprintf_r+0x1fe>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	059a      	lsls	r2, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_vfiprintf_r+0x1fe>
 80044d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d2:	f7ff fddd 	bl	8004090 <__retarget_lock_release_recursive>
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	065b      	lsls	r3, r3, #25
 80044da:	f53f af1f 	bmi.w	800431c <_vfiprintf_r+0x44>
 80044de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044e0:	e71e      	b.n	8004320 <_vfiprintf_r+0x48>
 80044e2:	ab03      	add	r3, sp, #12
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <_vfiprintf_r+0x228>)
 80044ea:	a904      	add	r1, sp, #16
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f879 	bl	80045e4 <_printf_i>
 80044f2:	e7e4      	b.n	80044be <_vfiprintf_r+0x1e6>
 80044f4:	08004c1c 	.word	0x08004c1c
 80044f8:	08004c26 	.word	0x08004c26
 80044fc:	00000000 	.word	0x00000000
 8004500:	080042b3 	.word	0x080042b3
 8004504:	08004c22 	.word	0x08004c22

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4698      	mov	r8, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004518:	4293      	cmp	r3, r2
 800451a:	bfb8      	it	lt
 800451c:	4613      	movlt	r3, r2
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004524:	4607      	mov	r7, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc26      	bgt.n	800459e <_printf_common+0x96>
 8004550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	3b00      	subs	r3, #0
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42b      	bmi.n	80045b8 <_printf_common+0xb0>
 8004560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004564:	4641      	mov	r1, r8
 8004566:	4638      	mov	r0, r7
 8004568:	47c8      	blx	r9
 800456a:	3001      	adds	r0, #1
 800456c:	d01e      	beq.n	80045ac <_printf_common+0xa4>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf02      	ittt	eq
 800457a:	68e5      	ldreq	r5, [r4, #12]
 800457c:	6833      	ldreq	r3, [r6, #0]
 800457e:	1aed      	subeq	r5, r5, r3
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	bf0c      	ite	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	2500      	movne	r5, #0
 800458a:	4293      	cmp	r3, r2
 800458c:	bfc4      	itt	gt
 800458e:	1a9b      	subgt	r3, r3, r2
 8004590:	18ed      	addgt	r5, r5, r3
 8004592:	2600      	movs	r6, #0
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xc8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xa8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4641      	mov	r1, r8
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c8      	blx	r9
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xac>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c6      	b.n	8004546 <_printf_common+0x3e>
 80045b8:	18e1      	adds	r1, r4, r3
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	2030      	movs	r0, #48	@ 0x30
 80045be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045c2:	4422      	add	r2, r4
 80045c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7c7      	b.n	8004560 <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4641      	mov	r1, r8
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa4>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x8e>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045ec:	2f78      	cmp	r7, #120	@ 0x78
 80045ee:	4691      	mov	r9, r2
 80045f0:	4680      	mov	r8, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	469a      	mov	sl, r3
 80045f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	@ 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d1 	beq.w	80047a8 <_printf_i+0x1c4>
 8004606:	2f58      	cmp	r7, #88	@ 0x58
 8004608:	f000 80b8 	beq.w	800477c <_printf_i+0x198>
 800460c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	@ (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	0800478f 	.word	0x0800478f
 8004654:	080046bb 	.word	0x080046bb
 8004658:	08004749 	.word	0x08004749
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047b1 	.word	0x080047b1
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046bb 	.word	0x080046bb
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004751 	.word	0x08004751
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6032      	str	r2, [r6, #0]
 8004684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e09c      	b.n	80047ca <_printf_i+0x1e6>
 8004690:	6833      	ldr	r3, [r6, #0]
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	1d19      	adds	r1, r3, #4
 8004696:	6031      	str	r1, [r6, #0]
 8004698:	0606      	lsls	r6, r0, #24
 800469a:	d501      	bpl.n	80046a0 <_printf_i+0xbc>
 800469c:	681d      	ldr	r5, [r3, #0]
 800469e:	e003      	b.n	80046a8 <_printf_i+0xc4>
 80046a0:	0645      	lsls	r5, r0, #25
 80046a2:	d5fb      	bpl.n	800469c <_printf_i+0xb8>
 80046a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	da03      	bge.n	80046b4 <_printf_i+0xd0>
 80046ac:	232d      	movs	r3, #45	@ 0x2d
 80046ae:	426d      	negs	r5, r5
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b4:	4858      	ldr	r0, [pc, #352]	@ (8004818 <_printf_i+0x234>)
 80046b6:	230a      	movs	r3, #10
 80046b8:	e011      	b.n	80046de <_printf_i+0xfa>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	0608      	lsls	r0, r1, #24
 80046c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046c4:	d402      	bmi.n	80046cc <_printf_i+0xe8>
 80046c6:	0649      	lsls	r1, r1, #25
 80046c8:	bf48      	it	mi
 80046ca:	b2ad      	uxthmi	r5, r5
 80046cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ce:	4852      	ldr	r0, [pc, #328]	@ (8004818 <_printf_i+0x234>)
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	bf14      	ite	ne
 80046d4:	230a      	movne	r3, #10
 80046d6:	2308      	moveq	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046de:	6866      	ldr	r6, [r4, #4]
 80046e0:	60a6      	str	r6, [r4, #8]
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	db05      	blt.n	80046f2 <_printf_i+0x10e>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	432e      	orrs	r6, r5
 80046ea:	f021 0104 	bic.w	r1, r1, #4
 80046ee:	6021      	str	r1, [r4, #0]
 80046f0:	d04b      	beq.n	800478a <_printf_i+0x1a6>
 80046f2:	4616      	mov	r6, r2
 80046f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f8:	fb03 5711 	mls	r7, r3, r1, r5
 80046fc:	5dc7      	ldrb	r7, [r0, r7]
 80046fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004702:	462f      	mov	r7, r5
 8004704:	42bb      	cmp	r3, r7
 8004706:	460d      	mov	r5, r1
 8004708:	d9f4      	bls.n	80046f4 <_printf_i+0x110>
 800470a:	2b08      	cmp	r3, #8
 800470c:	d10b      	bne.n	8004726 <_printf_i+0x142>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07df      	lsls	r7, r3, #31
 8004712:	d508      	bpl.n	8004726 <_printf_i+0x142>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	6861      	ldr	r1, [r4, #4]
 8004718:	4299      	cmp	r1, r3
 800471a:	bfde      	ittt	le
 800471c:	2330      	movle	r3, #48	@ 0x30
 800471e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004722:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004726:	1b92      	subs	r2, r2, r6
 8004728:	6122      	str	r2, [r4, #16]
 800472a:	f8cd a000 	str.w	sl, [sp]
 800472e:	464b      	mov	r3, r9
 8004730:	aa03      	add	r2, sp, #12
 8004732:	4621      	mov	r1, r4
 8004734:	4640      	mov	r0, r8
 8004736:	f7ff fee7 	bl	8004508 <_printf_common>
 800473a:	3001      	adds	r0, #1
 800473c:	d14a      	bne.n	80047d4 <_printf_i+0x1f0>
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	b004      	add	sp, #16
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f043 0320 	orr.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	4832      	ldr	r0, [pc, #200]	@ (800481c <_printf_i+0x238>)
 8004752:	2778      	movs	r7, #120	@ 0x78
 8004754:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	061f      	lsls	r7, r3, #24
 800475e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004762:	d402      	bmi.n	800476a <_printf_i+0x186>
 8004764:	065f      	lsls	r7, r3, #25
 8004766:	bf48      	it	mi
 8004768:	b2ad      	uxthmi	r5, r5
 800476a:	6031      	str	r1, [r6, #0]
 800476c:	07d9      	lsls	r1, r3, #31
 800476e:	bf44      	itt	mi
 8004770:	f043 0320 	orrmi.w	r3, r3, #32
 8004774:	6023      	strmi	r3, [r4, #0]
 8004776:	b11d      	cbz	r5, 8004780 <_printf_i+0x19c>
 8004778:	2310      	movs	r3, #16
 800477a:	e7ad      	b.n	80046d8 <_printf_i+0xf4>
 800477c:	4826      	ldr	r0, [pc, #152]	@ (8004818 <_printf_i+0x234>)
 800477e:	e7e9      	b.n	8004754 <_printf_i+0x170>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	e7f6      	b.n	8004778 <_printf_i+0x194>
 800478a:	4616      	mov	r6, r2
 800478c:	e7bd      	b.n	800470a <_printf_i+0x126>
 800478e:	6833      	ldr	r3, [r6, #0]
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	6961      	ldr	r1, [r4, #20]
 8004794:	1d18      	adds	r0, r3, #4
 8004796:	6030      	str	r0, [r6, #0]
 8004798:	062e      	lsls	r6, r5, #24
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	d501      	bpl.n	80047a2 <_printf_i+0x1be>
 800479e:	6019      	str	r1, [r3, #0]
 80047a0:	e002      	b.n	80047a8 <_printf_i+0x1c4>
 80047a2:	0668      	lsls	r0, r5, #25
 80047a4:	d5fb      	bpl.n	800479e <_printf_i+0x1ba>
 80047a6:	8019      	strh	r1, [r3, #0]
 80047a8:	2300      	movs	r3, #0
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	4616      	mov	r6, r2
 80047ae:	e7bc      	b.n	800472a <_printf_i+0x146>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	6032      	str	r2, [r6, #0]
 80047b6:	681e      	ldr	r6, [r3, #0]
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4630      	mov	r0, r6
 80047be:	f7fb fd27 	bl	8000210 <memchr>
 80047c2:	b108      	cbz	r0, 80047c8 <_printf_i+0x1e4>
 80047c4:	1b80      	subs	r0, r0, r6
 80047c6:	6060      	str	r0, [r4, #4]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	2300      	movs	r3, #0
 80047ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d2:	e7aa      	b.n	800472a <_printf_i+0x146>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	4632      	mov	r2, r6
 80047d8:	4649      	mov	r1, r9
 80047da:	4640      	mov	r0, r8
 80047dc:	47d0      	blx	sl
 80047de:	3001      	adds	r0, #1
 80047e0:	d0ad      	beq.n	800473e <_printf_i+0x15a>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	079b      	lsls	r3, r3, #30
 80047e6:	d413      	bmi.n	8004810 <_printf_i+0x22c>
 80047e8:	68e0      	ldr	r0, [r4, #12]
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	4298      	cmp	r0, r3
 80047ee:	bfb8      	it	lt
 80047f0:	4618      	movlt	r0, r3
 80047f2:	e7a6      	b.n	8004742 <_printf_i+0x15e>
 80047f4:	2301      	movs	r3, #1
 80047f6:	4632      	mov	r2, r6
 80047f8:	4649      	mov	r1, r9
 80047fa:	4640      	mov	r0, r8
 80047fc:	47d0      	blx	sl
 80047fe:	3001      	adds	r0, #1
 8004800:	d09d      	beq.n	800473e <_printf_i+0x15a>
 8004802:	3501      	adds	r5, #1
 8004804:	68e3      	ldr	r3, [r4, #12]
 8004806:	9903      	ldr	r1, [sp, #12]
 8004808:	1a5b      	subs	r3, r3, r1
 800480a:	42ab      	cmp	r3, r5
 800480c:	dcf2      	bgt.n	80047f4 <_printf_i+0x210>
 800480e:	e7eb      	b.n	80047e8 <_printf_i+0x204>
 8004810:	2500      	movs	r5, #0
 8004812:	f104 0619 	add.w	r6, r4, #25
 8004816:	e7f5      	b.n	8004804 <_printf_i+0x220>
 8004818:	08004c2d 	.word	0x08004c2d
 800481c:	08004c3e 	.word	0x08004c3e

08004820 <__sflush_r>:
 8004820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004828:	0716      	lsls	r6, r2, #28
 800482a:	4605      	mov	r5, r0
 800482c:	460c      	mov	r4, r1
 800482e:	d454      	bmi.n	80048da <__sflush_r+0xba>
 8004830:	684b      	ldr	r3, [r1, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc02      	bgt.n	800483c <__sflush_r+0x1c>
 8004836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd48      	ble.n	80048ce <__sflush_r+0xae>
 800483c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800483e:	2e00      	cmp	r6, #0
 8004840:	d045      	beq.n	80048ce <__sflush_r+0xae>
 8004842:	2300      	movs	r3, #0
 8004844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004848:	682f      	ldr	r7, [r5, #0]
 800484a:	6a21      	ldr	r1, [r4, #32]
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	d030      	beq.n	80048b2 <__sflush_r+0x92>
 8004850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	0759      	lsls	r1, r3, #29
 8004856:	d505      	bpl.n	8004864 <__sflush_r+0x44>
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800485e:	b10b      	cbz	r3, 8004864 <__sflush_r+0x44>
 8004860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	d106      	bne.n	8004882 <__sflush_r+0x62>
 8004874:	6829      	ldr	r1, [r5, #0]
 8004876:	291d      	cmp	r1, #29
 8004878:	d82b      	bhi.n	80048d2 <__sflush_r+0xb2>
 800487a:	4a2a      	ldr	r2, [pc, #168]	@ (8004924 <__sflush_r+0x104>)
 800487c:	40ca      	lsrs	r2, r1
 800487e:	07d6      	lsls	r6, r2, #31
 8004880:	d527      	bpl.n	80048d2 <__sflush_r+0xb2>
 8004882:	2200      	movs	r2, #0
 8004884:	6062      	str	r2, [r4, #4]
 8004886:	04d9      	lsls	r1, r3, #19
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	d504      	bpl.n	8004898 <__sflush_r+0x78>
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	d101      	bne.n	8004896 <__sflush_r+0x76>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	b903      	cbnz	r3, 8004898 <__sflush_r+0x78>
 8004896:	6560      	str	r0, [r4, #84]	@ 0x54
 8004898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800489a:	602f      	str	r7, [r5, #0]
 800489c:	b1b9      	cbz	r1, 80048ce <__sflush_r+0xae>
 800489e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d002      	beq.n	80048ac <__sflush_r+0x8c>
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff fbf4 	bl	8004094 <_free_r>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80048b0:	e00d      	b.n	80048ce <__sflush_r+0xae>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	4602      	mov	r2, r0
 80048ba:	1c50      	adds	r0, r2, #1
 80048bc:	d1c9      	bne.n	8004852 <__sflush_r+0x32>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0c6      	beq.n	8004852 <__sflush_r+0x32>
 80048c4:	2b1d      	cmp	r3, #29
 80048c6:	d001      	beq.n	80048cc <__sflush_r+0xac>
 80048c8:	2b16      	cmp	r3, #22
 80048ca:	d11e      	bne.n	800490a <__sflush_r+0xea>
 80048cc:	602f      	str	r7, [r5, #0]
 80048ce:	2000      	movs	r0, #0
 80048d0:	e022      	b.n	8004918 <__sflush_r+0xf8>
 80048d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	e01b      	b.n	8004912 <__sflush_r+0xf2>
 80048da:	690f      	ldr	r7, [r1, #16]
 80048dc:	2f00      	cmp	r7, #0
 80048de:	d0f6      	beq.n	80048ce <__sflush_r+0xae>
 80048e0:	0793      	lsls	r3, r2, #30
 80048e2:	680e      	ldr	r6, [r1, #0]
 80048e4:	bf08      	it	eq
 80048e6:	694b      	ldreq	r3, [r1, #20]
 80048e8:	600f      	str	r7, [r1, #0]
 80048ea:	bf18      	it	ne
 80048ec:	2300      	movne	r3, #0
 80048ee:	eba6 0807 	sub.w	r8, r6, r7
 80048f2:	608b      	str	r3, [r1, #8]
 80048f4:	f1b8 0f00 	cmp.w	r8, #0
 80048f8:	dde9      	ble.n	80048ce <__sflush_r+0xae>
 80048fa:	6a21      	ldr	r1, [r4, #32]
 80048fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048fe:	4643      	mov	r3, r8
 8004900:	463a      	mov	r2, r7
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	2800      	cmp	r0, #0
 8004908:	dc08      	bgt.n	800491c <__sflush_r+0xfc>
 800490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	4407      	add	r7, r0
 800491e:	eba8 0800 	sub.w	r8, r8, r0
 8004922:	e7e7      	b.n	80048f4 <__sflush_r+0xd4>
 8004924:	20400001 	.word	0x20400001

08004928 <_fflush_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	690b      	ldr	r3, [r1, #16]
 800492c:	4605      	mov	r5, r0
 800492e:	460c      	mov	r4, r1
 8004930:	b913      	cbnz	r3, 8004938 <_fflush_r+0x10>
 8004932:	2500      	movs	r5, #0
 8004934:	4628      	mov	r0, r5
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	b118      	cbz	r0, 8004942 <_fflush_r+0x1a>
 800493a:	6a03      	ldr	r3, [r0, #32]
 800493c:	b90b      	cbnz	r3, 8004942 <_fflush_r+0x1a>
 800493e:	f7ff faa1 	bl	8003e84 <__sinit>
 8004942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f3      	beq.n	8004932 <_fflush_r+0xa>
 800494a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800494c:	07d0      	lsls	r0, r2, #31
 800494e:	d404      	bmi.n	800495a <_fflush_r+0x32>
 8004950:	0599      	lsls	r1, r3, #22
 8004952:	d402      	bmi.n	800495a <_fflush_r+0x32>
 8004954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004956:	f7ff fb9a 	bl	800408e <__retarget_lock_acquire_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	4621      	mov	r1, r4
 800495e:	f7ff ff5f 	bl	8004820 <__sflush_r>
 8004962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004964:	07da      	lsls	r2, r3, #31
 8004966:	4605      	mov	r5, r0
 8004968:	d4e4      	bmi.n	8004934 <_fflush_r+0xc>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d4e1      	bmi.n	8004934 <_fflush_r+0xc>
 8004970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004972:	f7ff fb8d 	bl	8004090 <__retarget_lock_release_recursive>
 8004976:	e7dd      	b.n	8004934 <_fflush_r+0xc>

08004978 <__swbuf_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	460e      	mov	r6, r1
 800497c:	4614      	mov	r4, r2
 800497e:	4605      	mov	r5, r0
 8004980:	b118      	cbz	r0, 800498a <__swbuf_r+0x12>
 8004982:	6a03      	ldr	r3, [r0, #32]
 8004984:	b90b      	cbnz	r3, 800498a <__swbuf_r+0x12>
 8004986:	f7ff fa7d 	bl	8003e84 <__sinit>
 800498a:	69a3      	ldr	r3, [r4, #24]
 800498c:	60a3      	str	r3, [r4, #8]
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	071a      	lsls	r2, r3, #28
 8004992:	d501      	bpl.n	8004998 <__swbuf_r+0x20>
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	b943      	cbnz	r3, 80049aa <__swbuf_r+0x32>
 8004998:	4621      	mov	r1, r4
 800499a:	4628      	mov	r0, r5
 800499c:	f000 f82a 	bl	80049f4 <__swsetup_r>
 80049a0:	b118      	cbz	r0, 80049aa <__swbuf_r+0x32>
 80049a2:	f04f 37ff 	mov.w	r7, #4294967295
 80049a6:	4638      	mov	r0, r7
 80049a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6922      	ldr	r2, [r4, #16]
 80049ae:	1a98      	subs	r0, r3, r2
 80049b0:	6963      	ldr	r3, [r4, #20]
 80049b2:	b2f6      	uxtb	r6, r6
 80049b4:	4283      	cmp	r3, r0
 80049b6:	4637      	mov	r7, r6
 80049b8:	dc05      	bgt.n	80049c6 <__swbuf_r+0x4e>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4628      	mov	r0, r5
 80049be:	f7ff ffb3 	bl	8004928 <_fflush_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d1ed      	bne.n	80049a2 <__swbuf_r+0x2a>
 80049c6:	68a3      	ldr	r3, [r4, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	6022      	str	r2, [r4, #0]
 80049d2:	701e      	strb	r6, [r3, #0]
 80049d4:	6962      	ldr	r2, [r4, #20]
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	429a      	cmp	r2, r3
 80049da:	d004      	beq.n	80049e6 <__swbuf_r+0x6e>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	07db      	lsls	r3, r3, #31
 80049e0:	d5e1      	bpl.n	80049a6 <__swbuf_r+0x2e>
 80049e2:	2e0a      	cmp	r6, #10
 80049e4:	d1df      	bne.n	80049a6 <__swbuf_r+0x2e>
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7ff ff9d 	bl	8004928 <_fflush_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0d9      	beq.n	80049a6 <__swbuf_r+0x2e>
 80049f2:	e7d6      	b.n	80049a2 <__swbuf_r+0x2a>

080049f4 <__swsetup_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <__swsetup_r+0xa8>)
 80049f8:	4605      	mov	r5, r0
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	460c      	mov	r4, r1
 80049fe:	b118      	cbz	r0, 8004a08 <__swsetup_r+0x14>
 8004a00:	6a03      	ldr	r3, [r0, #32]
 8004a02:	b90b      	cbnz	r3, 8004a08 <__swsetup_r+0x14>
 8004a04:	f7ff fa3e 	bl	8003e84 <__sinit>
 8004a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0c:	0719      	lsls	r1, r3, #28
 8004a0e:	d422      	bmi.n	8004a56 <__swsetup_r+0x62>
 8004a10:	06da      	lsls	r2, r3, #27
 8004a12:	d407      	bmi.n	8004a24 <__swsetup_r+0x30>
 8004a14:	2209      	movs	r2, #9
 8004a16:	602a      	str	r2, [r5, #0]
 8004a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	e033      	b.n	8004a8c <__swsetup_r+0x98>
 8004a24:	0758      	lsls	r0, r3, #29
 8004a26:	d512      	bpl.n	8004a4e <__swsetup_r+0x5a>
 8004a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a2a:	b141      	cbz	r1, 8004a3e <__swsetup_r+0x4a>
 8004a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a30:	4299      	cmp	r1, r3
 8004a32:	d002      	beq.n	8004a3a <__swsetup_r+0x46>
 8004a34:	4628      	mov	r0, r5
 8004a36:	f7ff fb2d 	bl	8004094 <_free_r>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	2300      	movs	r3, #0
 8004a48:	6063      	str	r3, [r4, #4]
 8004a4a:	6923      	ldr	r3, [r4, #16]
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f043 0308 	orr.w	r3, r3, #8
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	b94b      	cbnz	r3, 8004a6e <__swsetup_r+0x7a>
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a64:	d003      	beq.n	8004a6e <__swsetup_r+0x7a>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f84f 	bl	8004b0c <__smakebuf_r>
 8004a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a72:	f013 0201 	ands.w	r2, r3, #1
 8004a76:	d00a      	beq.n	8004a8e <__swsetup_r+0x9a>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	60a2      	str	r2, [r4, #8]
 8004a7c:	6962      	ldr	r2, [r4, #20]
 8004a7e:	4252      	negs	r2, r2
 8004a80:	61a2      	str	r2, [r4, #24]
 8004a82:	6922      	ldr	r2, [r4, #16]
 8004a84:	b942      	cbnz	r2, 8004a98 <__swsetup_r+0xa4>
 8004a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a8a:	d1c5      	bne.n	8004a18 <__swsetup_r+0x24>
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}
 8004a8e:	0799      	lsls	r1, r3, #30
 8004a90:	bf58      	it	pl
 8004a92:	6962      	ldrpl	r2, [r4, #20]
 8004a94:	60a2      	str	r2, [r4, #8]
 8004a96:	e7f4      	b.n	8004a82 <__swsetup_r+0x8e>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e7f7      	b.n	8004a8c <__swsetup_r+0x98>
 8004a9c:	20000018 	.word	0x20000018

08004aa0 <_sbrk_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d06      	ldr	r5, [pc, #24]	@ (8004abc <_sbrk_r+0x1c>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	602b      	str	r3, [r5, #0]
 8004aac:	f7fc f94c 	bl	8000d48 <_sbrk>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_sbrk_r+0x1a>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_sbrk_r+0x1a>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	200002a0 	.word	0x200002a0

08004ac0 <__swhatbuf_r>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	b096      	sub	sp, #88	@ 0x58
 8004acc:	4615      	mov	r5, r2
 8004ace:	461e      	mov	r6, r3
 8004ad0:	da0d      	bge.n	8004aee <__swhatbuf_r+0x2e>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2340      	movne	r3, #64	@ 0x40
 8004ae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	b016      	add	sp, #88	@ 0x58
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	466a      	mov	r2, sp
 8004af0:	f000 f848 	bl	8004b84 <_fstat_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	dbec      	blt.n	8004ad2 <__swhatbuf_r+0x12>
 8004af8:	9901      	ldr	r1, [sp, #4]
 8004afa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004afe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b02:	4259      	negs	r1, r3
 8004b04:	4159      	adcs	r1, r3
 8004b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b0a:	e7eb      	b.n	8004ae4 <__swhatbuf_r+0x24>

08004b0c <__smakebuf_r>:
 8004b0c:	898b      	ldrh	r3, [r1, #12]
 8004b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b10:	079d      	lsls	r5, r3, #30
 8004b12:	4606      	mov	r6, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	d507      	bpl.n	8004b28 <__smakebuf_r+0x1c>
 8004b18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	2301      	movs	r3, #1
 8004b22:	6163      	str	r3, [r4, #20]
 8004b24:	b003      	add	sp, #12
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b28:	ab01      	add	r3, sp, #4
 8004b2a:	466a      	mov	r2, sp
 8004b2c:	f7ff ffc8 	bl	8004ac0 <__swhatbuf_r>
 8004b30:	9f00      	ldr	r7, [sp, #0]
 8004b32:	4605      	mov	r5, r0
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7ff fb18 	bl	800416c <_malloc_r>
 8004b3c:	b948      	cbnz	r0, 8004b52 <__smakebuf_r+0x46>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	059a      	lsls	r2, r3, #22
 8004b44:	d4ee      	bmi.n	8004b24 <__smakebuf_r+0x18>
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	e7e2      	b.n	8004b18 <__smakebuf_r+0xc>
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	6020      	str	r0, [r4, #0]
 8004b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b62:	b15b      	cbz	r3, 8004b7c <__smakebuf_r+0x70>
 8004b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f81d 	bl	8004ba8 <_isatty_r>
 8004b6e:	b128      	cbz	r0, 8004b7c <__smakebuf_r+0x70>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	431d      	orrs	r5, r3
 8004b80:	81a5      	strh	r5, [r4, #12]
 8004b82:	e7cf      	b.n	8004b24 <__smakebuf_r+0x18>

08004b84 <_fstat_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	@ (8004ba4 <_fstat_r+0x20>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	f7fc f8b1 	bl	8000cf8 <_fstat>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	d102      	bne.n	8004ba0 <_fstat_r+0x1c>
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	b103      	cbz	r3, 8004ba0 <_fstat_r+0x1c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200002a0 	.word	0x200002a0

08004ba8 <_isatty_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	@ (8004bc4 <_isatty_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fc f8b0 	bl	8000d18 <_isatty>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_isatty_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_isatty_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	200002a0 	.word	0x200002a0

08004bc8 <_init>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_fini>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr
