
I2C_LCD_16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004abc  08004abc  00005abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b00  08004b00  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b00  08004b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b08  08004b08  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004b10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000001c  08004b2c  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08004b2c  000060e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3bd  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dab  00000000  00000000  00012409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000141b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a4  00000000  00000000  00014cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c4f  00000000  00000000  0001556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e202  00000000  00000000  000361bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ab6  00000000  00000000  000443bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010be73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  0010beb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0010ec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004aa4 	.word	0x08004aa4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08004aa4 	.word	0x08004aa4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fcae 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f822 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8e6 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f8ba 	bl	80006b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000544:	f000 f88a 	bl	800065c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //Nomral static Printing
  HD44780_Init(2);
 8000548:	2002      	movs	r0, #2
 800054a:	f000 fa9b 	bl	8000a84 <HD44780_Init>
  HD44780_Clear();
 800054e:	f000 fb1d 	bl	8000b8c <HD44780_Clear>
  HD44780_Backlight();
 8000552:	f000 fbb9 	bl	8000cc8 <HD44780_Backlight>
  HD44780_SetCursor(0,0);
 8000556:	2100      	movs	r1, #0
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb2d 	bl	8000bb8 <HD44780_SetCursor>
  HD44780_PrintStr("Welcome To");
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <main+0x48>)
 8000560:	f000 fb9c 	bl	8000c9c <HD44780_PrintStr>
  HD44780_SetCursor(0,1);
 8000564:	2101      	movs	r1, #1
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fb26 	bl	8000bb8 <HD44780_SetCursor>
  HD44780_PrintStr("CircuitGator HQ");
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x4c>)
 800056e:	f000 fb95 	bl	8000c9c <HD44780_PrintStr>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	bf00      	nop
 8000574:	e7fd      	b.n	8000572 <main+0x42>
 8000576:	bf00      	nop
 8000578:	08004abc 	.word	0x08004abc
 800057c:	08004ac8 	.word	0x08004ac8

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	@ 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fa5c 	bl	8004a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000654 <SystemClock_Config+0xd4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a29      	ldr	r2, [pc, #164]	@ (8000654 <SystemClock_Config+0xd4>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <SystemClock_Config+0xd4>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <SystemClock_Config+0xd8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005cc:	4a22      	ldr	r2, [pc, #136]	@ (8000658 <SystemClock_Config+0xd8>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f4:	2310      	movs	r3, #16
 80005f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fcba 	bl	8003f88 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800061a:	f000 f8e5 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f95a 	bl	80038f4 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000646:	f000 f8cf 	bl	80007e8 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <MX_I2C1_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_I2C1_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_I2C1_Init+0x50>)
 800067a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800067e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_I2C1_Init+0x50>)
 800069a:	f000 ff81 	bl	80015a0 <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f8a0 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000038 	.word	0x20000038
 80006b0:	40005400 	.word	0x40005400
 80006b4:	000186a0 	.word	0x000186a0

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f003 fee8 	bl	80044c4 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f875 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4812      	ldr	r0, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fee8 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_GPIO_Init+0xd8>)
 80007b4:	f000 fd46 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 80007d0:	f000 fd38 	bl	8001244 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000808:	6453      	str	r3, [r2, #68]	@ 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	@ 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000832:	2007      	movs	r0, #7
 8000834:	f000 fc94 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	@ (80008e8 <HAL_I2C_MspInit+0xa4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d13b      	bne.n	80008de <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000882:	23c0      	movs	r3, #192	@ 0xc0
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000886:	2312      	movs	r3, #18
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000892:	2304      	movs	r3, #4
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <HAL_I2C_MspInit+0xac>)
 800089e:	f000 fcd1 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 80008ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_I2C_MspInit+0xa8>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	201f      	movs	r0, #31
 80008c4:	f000 fc57 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008c8:	201f      	movs	r0, #31
 80008ca:	f000 fc70 	bl	80011ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2020      	movs	r0, #32
 80008d4:	f000 fc4f 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008d8:	2020      	movs	r0, #32
 80008da:	f000 fc68 	bl	80011ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400

080008f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <HAL_UART_MspInit+0x84>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12b      	bne.n	800096e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <HAL_UART_MspInit+0x88>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094e:	230c      	movs	r3, #12
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095e:	2307      	movs	r3, #7
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_UART_MspInit+0x8c>)
 800096a:	f000 fc6b 	bl	8001244 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	@ 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40004400 	.word	0x40004400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009da:	f000 faad 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <I2C1_EV_IRQHandler+0x10>)
 80009ea:	f001 f831 	bl	8001a50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000038 	.word	0x20000038

080009f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <I2C1_ER_IRQHandler+0x10>)
 80009fe:	f001 f998 	bl	8001d32 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000038 	.word	0x20000038

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a34:	f7ff ffea 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 fffd 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fd65 	bl	8000530 <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a74:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 8000a78:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a7c:	200000e0 	.word	0x200000e0

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000a8e:	4a38      	ldr	r2, [pc, #224]	@ (8000b70 <HD44780_Init+0xec>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <HD44780_Init+0xf0>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <HD44780_Init+0xf4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <HD44780_Init+0xec>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d907      	bls.n	8000ab8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <HD44780_Init+0xf4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <HD44780_Init+0xf4>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e006      	b.n	8000ac6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b78 <HD44780_Init+0xf4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <HD44780_Init+0xf4>)
 8000ac4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000ac6:	f000 f993 	bl	8000df0 <DelayInit>
  HAL_Delay(50);
 8000aca:	2032      	movs	r0, #50	@ 0x32
 8000acc:	f000 fa54 	bl	8000f78 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <HD44780_Init+0xf0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f951 	bl	8000d7c <ExpanderWrite>
  HAL_Delay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ade:	f000 fa4b 	bl	8000f78 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000ae2:	2030      	movs	r0, #48	@ 0x30
 8000ae4:	f000 f939 	bl	8000d5a <Write4Bits>
  DelayUS(4500);
 8000ae8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000aec:	f000 f9aa 	bl	8000e44 <DelayUS>

  Write4Bits(0x03 << 4);
 8000af0:	2030      	movs	r0, #48	@ 0x30
 8000af2:	f000 f932 	bl	8000d5a <Write4Bits>
  DelayUS(4500);
 8000af6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000afa:	f000 f9a3 	bl	8000e44 <DelayUS>

  Write4Bits(0x03 << 4);
 8000afe:	2030      	movs	r0, #48	@ 0x30
 8000b00:	f000 f92b 	bl	8000d5a <Write4Bits>
  DelayUS(4500);
 8000b04:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000b08:	f000 f99c 	bl	8000e44 <DelayUS>

  Write4Bits(0x02 << 4);
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f000 f924 	bl	8000d5a <Write4Bits>
  DelayUS(100);
 8000b12:	2064      	movs	r0, #100	@ 0x64
 8000b14:	f000 f996 	bl	8000e44 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HD44780_Init+0xf4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f8dc 	bl	8000ce0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HD44780_Init+0xf8>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000b2e:	f000 f875 	bl	8000c1c <HD44780_Display>
  HD44780_Clear();
 8000b32:	f000 f82b 	bl	8000b8c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HD44780_Init+0xfc>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HD44780_Init+0xfc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f8ca 	bl	8000ce0 <SendCommand>
  DelayUS(4500);
 8000b4c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000b50:	f000 f978 	bl	8000e44 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000b54:	490b      	ldr	r1, [pc, #44]	@ (8000b84 <HD44780_Init+0x100>)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f876 	bl	8000c48 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000b5c:	490a      	ldr	r1, [pc, #40]	@ (8000b88 <HD44780_Init+0x104>)
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 f872 	bl	8000c48 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000b64:	f000 f81d 	bl	8000ba2 <HD44780_Home>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000d7 	.word	0x200000d7
 8000b74:	200000d8 	.word	0x200000d8
 8000b78:	200000d4 	.word	0x200000d4
 8000b7c:	200000d5 	.word	0x200000d5
 8000b80:	200000d6 	.word	0x200000d6
 8000b84:	20000004 	.word	0x20000004
 8000b88:	2000000c 	.word	0x2000000c

08000b8c <HD44780_Clear>:

void HD44780_Clear()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f8a5 	bl	8000ce0 <SendCommand>
  DelayUS(2000);
 8000b96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b9a:	f000 f953 	bl	8000e44 <DelayUS>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HD44780_Home>:

void HD44780_Home()
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f000 f89a 	bl	8000ce0 <SendCommand>
  DelayUS(2000);
 8000bac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bb0:	f000 f948 	bl	8000e44 <DelayUS>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HD44780_SetCursor+0x5c>)
 8000bca:	f107 0408 	add.w	r4, r7, #8
 8000bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HD44780_SetCursor+0x60>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	79ba      	ldrb	r2, [r7, #6]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d303      	bcc.n	8000be6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HD44780_SetCursor+0x60>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	3318      	adds	r3, #24
 8000bec:	443b      	add	r3, r7
 8000bee:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f86b 	bl	8000ce0 <SendCommand>
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08004ad8 	.word	0x08004ad8
 8000c18:	200000d7 	.word	0x200000d7

08000c1c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HD44780_Display+0x28>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HD44780_Display+0x28>)
 8000c2c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HD44780_Display+0x28>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f851 	bl	8000ce0 <SendCommand>
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000d5 	.word	0x200000d5

08000c48 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f837 	bl	8000ce0 <SendCommand>
  for (int i=0; i<8; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e009      	b.n	8000c8c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f83b 	bl	8000cfc <SendChar>
  for (int i=0; i<8; i++)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	ddf2      	ble.n	8000c78 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000ca4:	e006      	b.n	8000cb4 <HD44780_PrintStr+0x18>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f824 	bl	8000cfc <SendChar>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f4      	bne.n	8000ca6 <HD44780_PrintStr+0xa>
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HD44780_Backlight+0x14>)
 8000cce:	2208      	movs	r2, #8
 8000cd0:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f852 	bl	8000d7c <ExpanderWrite>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000d8 	.word	0x200000d8

08000ce0 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f812 	bl	8000d18 <Send>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <SendChar>:

static void SendChar(uint8_t ch)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f804 	bl	8000d18 <Send>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f80b 	bl	8000d5a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f804 	bl	8000d5a <Write4Bits>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f808 	bl	8000d7c <ExpanderWrite>
  PulseEnable(value);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f820 	bl	8000db4 <PulseEnable>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <ExpanderWrite+0x30>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	230a      	movs	r3, #10
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	214e      	movs	r1, #78	@ 0x4e
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <ExpanderWrite+0x34>)
 8000da0:	f000 fd58 	bl	8001854 <HAL_I2C_Master_Transmit>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000d8 	.word	0x200000d8
 8000db0:	20000038 	.word	0x20000038

08000db4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffd8 	bl	8000d7c <ExpanderWrite>
  DelayUS(20);
 8000dcc:	2014      	movs	r0, #20
 8000dce:	f000 f839 	bl	8000e44 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f023 0304 	bic.w	r3, r3, #4
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ffce 	bl	8000d7c <ExpanderWrite>
  DelayUS(20);
 8000de0:	2014      	movs	r0, #20
 8000de2:	f000 f82f 	bl	8000e44 <DelayUS>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <DelayInit>:

static void DelayInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <DelayInit+0x4c>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <DelayInit+0x4c>)
 8000dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dfe:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <DelayInit+0x4c>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <DelayInit+0x4c>)
 8000e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e0a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <DelayInit+0x50>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <DelayInit+0x50>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <DelayInit+0x50>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <DelayInit+0x50>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <DelayInit+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000e2a:	bf00      	nop
  __ASM volatile ("NOP");
 8000e2c:	bf00      	nop
  __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000edf0 	.word	0xe000edf0
 8000e40:	e0001000 	.word	0xe0001000

08000e44 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <DelayUS+0x44>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <DelayUS+0x48>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	0c9a      	lsrs	r2, r3, #18
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <DelayUS+0x4c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <DelayUS+0x4c>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f6      	bhi.n	8000e66 <DelayUS+0x22>
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	e0001000 	.word	0xe0001000

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	@ (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fc94 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	@ (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000018 	.word	0x20000018
 8000f34:	20000014 	.word	0x20000014

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000018 	.word	0x20000018
 8000f5c:	200000dc 	.word	0x200000dc

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200000dc 	.word	0x200000dc

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000018 	.word	0x20000018

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d004      	beq.n	8001200 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00c      	b.n	800121a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e165      	b.n	800152c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 8154 	bne.w	8001526 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d005      	beq.n	8001296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	2b02      	cmp	r3, #2
 8001294:	d130      	bne.n	80012f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b03      	cmp	r3, #3
 8001302:	d017      	beq.n	8001334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d123      	bne.n	8001388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80ae 	beq.w	8001526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001544 <HAL_GPIO_Init+0x300>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001544 <HAL_GPIO_Init+0x300>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b5a      	ldr	r3, [pc, #360]	@ (8001544 <HAL_GPIO_Init+0x300>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a58      	ldr	r2, [pc, #352]	@ (8001548 <HAL_GPIO_Init+0x304>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4f      	ldr	r2, [pc, #316]	@ (800154c <HAL_GPIO_Init+0x308>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x21a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_GPIO_Init+0x30c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x216>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <HAL_GPIO_Init+0x310>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x212>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	@ (8001558 <HAL_GPIO_Init+0x314>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x20e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <HAL_GPIO_Init+0x318>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x20a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	@ (8001560 <HAL_GPIO_Init+0x31c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x206>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <HAL_GPIO_Init+0x320>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x202>
 8001442:	2306      	movs	r3, #6
 8001444:	e00c      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 8001446:	2307      	movs	r3, #7
 8001448:	e00a      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 800144a:	2305      	movs	r3, #5
 800144c:	e008      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 800144e:	2304      	movs	r3, #4
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 8001452:	2303      	movs	r3, #3
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x21c>
 800145e:	2300      	movs	r3, #0
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	@ (8001548 <HAL_GPIO_Init+0x304>)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147e:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <HAL_GPIO_Init+0x324>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a2:	4a31      	ldr	r2, [pc, #196]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014cc:	4a26      	ldr	r2, [pc, #152]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d2:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_GPIO_Init+0x324>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001520:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_GPIO_Init+0x324>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	f67f ae96 	bls.w	8001260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e12b      	b.n	800180a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff f93c 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001604:	f002 fa68 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a81      	ldr	r2, [pc, #516]	@ (8001814 <HAL_I2C_Init+0x274>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d807      	bhi.n	8001624 <HAL_I2C_Init+0x84>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a80      	ldr	r2, [pc, #512]	@ (8001818 <HAL_I2C_Init+0x278>)
 8001618:	4293      	cmp	r3, r2
 800161a:	bf94      	ite	ls
 800161c:	2301      	movls	r3, #1
 800161e:	2300      	movhi	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	e006      	b.n	8001632 <HAL_I2C_Init+0x92>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a7d      	ldr	r2, [pc, #500]	@ (800181c <HAL_I2C_Init+0x27c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	bf94      	ite	ls
 800162c:	2301      	movls	r3, #1
 800162e:	2300      	movhi	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0e7      	b.n	800180a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4a78      	ldr	r2, [pc, #480]	@ (8001820 <HAL_I2C_Init+0x280>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0c9b      	lsrs	r3, r3, #18
 8001644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a6a      	ldr	r2, [pc, #424]	@ (8001814 <HAL_I2C_Init+0x274>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d802      	bhi.n	8001674 <HAL_I2C_Init+0xd4>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3301      	adds	r3, #1
 8001672:	e009      	b.n	8001688 <HAL_I2C_Init+0xe8>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	4a69      	ldr	r2, [pc, #420]	@ (8001824 <HAL_I2C_Init+0x284>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	3301      	adds	r3, #1
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	430b      	orrs	r3, r1
 800168e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800169a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	495c      	ldr	r1, [pc, #368]	@ (8001814 <HAL_I2C_Init+0x274>)
 80016a4:	428b      	cmp	r3, r1
 80016a6:	d819      	bhi.n	80016dc <HAL_I2C_Init+0x13c>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1e59      	subs	r1, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016bc:	400b      	ands	r3, r1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <HAL_I2C_Init+0x138>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1e59      	subs	r1, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d6:	e051      	b.n	800177c <HAL_I2C_Init+0x1dc>
 80016d8:	2304      	movs	r3, #4
 80016da:	e04f      	b.n	800177c <HAL_I2C_Init+0x1dc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d111      	bne.n	8001708 <HAL_I2C_Init+0x168>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e012      	b.n	800172e <HAL_I2C_Init+0x18e>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	0099      	lsls	r1, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Init+0x196>
 8001732:	2301      	movs	r3, #1
 8001734:	e022      	b.n	800177c <HAL_I2C_Init+0x1dc>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10e      	bne.n	800175c <HAL_I2C_Init+0x1bc>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1e58      	subs	r0, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	440b      	add	r3, r1
 800174c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175a:	e00f      	b.n	800177c <HAL_I2C_Init+0x1dc>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	6809      	ldr	r1, [r1, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6911      	ldr	r1, [r2, #16]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68d2      	ldr	r2, [r2, #12]
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	000186a0 	.word	0x000186a0
 8001818:	001e847f 	.word	0x001e847f
 800181c:	003d08ff 	.word	0x003d08ff
 8001820:	431bde83 	.word	0x431bde83
 8001824:	10624dd3 	.word	0x10624dd3

08001828 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183a:	2b80      	cmp	r3, #128	@ 0x80
 800183c:	d103      	bne.n	8001846 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fb7a 	bl	8000f60 <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b20      	cmp	r3, #32
 8001878:	f040 80e0 	bne.w	8001a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2319      	movs	r3, #25
 8001882:	2201      	movs	r2, #1
 8001884:	4970      	ldr	r1, [pc, #448]	@ (8001a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f001 fe0e 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	e0d3      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2C_Master_Transmit+0x50>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0cc      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2221      	movs	r2, #33	@ 0x21
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2210      	movs	r2, #16
 80018e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	893a      	ldrh	r2, [r7, #8]
 80018fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800190c:	8979      	ldrh	r1, [r7, #10]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f001 fc9e 	bl	8003254 <I2C_MasterRequestWrite>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08d      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001938:	e066      	b.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f001 fecc 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_I2C_Master_Transmit+0x188>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6a39      	ldr	r1, [r7, #32]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f001 fec3 	bl	800376c <I2C_WaitOnBTFFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e01a      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d194      	bne.n	800193a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	00100002 	.word	0x00100002
 8001a4c:	ffff0000 	.word	0xffff0000

08001a50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d003      	beq.n	8001a88 <HAL_I2C_EV_IRQHandler+0x38>
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b40      	cmp	r3, #64	@ 0x40
 8001a84:	f040 80c1 	bne.w	8001c0a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_I2C_EV_IRQHandler+0x6e>
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001aa8:	d003      	beq.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x62>
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x66>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x68>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f000 8132 	beq.w	8001d22 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x92>
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f001 fef2 	bl	80038be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fd9b 	bl	8002616 <I2C_Master_SB>
 8001ae0:	e092      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0xb2>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	0a5b      	lsrs	r3, r3, #9
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fe11 	bl	8002722 <I2C_Master_ADD10>
 8001b00:	e082      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_I2C_EV_IRQHandler+0xd2>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	0a5b      	lsrs	r3, r3, #9
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fe2b 	bl	8002776 <I2C_Master_ADDR>
 8001b20:	e072      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d03b      	beq.n	8001ba6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b3c:	f000 80f3 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	09db      	lsrs	r3, r3, #7
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00f      	beq.n	8001b6c <HAL_I2C_EV_IRQHandler+0x11c>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_I2C_EV_IRQHandler+0x11c>
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f9f3 	bl	8001f50 <I2C_MasterTransmit_TXE>
 8001b6a:	e04d      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80d6 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	0a5b      	lsrs	r3, r3, #9
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80cf 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b88:	7bbb      	ldrb	r3, [r7, #14]
 8001b8a:	2b21      	cmp	r3, #33	@ 0x21
 8001b8c:	d103      	bne.n	8001b96 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa7a 	bl	8002088 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b94:	e0c7      	b.n	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b40      	cmp	r3, #64	@ 0x40
 8001b9a:	f040 80c4 	bne.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fae8 	bl	8002174 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ba4:	e0bf      	b.n	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bb4:	f000 80b7 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00f      	beq.n	8001be4 <HAL_I2C_EV_IRQHandler+0x194>
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d009      	beq.n	8001be4 <HAL_I2C_EV_IRQHandler+0x194>
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fb61 	bl	80022a4 <I2C_MasterReceive_RXNE>
 8001be2:	e011      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 809a 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	0a5b      	lsrs	r3, r3, #9
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8093 	beq.w	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fc17 	bl	8002434 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c06:	e08e      	b.n	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c08:	e08d      	b.n	8001d26 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e007      	b.n	8001c2c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d012      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x20e>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0a5b      	lsrs	r3, r3, #9
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 ffdc 	bl	8002c14 <I2C_Slave_ADDR>
 8001c5c:	e066      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <HAL_I2C_EV_IRQHandler+0x22e>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	0a5b      	lsrs	r3, r3, #9
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 f816 	bl	8002ca8 <I2C_Slave_STOPF>
 8001c7c:	e056      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	2b21      	cmp	r3, #33	@ 0x21
 8001c82:	d002      	beq.n	8001c8a <HAL_I2C_EV_IRQHandler+0x23a>
 8001c84:	7bbb      	ldrb	r3, [r7, #14]
 8001c86:	2b29      	cmp	r3, #41	@ 0x29
 8001c88:	d125      	bne.n	8001cd6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	09db      	lsrs	r3, r3, #7
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00f      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x266>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	0a9b      	lsrs	r3, r3, #10
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x266>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fef2 	bl	8002a98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cb4:	e039      	b.n	8001d2a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d033      	beq.n	8001d2a <HAL_I2C_EV_IRQHandler+0x2da>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	0a5b      	lsrs	r3, r3, #9
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d02d      	beq.n	8001d2a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 ff1f 	bl	8002b12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cd4:	e029      	b.n	8001d2a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00f      	beq.n	8001d02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	0a9b      	lsrs	r3, r3, #10
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 ff2a 	bl	8002b54 <I2C_SlaveReceive_RXNE>
 8001d00:	e014      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00e      	beq.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	0a5b      	lsrs	r3, r3, #9
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 ff58 	bl	8002bd0 <I2C_SlaveReceive_BTF>
 8001d20:	e004      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001d22:	bf00      	nop
 8001d24:	e002      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d26:	bf00      	nop
 8001d28:	e000      	b.n	8001d2c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	@ 0x28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d54:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00e      	beq.n	8001d80 <HAL_I2C_ER_IRQHandler+0x4e>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <HAL_I2C_ER_IRQHandler+0x78>
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001da8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	0a9b      	lsrs	r3, r3, #10
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03f      	beq.n	8001e36 <HAL_I2C_ER_IRQHandler+0x104>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d039      	beq.n	8001e36 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001dc2:	7efb      	ldrb	r3, [r7, #27]
 8001dc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ddc:	7ebb      	ldrb	r3, [r7, #26]
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d112      	bne.n	8001e08 <HAL_I2C_ER_IRQHandler+0xd6>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <HAL_I2C_ER_IRQHandler+0xd6>
 8001de8:	7cfb      	ldrb	r3, [r7, #19]
 8001dea:	2b21      	cmp	r3, #33	@ 0x21
 8001dec:	d008      	beq.n	8001e00 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b29      	cmp	r3, #41	@ 0x29
 8001df2:	d005      	beq.n	8001e00 <HAL_I2C_ER_IRQHandler+0xce>
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	2b28      	cmp	r3, #40	@ 0x28
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b21      	cmp	r3, #33	@ 0x21
 8001dfe:	d103      	bne.n	8001e08 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 f881 	bl	8002f08 <I2C_Slave_AF>
 8001e06:	e016      	b.n	8001e36 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e1a:	7efb      	ldrb	r3, [r7, #27]
 8001e1c:	2b10      	cmp	r3, #16
 8001e1e:	d002      	beq.n	8001e26 <HAL_I2C_ER_IRQHandler+0xf4>
 8001e20:	7efb      	ldrb	r3, [r7, #27]
 8001e22:	2b40      	cmp	r3, #64	@ 0x40
 8001e24:	d107      	bne.n	8001e36 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	0adb      	lsrs	r3, r3, #11
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00e      	beq.n	8001e60 <HAL_I2C_ER_IRQHandler+0x12e>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001e5e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 f8bc 	bl	8002ff0 <I2C_ITError>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	@ 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
 8001edc:	4613      	mov	r3, r2
 8001ede:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d150      	bne.n	8002018 <I2C_MasterTransmit_TXE+0xc8>
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b21      	cmp	r3, #33	@ 0x21
 8001f7a:	d14d      	bne.n	8002018 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d01d      	beq.n	8001fbe <I2C_MasterTransmit_TXE+0x6e>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d01a      	beq.n	8001fbe <I2C_MasterTransmit_TXE+0x6e>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f8e:	d016      	beq.n	8001fbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2211      	movs	r2, #17
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff62 	bl	8001e80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fbc:	e060      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001fcc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fdc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b40      	cmp	r3, #64	@ 0x40
 8001ff6:	d107      	bne.n	8002008 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff7d 	bl	8001f00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002006:	e03b      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff35 	bl	8001e80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002016:	e033      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b21      	cmp	r3, #33	@ 0x21
 800201c:	d005      	beq.n	800202a <I2C_MasterTransmit_TXE+0xda>
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	2b40      	cmp	r3, #64	@ 0x40
 8002022:	d12d      	bne.n	8002080 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b22      	cmp	r3, #34	@ 0x22
 8002028:	d12a      	bne.n	8002080 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002042:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002044:	e01c      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b40      	cmp	r3, #64	@ 0x40
 8002050:	d103      	bne.n	800205a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f88e 	bl	8002174 <I2C_MemoryTransmit_TXE_BTF>
}
 8002058:	e012      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800207e:	e7ff      	b.n	8002080 <I2C_MasterTransmit_TXE+0x130>
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b21      	cmp	r3, #33	@ 0x21
 80020a0:	d164      	bne.n	800216c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80020d0:	e04c      	b.n	800216c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d01d      	beq.n	8002114 <I2C_MasterTransmit_BTF+0x8c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d01a      	beq.n	8002114 <I2C_MasterTransmit_BTF+0x8c>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020e4:	d016      	beq.n	8002114 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2211      	movs	r2, #17
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff feb7 	bl	8001e80 <HAL_I2C_MasterTxCpltCallback>
}
 8002112:	e02b      	b.n	800216c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002122:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002132:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d107      	bne.n	800215e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fed2 	bl	8001f00 <HAL_I2C_MemTxCpltCallback>
}
 800215c:	e006      	b.n	800216c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fe8a 	bl	8001e80 <HAL_I2C_MasterTxCpltCallback>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002182:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11d      	bne.n	80021c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10b      	bne.n	80021ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a4:	1c9a      	adds	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80021aa:	e077      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	121b      	asrs	r3, r3, #8
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021c6:	e069      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10b      	bne.n	80021e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021e6:	e059      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d152      	bne.n	8002296 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b22      	cmp	r3, #34	@ 0x22
 80021f4:	d10d      	bne.n	8002212 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002204:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002210:	e044      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b21      	cmp	r3, #33	@ 0x21
 8002220:	d112      	bne.n	8002248 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002246:	e029      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d124      	bne.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b21      	cmp	r3, #33	@ 0x21
 8002256:	d121      	bne.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002266:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fe36 	bl	8001f00 <HAL_I2C_MemTxCpltCallback>
}
 8002294:	e002      	b.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fac6 	bl	8001828 <I2C_Flush_DR>
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b22      	cmp	r3, #34	@ 0x22
 80022b6:	f040 80b9 	bne.w	800242c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d921      	bls.n	8002312 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	f040 8096 	bne.w	800242c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002310:	e08c      	b.n	800242c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	2b02      	cmp	r3, #2
 8002318:	d07f      	beq.n	800241a <I2C_MasterReceive_RXNE+0x176>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d002      	beq.n	8002326 <I2C_MasterReceive_RXNE+0x82>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d179      	bne.n	800241a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f001 fa68 	bl	80037fc <I2C_WaitOnSTOPRequestThroughIT>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d14c      	bne.n	80023cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002340:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002350:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d10a      	bne.n	80023a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fdba 	bl	8001f14 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023a0:	e044      	b.n	800242c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d002      	beq.n	80023b6 <I2C_MasterReceive_RXNE+0x112>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d103      	bne.n	80023be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80023bc:	e002      	b.n	80023c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2212      	movs	r2, #18
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fd65 	bl	8001e94 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023ca:	e02f      	b.n	800242c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd88 	bl	8001f28 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002418:	e008      	b.n	800242c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002428:	605a      	str	r2, [r3, #4]
}
 800242a:	e7ff      	b.n	800242c <I2C_MasterReceive_RXNE+0x188>
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002482:	e0c4      	b.n	800260e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d129      	bne.n	80024e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00a      	beq.n	80024ba <I2C_MasterReceive_BTF+0x86>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d007      	beq.n	80024ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024e0:	e095      	b.n	800260e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d17d      	bne.n	80025e8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d002      	beq.n	80024f8 <I2C_MasterReceive_BTF+0xc4>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d108      	bne.n	800250a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e016      	b.n	8002538 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d002      	beq.n	8002516 <I2C_MasterReceive_BTF+0xe2>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d108      	bne.n	8002528 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002592:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b40      	cmp	r3, #64	@ 0x40
 80025a6:	d10a      	bne.n	80025be <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fcac 	bl	8001f14 <HAL_I2C_MemRxCpltCallback>
}
 80025bc:	e027      	b.n	800260e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d002      	beq.n	80025d2 <I2C_MasterReceive_BTF+0x19e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d103      	bne.n	80025da <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d8:	e002      	b.n	80025e0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2212      	movs	r2, #18
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fc57 	bl	8001e94 <HAL_I2C_MasterRxCpltCallback>
}
 80025e6:	e012      	b.n	800260e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b40      	cmp	r3, #64	@ 0x40
 8002628:	d117      	bne.n	800265a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002642:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002644:	e067      	b.n	8002716 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
}
 8002658:	e05d      	b.n	8002716 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002662:	d133      	bne.n	80026cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b21      	cmp	r3, #33	@ 0x21
 800266e:	d109      	bne.n	8002684 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002680:	611a      	str	r2, [r3, #16]
 8002682:	e008      	b.n	8002696 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <I2C_Master_SB+0x92>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d108      	bne.n	80026ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <I2C_Master_SB+0x100>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02d      	beq.n	8002716 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c8:	605a      	str	r2, [r3, #4]
}
 80026ca:	e024      	b.n	8002716 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10e      	bne.n	80026f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	b29b      	uxth	r3, r3
 80026da:	11db      	asrs	r3, r3, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0306 	and.w	r3, r3, #6
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f063 030f 	orn	r3, r3, #15
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
}
 80026f0:	e011      	b.n	8002716 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10d      	bne.n	8002716 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	b29b      	uxth	r3, r3
 8002700:	11db      	asrs	r3, r3, #7
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 0306 	and.w	r3, r3, #6
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f063 030e 	orn	r3, r3, #14
 800270e:	b2da      	uxtb	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	b2da      	uxtb	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <I2C_Master_ADD10+0x26>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d108      	bne.n	800275a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <I2C_Master_ADD10+0x48>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002768:	605a      	str	r2, [r3, #4]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002776:	b480      	push	{r7}
 8002778:	b091      	sub	sp, #68	@ 0x44
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002784:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b22      	cmp	r3, #34	@ 0x22
 800279e:	f040 8169 	bne.w	8002a74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <I2C_Master_ADDR+0x54>
 80027aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d10b      	bne.n	80027ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c8:	e160      	b.n	8002a8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11d      	bne.n	800280e <I2C_Master_ADDR+0x98>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027da:	d118      	bne.n	800280e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002800:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	651a      	str	r2, [r3, #80]	@ 0x50
 800280c:	e13e      	b.n	8002a8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d113      	bne.n	8002840 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e115      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	f040 808a 	bne.w	8002960 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002852:	d137      	bne.n	80028c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002862:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800286e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002872:	d113      	bne.n	800289c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002882:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	e0e7      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e0d3      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80028c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d02e      	beq.n	8002928 <I2C_Master_ADDR+0x1b2>
 80028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d02b      	beq.n	8002928 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80028d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d2:	2b12      	cmp	r3, #18
 80028d4:	d102      	bne.n	80028dc <I2C_Master_ADDR+0x166>
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d125      	bne.n	8002928 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d00e      	beq.n	8002900 <I2C_Master_ADDR+0x18a>
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d00b      	beq.n	8002900 <I2C_Master_ADDR+0x18a>
 80028e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d008      	beq.n	8002900 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e007      	b.n	8002910 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800290e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	e0a1      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002936:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e085      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d14d      	bne.n	8002a06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	2b04      	cmp	r3, #4
 800296e:	d016      	beq.n	800299e <I2C_Master_ADDR+0x228>
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	2b02      	cmp	r3, #2
 8002974:	d013      	beq.n	800299e <I2C_Master_ADDR+0x228>
 8002976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002978:	2b10      	cmp	r3, #16
 800297a:	d010      	beq.n	800299e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800298a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e007      	b.n	80029ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029bc:	d117      	bne.n	80029ee <I2C_Master_ADDR+0x278>
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029c4:	d00b      	beq.n	80029de <I2C_Master_ADDR+0x268>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d008      	beq.n	80029de <I2C_Master_ADDR+0x268>
 80029cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d005      	beq.n	80029de <I2C_Master_ADDR+0x268>
 80029d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d002      	beq.n	80029de <I2C_Master_ADDR+0x268>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d107      	bne.n	80029ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	e032      	b.n	8002a6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a24:	d117      	bne.n	8002a56 <I2C_Master_ADDR+0x2e0>
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a2c:	d00b      	beq.n	8002a46 <I2C_Master_ADDR+0x2d0>
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d008      	beq.n	8002a46 <I2C_Master_ADDR+0x2d0>
 8002a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d005      	beq.n	8002a46 <I2C_Master_ADDR+0x2d0>
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d002      	beq.n	8002a46 <I2C_Master_ADDR+0x2d0>
 8002a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d107      	bne.n	8002a56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002a72:	e00b      	b.n	8002a8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
}
 8002a8a:	e7ff      	b.n	8002a8c <I2C_Master_ADDR+0x316>
 8002a8c:	bf00      	nop
 8002a8e:	3744      	adds	r7, #68	@ 0x44
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02b      	beq.n	8002b0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d114      	bne.n	8002b0a <I2C_SlaveTransmit_TXE+0x72>
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b29      	cmp	r3, #41	@ 0x29
 8002ae4:	d111      	bne.n	8002b0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2221      	movs	r2, #33	@ 0x21
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2228      	movs	r2, #40	@ 0x28
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff f9cf 	bl	8001ea8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d011      	beq.n	8002b48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02c      	beq.n	8002bc8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d114      	bne.n	8002bc8 <I2C_SlaveReceive_RXNE+0x74>
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ba2:	d111      	bne.n	8002bc8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2222      	movs	r2, #34	@ 0x22
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2228      	movs	r2, #40	@ 0x28
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff f97a 	bl	8001ebc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c2e:	2b28      	cmp	r3, #40	@ 0x28
 8002c30:	d127      	bne.n	8002c82 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c40:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	09db      	lsrs	r3, r3, #7
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	81bb      	strh	r3, [r7, #12]
 8002c64:	e002      	b.n	8002c6c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c74:	89ba      	ldrh	r2, [r7, #12]
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff f928 	bl	8001ed0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c80:	e00e      	b.n	8002ca0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d04:	d172      	bne.n	8002dec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b22      	cmp	r3, #34	@ 0x22
 8002d0a:	d002      	beq.n	8002d12 <I2C_Slave_STOPF+0x6a>
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d10:	d135      	bne.n	8002d7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fa6b 	bl	8001226 <HAL_DMA_GetState>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d049      	beq.n	8002dea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	4a69      	ldr	r2, [pc, #420]	@ (8002f00 <I2C_Slave_STOPF+0x258>)
 8002d5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fa3d 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03d      	beq.n	8002dea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d7c:	e035      	b.n	8002dea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fa35 	bl	8001226 <HAL_DMA_GetState>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d014      	beq.n	8002dec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8002f00 <I2C_Slave_STOPF+0x258>)
 8002dc8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fa07 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002de4:	4610      	mov	r0, r2
 8002de6:	4798      	blx	r3
 8002de8:	e000      	b.n	8002dec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03e      	beq.n	8002e74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d112      	bne.n	8002e2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e34:	2b40      	cmp	r3, #64	@ 0x40
 8002e36:	d112      	bne.n	8002e5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0204 	orr.w	r2, r3, #4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8b7 	bl	8002ff0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002e82:	e039      	b.n	8002ef8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e88:	d109      	bne.n	8002e9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2228      	movs	r2, #40	@ 0x28
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff f80f 	bl	8001ebc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b28      	cmp	r3, #40	@ 0x28
 8002ea8:	d111      	bne.n	8002ece <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a15      	ldr	r2, [pc, #84]	@ (8002f04 <I2C_Slave_STOPF+0x25c>)
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f810 	bl	8001eec <HAL_I2C_ListenCpltCallback>
}
 8002ecc:	e014      	b.n	8002ef8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	2b22      	cmp	r3, #34	@ 0x22
 8002ed4:	d002      	beq.n	8002edc <I2C_Slave_STOPF+0x234>
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b22      	cmp	r3, #34	@ 0x22
 8002eda:	d10d      	bne.n	8002ef8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe ffe2 	bl	8001ebc <HAL_I2C_SlaveRxCpltCallback>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	08003359 	.word	0x08003359
 8002f04:	ffff0000 	.word	0xffff0000

08002f08 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d002      	beq.n	8002f2a <I2C_Slave_AF+0x22>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d129      	bne.n	8002f7e <I2C_Slave_AF+0x76>
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b28      	cmp	r3, #40	@ 0x28
 8002f2e:	d126      	bne.n	8002f7e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2e      	ldr	r2, [pc, #184]	@ (8002fec <I2C_Slave_AF+0xe4>)
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f44:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f4e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe ffb8 	bl	8001eec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002f7c:	e031      	b.n	8002fe2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b21      	cmp	r3, #33	@ 0x21
 8002f82:	d129      	bne.n	8002fd8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <I2C_Slave_AF+0xe4>)
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2221      	movs	r2, #33	@ 0x21
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fb8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fc2c 	bl	8001828 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fe ff69 	bl	8001ea8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002fd6:	e004      	b.n	8002fe2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	ffff0000 	.word	0xffff0000

08002ff0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003006:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2b10      	cmp	r3, #16
 800300c:	d002      	beq.n	8003014 <I2C_ITError+0x24>
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d10a      	bne.n	800302a <I2C_ITError+0x3a>
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b22      	cmp	r3, #34	@ 0x22
 8003018:	d107      	bne.n	800302a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003028:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003030:	2b28      	cmp	r3, #40	@ 0x28
 8003032:	d107      	bne.n	8003044 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2228      	movs	r2, #40	@ 0x28
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003042:	e015      	b.n	8003070 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003052:	d00a      	beq.n	800306a <I2C_ITError+0x7a>
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b60      	cmp	r3, #96	@ 0x60
 8003058:	d007      	beq.n	800306a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307e:	d162      	bne.n	8003146 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d020      	beq.n	80030e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	4a6a      	ldr	r2, [pc, #424]	@ (800324c <I2C_ITError+0x25c>)
 80030a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe f899 	bl	80011e2 <HAL_DMA_Abort_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8089 	beq.w	80031ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030da:	4610      	mov	r0, r2
 80030dc:	4798      	blx	r3
 80030de:	e074      	b.n	80031ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	4a59      	ldr	r2, [pc, #356]	@ (800324c <I2C_ITError+0x25c>)
 80030e6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe f878 	bl	80011e2 <HAL_DMA_Abort_IT>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d068      	beq.n	80031ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d10b      	bne.n	800311e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003140:	4610      	mov	r0, r2
 8003142:	4798      	blx	r3
 8003144:	e041      	b.n	80031ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b60      	cmp	r3, #96	@ 0x60
 8003150:	d125      	bne.n	800319e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d10b      	bne.n	8003186 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fed0 	bl	8001f3c <HAL_I2C_AbortCpltCallback>
 800319c:	e015      	b.n	80031ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b40      	cmp	r3, #64	@ 0x40
 80031aa:	d10b      	bne.n	80031c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fe feaf 	bl	8001f28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d113      	bne.n	8003244 <I2C_ITError+0x254>
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b28      	cmp	r3, #40	@ 0x28
 8003220:	d110      	bne.n	8003244 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <I2C_ITError+0x260>)
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe fe54 	bl	8001eec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08003359 	.word	0x08003359
 8003250:	ffff0000 	.word	0xffff0000

08003254 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d006      	beq.n	800327e <I2C_MasterRequestWrite+0x2a>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d003      	beq.n	800327e <I2C_MasterRequestWrite+0x2a>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800327c:	d108      	bne.n	8003290 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e00b      	b.n	80032a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	2b12      	cmp	r3, #18
 8003296:	d107      	bne.n	80032a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8f7 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ce:	d103      	bne.n	80032d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e035      	b.n	8003348 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e4:	d108      	bne.n	80032f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	e01b      	b.n	8003330 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032f8:	897b      	ldrh	r3, [r7, #10]
 80032fa:	11db      	asrs	r3, r3, #7
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 0306 	and.w	r3, r3, #6
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f063 030f 	orn	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <I2C_MasterRequestWrite+0xfc>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f940 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e010      	b.n	8003348 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4907      	ldr	r1, [pc, #28]	@ (8003354 <I2C_MasterRequestWrite+0x100>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f930 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	00010008 	.word	0x00010008
 8003354:	00010002 	.word	0x00010002

08003358 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003370:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003372:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <I2C_DMAAbort+0x148>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	08db      	lsrs	r3, r3, #3
 8003378:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <I2C_DMAAbort+0x14c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a1a      	lsrs	r2, r3, #8
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00da      	lsls	r2, r3, #3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800339e:	e00a      	b.n	80033b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b4:	d0ea      	beq.n	800338c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c2:	2200      	movs	r2, #0
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	2200      	movs	r2, #0
 80033d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f8:	2200      	movs	r2, #0
 80033fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b60      	cmp	r3, #96	@ 0x60
 8003426:	d10e      	bne.n	8003446 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7fe fd7c 	bl	8001f3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003444:	e027      	b.n	8003496 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800344c:	2b28      	cmp	r3, #40	@ 0x28
 800344e:	d117      	bne.n	8003480 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2228      	movs	r2, #40	@ 0x28
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800347e:	e007      	b.n	8003490 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f7fe fd49 	bl	8001f28 <HAL_I2C_ErrorCallback>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000000 	.word	0x20000000
 80034a4:	14f8b589 	.word	0x14f8b589

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e048      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d044      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fd fd4d 	bl	8000f60 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d139      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d116      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e023      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	e00c      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d093      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035aa:	e071      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ba:	d123      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e067      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d041      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fd fca8 	bl	8000f60 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d136      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10c      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e00b      	b.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e021      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10c      	bne.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e00b      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af6d 	bne.w	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e034      	b.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8b8 	bl	8003860 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d028      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fd fc2d 	bl	8000f60 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d1c3      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f870 	bl	8003860 <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fd fbe5 	bl	8000f60 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	4a13      	ldr	r2, [pc, #76]	@ (800385c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	0a1a      	lsrs	r2, r3, #8
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3b01      	subs	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e008      	b.n	800384c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003848:	d0e9      	beq.n	800381e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000000 	.word	0x20000000
 800385c:	14f8b589 	.word	0x14f8b589

08003860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003876:	d11b      	bne.n	80038b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f043 0204 	orr.w	r2, r3, #4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80038ce:	d103      	bne.n	80038d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038d6:	e007      	b.n	80038e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038e0:	d102      	bne.n	80038e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2208      	movs	r2, #8
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cc      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b68      	ldr	r3, [pc, #416]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d90c      	bls.n	8003930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b65      	ldr	r3, [pc, #404]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d044      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e067      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b37      	ldr	r3, [pc, #220]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4934      	ldr	r1, [pc, #208]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fd fabc 	bl	8000f60 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fd fab8 	bl	8000f60 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f855 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fa1c 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08004ae8 	.word	0x08004ae8
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000014 	.word	0x20000014

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08004af8 	.word	0x08004af8

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08004af8 	.word	0x08004af8

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b0ae      	sub	sp, #184	@ 0xb8
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4e:	4bcb      	ldr	r3, [pc, #812]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	f200 8206 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x440>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003f69 	.word	0x08003f69
 8003b6c:	08003f69 	.word	0x08003f69
 8003b70:	08003f69 	.word	0x08003f69
 8003b74:	08003ba1 	.word	0x08003ba1
 8003b78:	08003f69 	.word	0x08003f69
 8003b7c:	08003f69 	.word	0x08003f69
 8003b80:	08003f69 	.word	0x08003f69
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003f69 	.word	0x08003f69
 8003b8c:	08003f69 	.word	0x08003f69
 8003b90:	08003f69 	.word	0x08003f69
 8003b94:	08003d99 	.word	0x08003d99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4bb9      	ldr	r3, [pc, #740]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b9e:	e1e7      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba0:	4bb8      	ldr	r3, [pc, #736]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ba6:	e1e3      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4bb4      	ldr	r3, [pc, #720]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb4:	4bb1      	ldr	r3, [pc, #708]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d071      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4bae      	ldr	r3, [pc, #696]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bcc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c18:	4649      	mov	r1, r9
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4641      	mov	r1, r8
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4641      	mov	r1, r8
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c40:	4649      	mov	r1, r9
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4641      	mov	r1, r8
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4622      	mov	r2, r4
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c70:	4629      	mov	r1, r5
 8003c72:	024b      	lsls	r3, r1, #9
 8003c74:	4621      	mov	r1, r4
 8003c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	024a      	lsls	r2, r1, #9
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c94:	f7fc fab6 	bl	8000204 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ca2:	e067      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4b75      	ldr	r3, [pc, #468]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cb0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4621      	mov	r1, r4
 8003ce0:	1a51      	subs	r1, r2, r1
 8003ce2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	018b      	lsls	r3, r1, #6
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d02:	4641      	mov	r1, r8
 8003d04:	018a      	lsls	r2, r1, #6
 8003d06:	4641      	mov	r1, r8
 8003d08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d26:	4692      	mov	sl, r2
 8003d28:	469b      	mov	fp, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	462b      	mov	r3, r5
 8003d34:	eb4b 0303 	adc.w	r3, fp, r3
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d60:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d66:	f7fc fa4d 	bl	8000204 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d74:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d96:	e0eb      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d98:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06b      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db0:	4b32      	ldr	r3, [pc, #200]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	2200      	movs	r2, #0
 8003db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dcc:	4622      	mov	r2, r4
 8003dce:	462b      	mov	r3, r5
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4621      	mov	r1, r4
 8003de6:	1a51      	subs	r1, r2, r1
 8003de8:	61b9      	str	r1, [r7, #24]
 8003dea:	4629      	mov	r1, r5
 8003dec:	eb63 0301 	sbc.w	r3, r3, r1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dfe:	4659      	mov	r1, fp
 8003e00:	018b      	lsls	r3, r1, #6
 8003e02:	4651      	mov	r1, sl
 8003e04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e08:	4651      	mov	r1, sl
 8003e0a:	018a      	lsls	r2, r1, #6
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e12:	4659      	mov	r1, fp
 8003e14:	eb63 0901 	sbc.w	r9, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	eb18 0303 	adds.w	r3, r8, r3
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	462b      	mov	r3, r5
 8003e3a:	eb49 0303 	adc.w	r3, r9, r3
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	024b      	lsls	r3, r1, #9
 8003e50:	4621      	mov	r1, r4
 8003e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e56:	4621      	mov	r1, r4
 8003e58:	024a      	lsls	r2, r1, #9
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e62:	2200      	movs	r2, #0
 8003e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e6c:	f7fc f9ca 	bl	8000204 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e7a:	e065      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x420>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	4611      	mov	r1, r2
 8003e94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	0159      	lsls	r1, r3, #5
 8003eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb4:	0150      	lsls	r0, r2, #5
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4641      	mov	r1, r8
 8003ebc:	1a51      	subs	r1, r2, r1
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	018b      	lsls	r3, r1, #6
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ede:	4651      	mov	r1, sl
 8003ee0:	018a      	lsls	r2, r1, #6
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	1a54      	subs	r4, r2, r1
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	eb63 0501 	sbc.w	r5, r3, r1
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	00eb      	lsls	r3, r5, #3
 8003ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003efa:	00e2      	lsls	r2, r4, #3
 8003efc:	4614      	mov	r4, r2
 8003efe:	461d      	mov	r5, r3
 8003f00:	4643      	mov	r3, r8
 8003f02:	18e3      	adds	r3, r4, r3
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	464b      	mov	r3, r9
 8003f08:	eb45 0303 	adc.w	r3, r5, r3
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	028b      	lsls	r3, r1, #10
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f24:	4621      	mov	r1, r4
 8003f26:	028a      	lsls	r2, r1, #10
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f30:	2200      	movs	r2, #0
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f3a:	f7fc f963 	bl	8000204 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4613      	mov	r3, r2
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	37b8      	adds	r7, #184	@ 0xb8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e28d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8083 	beq.w	80040ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fa8:	4b94      	ldr	r3, [pc, #592]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d019      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fb4:	4b91      	ldr	r3, [pc, #580]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fce:	4b8b      	ldr	r3, [pc, #556]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d112      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b88      	ldr	r3, [pc, #544]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4b84      	ldr	r3, [pc, #528]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <HAL_RCC_OscConfig+0x124>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d157      	bne.n	80040ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e25a      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x90>
 800400a:	4b7c      	ldr	r3, [pc, #496]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7b      	ldr	r2, [pc, #492]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xb4>
 8004022:	4b76      	ldr	r3, [pc, #472]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a72      	ldr	r2, [pc, #456]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 800403c:	4b6f      	ldr	r3, [pc, #444]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6e      	ldr	r2, [pc, #440]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b6c      	ldr	r3, [pc, #432]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6b      	ldr	r2, [pc, #428]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fc ff80 	bl	8000f60 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fc ff7c 	bl	8000f60 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e21f      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b61      	ldr	r3, [pc, #388]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xdc>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fc ff6c 	bl	8000f60 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fc ff68 	bl	8000f60 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e20b      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	4b57      	ldr	r3, [pc, #348]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x104>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06f      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040ba:	4b50      	ldr	r3, [pc, #320]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d017      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040c6:	4b4d      	ldr	r3, [pc, #308]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1d3      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc ff15 	bl	8000f60 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fc ff11 	bl	8000f60 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1b4      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fc fef4 	bl	8000f60 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fc fef0 	bl	8000f60 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e193      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fc fed4 	bl	8000f60 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fc fed0 	bl	8000f60 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e173      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x234>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fc febd 	bl	8000f60 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fc feb9 	bl	8000f60 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e15c      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b83      	ldr	r3, [pc, #524]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7f      	ldr	r3, [pc, #508]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4a7e      	ldr	r2, [pc, #504]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	@ 0x40
 8004242:	4b7c      	ldr	r3, [pc, #496]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b76      	ldr	r3, [pc, #472]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a75      	ldr	r2, [pc, #468]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fc fe79 	bl	8000f60 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fc fe75 	bl	8000f60 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e118      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6c      	ldr	r3, [pc, #432]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31e>
 8004298:	4b66      	ldr	r3, [pc, #408]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a65      	ldr	r2, [pc, #404]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x340>
 80042ae:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a60      	ldr	r2, [pc, #384]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a59      	ldr	r2, [pc, #356]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fc fe3a 	bl	8000f60 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fc fe36 	bl	8000f60 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0d7      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x368>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fc fe24 	bl	8000f60 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fc fe20 	bl	8000f60 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0c1      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	4a3a      	ldr	r2, [pc, #232]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ad 	beq.w	80044b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d145      	bne.n	80043fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc fdf4 	bl	8000f60 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fdf0 	bl	8000f60 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e093      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	491b      	ldr	r1, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fc fdc5 	bl	8000f60 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fc fdc1 	bl	8000f60 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e064      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x452>
 80043f8:	e05c      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fc fdae 	bl	8000f60 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fc fdaa 	bl	8000f60 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x480>
 8004426:	e045      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e040      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004440:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <HAL_RCC_OscConfig+0x538>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d030      	beq.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d129      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d122      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	4293      	cmp	r3, r2
 800447a:	d119      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d10f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e042      	b.n	800455c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fa02 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	@ 0x24
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f82b 	bl	8004564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800451c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800452c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800453c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004568:	b0c0      	sub	sp, #256	@ 0x100
 800456a:	af00      	add	r7, sp, #0
 800456c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	ea40 0301 	orr.w	r3, r0, r1
 800458c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045bc:	f021 010c 	bic.w	r1, r1, #12
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	6999      	ldr	r1, [r3, #24]
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	ea40 0301 	orr.w	r3, r0, r1
 80045ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004830 <UART_SetConfig+0x2cc>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d005      	beq.n	8004604 <UART_SetConfig+0xa0>
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004834 <UART_SetConfig+0x2d0>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d104      	bne.n	800460e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff fa7c 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8004608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800460c:	e003      	b.n	8004616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460e:	f7ff fa63 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8004612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004620:	f040 810c 	bne.w	800483c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800462e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	1891      	adds	r1, r2, r2
 800463c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800463e:	415b      	adcs	r3, r3
 8004640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004646:	4621      	mov	r1, r4
 8004648:	eb12 0801 	adds.w	r8, r2, r1
 800464c:	4629      	mov	r1, r5
 800464e:	eb43 0901 	adc.w	r9, r3, r1
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004666:	4690      	mov	r8, r2
 8004668:	4699      	mov	r9, r3
 800466a:	4623      	mov	r3, r4
 800466c:	eb18 0303 	adds.w	r3, r8, r3
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004674:	462b      	mov	r3, r5
 8004676:	eb49 0303 	adc.w	r3, r9, r3
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800468a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800468e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004692:	460b      	mov	r3, r1
 8004694:	18db      	adds	r3, r3, r3
 8004696:	653b      	str	r3, [r7, #80]	@ 0x50
 8004698:	4613      	mov	r3, r2
 800469a:	eb42 0303 	adc.w	r3, r2, r3
 800469e:	657b      	str	r3, [r7, #84]	@ 0x54
 80046a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a8:	f7fb fdac 	bl	8000204 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <UART_SetConfig+0x2d4>)
 80046b2:	fba3 2302 	umull	r2, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	011c      	lsls	r4, r3, #4
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	1891      	adds	r1, r2, r2
 80046d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046d4:	415b      	adcs	r3, r3
 80046d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046dc:	4641      	mov	r1, r8
 80046de:	eb12 0a01 	adds.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0b01 	adc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fc:	4692      	mov	sl, r2
 80046fe:	469b      	mov	fp, r3
 8004700:	4643      	mov	r3, r8
 8004702:	eb1a 0303 	adds.w	r3, sl, r3
 8004706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800470a:	464b      	mov	r3, r9
 800470c:	eb4b 0303 	adc.w	r3, fp, r3
 8004710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004728:	460b      	mov	r3, r1
 800472a:	18db      	adds	r3, r3, r3
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
 800472e:	4613      	mov	r3, r2
 8004730:	eb42 0303 	adc.w	r3, r2, r3
 8004734:	647b      	str	r3, [r7, #68]	@ 0x44
 8004736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800473a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800473e:	f7fb fd61 	bl	8000204 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4611      	mov	r1, r2
 8004748:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <UART_SetConfig+0x2d4>)
 800474a:	fba3 2301 	umull	r2, r3, r3, r1
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2264      	movs	r2, #100	@ 0x64
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800475e:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004760:	fba3 2302 	umull	r2, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800477c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004788:	415b      	adcs	r3, r3
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800478c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6339      	str	r1, [r7, #48]	@ 0x30
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047fa:	f7fb fd03 	bl	8000204 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	@ 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	@ 0x32
 8004816:	4a08      	ldr	r2, [pc, #32]	@ (8004838 <UART_SetConfig+0x2d4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0207 	and.w	r2, r3, #7
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4422      	add	r2, r4
 800482a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800482c:	e106      	b.n	8004a3c <UART_SetConfig+0x4d8>
 800482e:	bf00      	nop
 8004830:	40011000 	.word	0x40011000
 8004834:	40011400 	.word	0x40011400
 8004838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004840:	2200      	movs	r2, #0
 8004842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800484a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800484e:	4642      	mov	r2, r8
 8004850:	464b      	mov	r3, r9
 8004852:	1891      	adds	r1, r2, r2
 8004854:	6239      	str	r1, [r7, #32]
 8004856:	415b      	adcs	r3, r3
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
 800485a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485e:	4641      	mov	r1, r8
 8004860:	1854      	adds	r4, r2, r1
 8004862:	4649      	mov	r1, r9
 8004864:	eb43 0501 	adc.w	r5, r3, r1
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004884:	464b      	mov	r3, r9
 8004886:	eb45 0303 	adc.w	r3, r5, r3
 800488a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800489a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048aa:	4629      	mov	r1, r5
 80048ac:	008b      	lsls	r3, r1, #2
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b4:	4621      	mov	r1, r4
 80048b6:	008a      	lsls	r2, r1, #2
 80048b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048bc:	f7fb fca2 	bl	8000204 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	011c      	lsls	r4, r3, #4
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	1891      	adds	r1, r2, r2
 80048e6:	61b9      	str	r1, [r7, #24]
 80048e8:	415b      	adcs	r3, r3
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f0:	4641      	mov	r1, r8
 80048f2:	1851      	adds	r1, r2, r1
 80048f4:	6139      	str	r1, [r7, #16]
 80048f6:	4649      	mov	r1, r9
 80048f8:	414b      	adcs	r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	00cb      	lsls	r3, r1, #3
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004912:	4651      	mov	r1, sl
 8004914:	00ca      	lsls	r2, r1, #3
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	4603      	mov	r3, r0
 800491c:	4642      	mov	r2, r8
 800491e:	189b      	adds	r3, r3, r2
 8004920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004924:	464b      	mov	r3, r9
 8004926:	460a      	mov	r2, r1
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800493a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004948:	4649      	mov	r1, r9
 800494a:	008b      	lsls	r3, r1, #2
 800494c:	4641      	mov	r1, r8
 800494e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004952:	4641      	mov	r1, r8
 8004954:	008a      	lsls	r2, r1, #2
 8004956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800495a:	f7fb fc53 	bl	8000204 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4611      	mov	r1, r2
 8004964:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004966:	fba3 2301 	umull	r2, r3, r3, r1
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	2264      	movs	r2, #100	@ 0x64
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	1acb      	subs	r3, r1, r3
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	3332      	adds	r3, #50	@ 0x32
 8004978:	4a33      	ldr	r2, [pc, #204]	@ (8004a48 <UART_SetConfig+0x4e4>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004984:	441c      	add	r4, r3
 8004986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800498a:	2200      	movs	r2, #0
 800498c:	673b      	str	r3, [r7, #112]	@ 0x70
 800498e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	415b      	adcs	r3, r3
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a4:	4641      	mov	r1, r8
 80049a6:	1851      	adds	r1, r2, r1
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	4649      	mov	r1, r9
 80049ac:	414b      	adcs	r3, r1
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049bc:	4659      	mov	r1, fp
 80049be:	00cb      	lsls	r3, r1, #3
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c6:	4651      	mov	r1, sl
 80049c8:	00ca      	lsls	r2, r1, #3
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	4642      	mov	r2, r8
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d6:	464b      	mov	r3, r9
 80049d8:	460a      	mov	r2, r1
 80049da:	eb42 0303 	adc.w	r3, r2, r3
 80049de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049f8:	4649      	mov	r1, r9
 80049fa:	008b      	lsls	r3, r1, #2
 80049fc:	4641      	mov	r1, r8
 80049fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a02:	4641      	mov	r1, r8
 8004a04:	008a      	lsls	r2, r1, #2
 8004a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a0a:	f7fb fbfb 	bl	8000204 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	@ 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	3332      	adds	r3, #50	@ 0x32
 8004a26:	4a08      	ldr	r2, [pc, #32]	@ (8004a48 <UART_SetConfig+0x4e4>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4422      	add	r2, r4
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a42:	46bd      	mov	sp, r7
 8004a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a48:	51eb851f 	.word	0x51eb851f

08004a4c <memset>:
 8004a4c:	4402      	add	r2, r0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d100      	bne.n	8004a56 <memset+0xa>
 8004a54:	4770      	bx	lr
 8004a56:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5a:	e7f9      	b.n	8004a50 <memset+0x4>

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a94 <__libc_init_array+0x38>)
 8004a60:	4c0d      	ldr	r4, [pc, #52]	@ (8004a98 <__libc_init_array+0x3c>)
 8004a62:	1b64      	subs	r4, r4, r5
 8004a64:	10a4      	asrs	r4, r4, #2
 8004a66:	2600      	movs	r6, #0
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a9c <__libc_init_array+0x40>)
 8004a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004aa0 <__libc_init_array+0x44>)
 8004a70:	f000 f818 	bl	8004aa4 <_init>
 8004a74:	1b64      	subs	r4, r4, r5
 8004a76:	10a4      	asrs	r4, r4, #2
 8004a78:	2600      	movs	r6, #0
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08004b08 	.word	0x08004b08
 8004a98:	08004b08 	.word	0x08004b08
 8004a9c:	08004b08 	.word	0x08004b08
 8004aa0:	08004b0c 	.word	0x08004b0c

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
